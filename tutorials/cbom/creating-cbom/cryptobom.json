{
    "components": [
        {
            "bom-ref": "cryptography:algorithm:30955f32-c3a0-4691-92fa-90e0034e9bb2",
            "cryptoProperties": {
                "algorithmProperties": {
                    "padding": "unknown",
                    "primitive": "keyagree",
                    "variant": "DIFFIEHELLMAN"
                },
                "assetType": "algorithm",
                "detectionContext": [
                    {
                        "additionalContext": "        assert mac is not None\n\n    if (formatted_mac := format_mac(mac)) != mac:\n        # The DHCP discovery path did not format the MAC address\n        # so we need to update the config entry if it's different\n",
                        "filePath": "homeassistant/components/goalzero/__init__.py",
                        "lineNumbers": [
                            26,
                            27,
                            28,
                            29,
                            30
                        ]
                    },
                    {
                        "additionalContext": "\n    serial = formatted_serial(coordinator.serial_number)\n    if serial != entry.unique_id:\n        # If the serial number of the device does not match the unique_id\n        # of the config entry, it likely means the DHCP lease has expired\n",
                        "filePath": "homeassistant/components/lifx/__init__.py",
                        "lineNumbers": [
                            221,
                            222,
                            223,
                            224,
                            225
                        ]
                    },
                    {
                        "additionalContext": "\n    found_mac = format_mac(mm.mac.hex())\n    if found_mac not in (EMPTY_MAC, entry.unique_id):\n        # If the mac address of the device does not match the unique_id\n        # of the config entry, it likely means the DHCP lease has expired\n",
                        "filePath": "homeassistant/components/motionmount/__init__.py",
                        "lineNumbers": [
                            38,
                            39,
                            40,
                            41,
                            42
                        ]
                    },
                    {
                        "additionalContext": "                )\n                raise AbortFlow(\"already_configured\") from err\n            if format_mac(host.api.mac_address) != mac_address:\n                _LOGGER.debug(\n                    \"Reolink mac address '%s' at new IP '%s' from DHCP, \"\n",
                        "filePath": "homeassistant/components/reolink/config_flow.py",
                        "lineNumbers": [
                            162,
                            163,
                            164,
                            165,
                            166
                        ]
                    },
                    {
                        "additionalContext": "        )\n    found_mac = dr.format_mac(device.mac)\n    if found_mac != entry.unique_id:\n        # If the mac address of the device does not match the unique_id\n        # of the config entry, it likely means the DHCP lease has expired\n",
                        "filePath": "homeassistant/components/tplink/__init__.py",
                        "lineNumbers": [
                            177,
                            178,
                            179,
                            180,
                            181
                        ]
                    },
                    {
                        "additionalContext": "    device = devices[0]\n    assert device.model == \"TestModel\"\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, MAC)}\n    assert config_entry.data[CONF_HOST] == DHCP_DISCOVERY_SAME_IP.ip\n    await hass.config_entries.async_unload(config_entry.entry_id)\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            708,
                            709,
                            710,
                            711,
                            712
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == \"OwnTracks\"\n    assert result[\"data\"][CONF_WEBHOOK_ID] == WEBHOOK_ID\n    assert result[\"data\"][CONF_SECRET] == SECRET\n    assert result[\"data\"][CONF_CLOUDHOOK] == CLOUDHOOK\n    assert result[\"description_placeholders\"][CONF_WEBHOOK_URL] == WEBHOOK_URL\n",
                        "filePath": "tests/components/owntracks/test_config_flow.py",
                        "lineNumbers": [
                            75,
                            76,
                            77,
                            78,
                            79
                        ]
                    }
                ]
            },
            "name": "DIFFIEHELLMAN",
            "type": "crypto-asset"
        },
        {
            "bom-ref": "cryptography:algorithm:458a9c2f-14e5-4b74-99fc-988fe23682d6",
            "cryptoProperties": {
                "algorithmProperties": {
                    "padding": "unknown",
                    "primitive": "hash",
                    "variant": "SHA1"
                },
                "assetType": "algorithm",
                "detectionContext": [
                    {
                        "additionalContext": "    assert req.status == HTTPStatus.OK\n    data = await req.read()\n    assert sha1(data).hexdigest() == mp3sha\n\n\n",
                        "filePath": "tests/components/mailbox/test_init.py",
                        "lineNumbers": [
                            155,
                            156,
                            157,
                            158,
                            159
                        ]
                    }
                ]
            },
            "name": "SHA1",
            "type": "crypto-asset"
        },
        {
            "bom-ref": "cryptography:algorithm:9541a6b5-97aa-4e6b-8959-d00c6a761b36",
            "cryptoProperties": {
                "algorithmProperties": {
                    "cryptoFunctions": [
                        "encrypt"
                    ],
                    "padding": "unknown",
                    "primitive": "unknown",
                    "variant": "UNKNOWN"
                },
                "assetType": "algorithm",
                "detectionContext": [
                    {
                        "additionalContext": "            expire_at = None\n\n        if user.system_generated != (token_type == models.TOKEN_TYPE_SYSTEM):\n            raise ValueError(\n                \"System generated users can only have system type refresh tokens\"\n",
                        "filePath": "homeassistant/auth/__init__.py",
                        "lineNumbers": [
                            461,
                            462,
                            463,
                            464,
                            465
                        ]
                    },
                    {
                        "additionalContext": "            )\n\n        if\n        if (\n            token_type == models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n            and client_name is None\n        ):\n",
                        "filePath": "homeassistant/auth/__init__.py",
                        "lineNumbers": [
                            466,
                            467,
                            468,
                            469,
                            470,
                            471,
                            472,
                            473,
                            474
                        ]
                    },
                    {
                        "additionalContext": "            raise ValueError(\"Client_name is required for long-lived access token\")\n\n        if                 if (\n                    token.client_name == client_name\n                    and token.token_type == models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n                ):\n                    # Each client_name can only have one\n",
                        "filePath": "homeassistant/auth/__init__.py",
                        "lineNumbers": [
                            475,
                            476,
                            477,
                            478,
                            479,
                            480,
                            481,
                            482,
                            483
                        ]
                    },
                    {
                        "additionalContext": "    ) -> CALLBACK_TYPE:\n        \"\"\"Register a callback to be called when the refresh token id is revoked.\"\"\"\n        if refresh_token_id not in self._revoke_callbacks:\n            self._revoke_callbacks[refresh_token_id] = set()\n\n",
                        "filePath": "homeassistant/auth/__init__.py",
                        "lineNumbers": [
                            568,
                            569,
                            570,
                            571,
                            572
                        ]
                    },
                    {
                        "additionalContext": "        _LOGGER.error(\n            \"Invalid configuration for auth provider %s: %s\",\n            provider_name,\n            humanize_error(config, err),\n        )\n",
                        "filePath": "homeassistant/auth/providers/__init__.py",
                        "lineNumbers": [
                            146,
                            147,
                            148,
                            149,
                            150
                        ]
                    },
                    {
                        "additionalContext": "        )\n    except ImportError as err:\n        _LOGGER.error(\"Unable to load auth provider %s: %s\", provider, err)\n        raise HomeAssistantError(\n            f\"Unable to load auth provider {provider}: {err}\"\n",
                        "filePath": "homeassistant/auth/providers/__init__.py",
                        "lineNumbers": [
                            163,
                            164,
                            165,
                            166,
                            167
                        ]
                    },
                    {
                        "additionalContext": "        entry.unique_id is None\n        and AZD_WEBSERVER in coordinator.data\n        and AZD_MAC in coordinator.data[AZD_WEBSERVER]\n        and (mac := coordinator.data[AZD_WEBSERVER][AZD_MAC]) is not None\n    ):\n",
                        "filePath": "homeassistant/components/airzone/__init__.py",
                        "lineNumbers": [
                            62,
                            63,
                            64,
                            65,
                            66
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Create an oauth config entry or update existing entry for reauth.\"\"\"\n        token_payload = jwt.decode(\n            data[CONF_TOKEN][CONF_ACCESS_TOKEN], options={\"verify_signature\": False}\n        )\n        if not self.reauth_entry:\n",
                        "filePath": "homeassistant/components/aladdin_connect/config_flow.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "            )\n\n        if self.reauth_entry.unique_id == token_payload[\"username\"]:\n            return self.async_update_reload_and_abort(\n                self.reauth_entry,\n",
                        "filePath": "homeassistant/components/aladdin_connect/config_flow.py",
                        "lineNumbers": [
                            54,
                            55,
                            56,
                            57,
                            58
                        ]
                    },
                    {
                        "additionalContext": "                unique_id=token_payload[\"sub\"],\n            )\n        if self.reauth_entry.unique_id == token_payload[\"sub\"]:\n            return self.async_update_reload_and_abort(self.reauth_entry, data=data)\n\n",
                        "filePath": "homeassistant/components/aladdin_connect/config_flow.py",
                        "lineNumbers": [
                            60,
                            61,
                            62,
                            63,
                            64
                        ]
                    },
                    {
                        "additionalContext": "        if if_mac := dev_props.get(prop_mac):\n            mac = format_mac(if_mac)\n            if mac not in _INVALID_MACS:\n                return mac\n    return None\n",
                        "filePath": "homeassistant/components/androidtv/__init__.py",
                        "lineNumbers": [
                            84,
                            85,
                            86,
                            87,
                            88
                        ]
                    },
                    {
                        "additionalContext": "            mac_address = format_mac(coordinator.data[Attribute.MAC_ADDRESS])\n\n            if mac_address != entry.unique_id:\n                raise ConfigEntryAuthFailed(\"Invalid MAC address\")\n\n",
                        "filePath": "homeassistant/components/aprilaire/__init__.py",
                        "lineNumbers": [
                            36,
                            37,
                            38,
                            39,
                            40
                        ]
                    },
                    {
                        "additionalContext": "\n        for device in result:\n            if device.online and device.mac not in mac_addresses:\n                last_results.append(device)\n                mac_addresses.add(device.mac)\n",
                        "filePath": "homeassistant/components/arris_tg2492lg/device_tracker.py",
                        "lineNumbers": [
                            74,
                            75,
                            76,
                            77,
                            78
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Get label mac information.\"\"\"\n        label_mac = await self._get_nvram_info(\"LABEL_MAC\")\n        if label_mac and \"label_mac\" in label_mac:\n            self._label_mac = format_mac(label_mac[\"label_mac\"])\n\n",
                        "filePath": "homeassistant/components/asuswrt/bridge.py",
                        "lineNumbers": [
                            232,
                            233,
                            234,
                            235,
                            236
                        ]
                    },
                    {
                        "additionalContext": "\n    for mac, device in router.devices.items():\n        if mac in tracked:\n            continue\n\n",
                        "filePath": "homeassistant/components/asuswrt/device_tracker.py",
                        "lineNumbers": [
                            45,
                            46,
                            47,
                            48,
                            49
                        ]
                    },
                    {
                        "additionalContext": "\n            # migrate entity unique ID if wrong formatted\n            if device_mac != entry.unique_id:\n                existing_entity_id = entity_reg.async_get_entity_id(\n                    TRACKER_DOMAIN, DOMAIN, device_mac\n",
                        "filePath": "homeassistant/components/asuswrt/router.py",
                        "lineNumbers": [
                            240,
                            241,
                            242,
                            243,
                            244
                        ]
                    },
                    {
                        "additionalContext": "            current_refresh_token = token\n            continue\n        if limit_token_types and token_type != token.token_type:\n            continue\n        try:\n",
                        "filePath": "homeassistant/components/auth/__init__.py",
                        "lineNumbers": [
                            639,
                            640,
                            641,
                            642,
                            643
                        ]
                    },
                    {
                        "additionalContext": "\n    if delete_current_token and (\n        not limit_token_types or current_refresh_token.token_type == token_type\n    ):\n        # Deleting the token will close the connection so we need\n",
                        "filePath": "homeassistant/components/auth/__init__.py",
                        "lineNumbers": [
                            676,
                            677,
                            678,
                            679,
                            680
                        ]
                    },
                    {
                        "additionalContext": "        for address, device_config in config[CONF_DEVICES].items()\n    ]\n    if CONF_USERNAME in config and CONF_PASSWORD in config:\n        lights.extend(\n            AvionLight(device)\n",
                        "filePath": "homeassistant/components/avion/light.py",
                        "lineNumbers": [
                            66,
                            67,
                            68,
                            69,
                            70
                        ]
                    },
                    {
                        "additionalContext": "        session = AioSession(profile=profile)\n        del aws_config[CONF_PROFILE_NAME]\n        if CONF_ACCESS_KEY_ID in aws_config:\n            del aws_config[CONF_ACCESS_KEY_ID]\n        if CONF_SECRET_ACCESS_KEY in aws_config:\n            del aws_config[CONF_SECRET_ACCESS_KEY]\n    else:\n",
                        "filePath": "homeassistant/components/aws/__init__.py",
                        "lineNumbers": [
                            167,
                            168,
                            169,
                            170,
                            171,
                            172,
                            173
                        ]
                    },
                    {
                        "additionalContext": "\n        if new_device:\n            if address in new_devices:\n                new_devices[address][\"seen\"] += 1\n                if name:\n",
                        "filePath": "homeassistant/components/bluetooth_le_tracker/device_tracker.py",
                        "lineNumbers": [
                            84,
                            85,
                            86,
                            87,
                            88
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Update from a ble callback.\"\"\"\n        mac = service_info.address\n        if mac in devs_to_track:\n            devs_advertise_time[mac] = service_info.time\n            now = dt_util.utcnow()\n",
                        "filePath": "homeassistant/components/bluetooth_le_tracker/device_tracker.py",
                        "lineNumbers": [
                            179,
                            180,
                            181,
                            182,
                            183
                        ]
                    },
                    {
                        "additionalContext": "            hass.async_create_task(async_see_device(mac, service_info.name))\n            if (\n                mac in devs_track_battery\n                and now > devs_track_battery[mac] + battery_track_interval\n            ):\n",
                        "filePath": "homeassistant/components/bluetooth_le_tracker/device_tracker.py",
                        "lineNumbers": [
                            184,
                            185,
                            186,
                            187,
                            188
                        ]
                    },
                    {
                        "additionalContext": "\n        if track_new:\n            if mac not in devs_to_track and mac not in devs_no_track:\n                _LOGGER.info(\"Discovered Bluetooth LE device %s\", mac)\n                hass.async_create_task(\n",
                        "filePath": "homeassistant/components/bluetooth_le_tracker/device_tracker.py",
                        "lineNumbers": [
                            194,
                            195,
                            196,
                            197,
                            198
                        ]
                    },
                    {
                        "additionalContext": "                devices = await hass.async_add_executor_job(discover_devices, device_id)\n                for mac, _device_name in devices:\n                    if mac not in devices_to_track and mac not in devices_to_not_track:\n                        devices_to_track.add(mac)\n\n",
                        "filePath": "homeassistant/components/bluetooth_tracker/device_tracker.py",
                        "lineNumbers": [
                            159,
                            160,
                            161,
                            162,
                            163
                        ]
                    },
                    {
                        "additionalContext": "        self._entry = entry\n\n        if CONF_REFRESH_TOKEN in entry.data:\n            self.account.set_refresh_token(\n                refresh_token=entry.data[CONF_REFRESH_TOKEN],\n",
                        "filePath": "homeassistant/components/bmw_connected_drive/coordinator.py",
                        "lineNumbers": [
                            38,
                            39,
                            40,
                            41,
                            42
                        ]
                    },
                    {
                        "additionalContext": "            raise UpdateFailed(err) from err\n\n        if self.account.refresh_token != old_refresh_token:\n            self._update_config_entry_refresh_token(self.account.refresh_token)\n            _LOGGER.debug(\n",
                        "filePath": "homeassistant/components/bmw_connected_drive/coordinator.py",
                        "lineNumbers": [
                            70,
                            71,
                            72,
                            73,
                            74
                        ]
                    },
                    {
                        "additionalContext": "        errors = {}\n        if user_input is not None:\n            if CONF_ACCESS_TOKEN in self._discovered:\n                return self.async_create_entry(\n                    title=self._discovered[CONF_NAME],\n",
                        "filePath": "homeassistant/components/bond/config_flow.py",
                        "lineNumbers": [
                            140,
                            141,
                            142,
                            143,
                            144
                        ]
                    },
                    {
                        "additionalContext": "                )\n\n        if CONF_ACCESS_TOKEN in self._discovered:\n            data_schema = TOKEN_SCHEMA\n        else:\n",
                        "filePath": "homeassistant/components/bond/config_flow.py",
                        "lineNumbers": [
                            163,
                            164,
                            165,
                            166,
                            167
                        ]
                    },
                    {
                        "additionalContext": "    makedirs(hass.config.path(DOMAIN), exist_ok=True)\n    with open(hass.config.path(DOMAIN, filename), \"w\", encoding=\"utf8\") as file_handle:\n        file_handle.write(asset.decode(\"utf-8\"))\n\n\n",
                        "filePath": "homeassistant/components/bosch_shc/config_flow.py",
                        "lineNumbers": [
                            44,
                            45,
                            46,
                            47,
                            48
                        ]
                    },
                    {
                        "additionalContext": "    await brother.async_update()\n\n    if expected_mac is not None and brother.serial.lower() != expected_mac:\n        raise AnotherDevice\n\n",
                        "filePath": "homeassistant/components/brother/config_flow.py",
                        "lineNumbers": [
                            39,
                            40,
                            41,
                            42,
                            43
                        ]
                    },
                    {
                        "additionalContext": "\n    if err_info is None:\n        _LOGGER.exception(\"Unexpected error processing request for %s\", where)\n        err_info = (HTTPStatus.BAD_GATEWAY, f\"Unexpected error: {exc}\")\n\n",
                        "filePath": "homeassistant/components/cloud/http_api.py",
                        "lineNumbers": [
                            180,
                            181,
                            182,
                            183,
                            184
                        ]
                    },
                    {
                        "additionalContext": "        mac = None\n        for conn in device_entry.connections:\n            if conn[0] == dr.CONNECTION_NETWORK_MAC:\n                mac = conn[1]\n                break\n",
                        "filePath": "homeassistant/components/device_tracker/config_entry.py",
                        "lineNumbers": [
                            121,
                            122,
                            123,
                            124,
                            125
                        ]
                    },
                    {
                        "additionalContext": "    extra_attributes_by_mac: dict[str, dict[str, Any]] = {}\n    for mac in found_devices:\n        if device_name_uses_executor and mac not in seen:\n            host_name_by_mac[mac] = scanner.get_device_name(mac)\n        if extra_attributes_uses_executor:\n",
                        "filePath": "homeassistant/components/device_tracker/legacy.py",
                        "lineNumbers": [
                            421,
                            422,
                            423,
                            424,
                            425
                        ]
                    },
                    {
                        "additionalContext": "\n        for mac in found_devices:\n            if mac in seen:\n                host_name = None\n            else:\n",
                        "filePath": "homeassistant/components/device_tracker/legacy.py",
                        "lineNumbers": [
                            490,
                            491,
                            492,
                            493,
                            494
                        ]
                    },
                    {
                        "additionalContext": "                    )\n                )\n                not in tracked\n            ):\n                missing.append(\n",
                        "filePath": "homeassistant/components/devolo_home_network/device_tracker.py",
                        "lineNumbers": [
                            66,
                            67,
                            68,
                            69,
                            70
                        ]
                    },
                    {
                        "additionalContext": "        if (\n            data\n            and data[MAC_ADDRESS] == mac_address\n            and data[HOSTNAME].startswith(hostname)\n        ):\n",
                        "filePath": "homeassistant/components/dhcp/__init__.py",
                        "lineNumbers": [
                            219,
                            220,
                            221,
                            222,
                            223
                        ]
                    },
                    {
                        "additionalContext": "        if isinstance(value, str) and not value:\n            continue\n        if key in to_redact:\n            redacted[key] = REDACTED\n        elif isinstance(value, Mapping):\n",
                        "filePath": "homeassistant/components/diagnostics/util.py",
                        "lineNumbers": [
                            36,
                            37,
                            38,
                            39,
                            40
                        ]
                    },
                    {
                        "additionalContext": "            if self._location == entry.data.get(CONF_URL):\n                return self.async_abort(reason=\"already_configured\")\n            if self._mac and self._mac == entry.data.get(CONF_MAC):\n                return self.async_abort(reason=\"already_configured\")\n\n",
                        "filePath": "homeassistant/components/dlna_dmr/config_flow.py",
                        "lineNumbers": [
                            152,
                            153,
                            154,
                            155,
                            156
                        ]
                    },
                    {
                        "additionalContext": "\n        new_mac_address = entry.data.get(CONF_MAC)\n        if new_mac_address != self.mac_address:\n            self.mac_address = new_mac_address\n            self._update_device_registry(set_mac=True)\n",
                        "filePath": "homeassistant/components/dlna_dmr/media_player.py",
                        "lineNumbers": [
                            326,
                            327,
                            328,
                            329,
                            330
                        ]
                    },
                    {
                        "additionalContext": "        macaddress = discovery_info.properties[\"macaddress\"]\n\n        if macaddress[:6] != DOORBIRD_OUI:\n            return self.async_abort(reason=\"not_doorbird_device\")\n        if discovery_info.ip_address.is_link_local:\n",
                        "filePath": "homeassistant/components/doorbird/config_flow.py",
                        "lineNumbers": [
                            110,
                            111,
                            112,
                            113,
                            114
                        ]
                    },
                    {
                        "additionalContext": "    for data in domain_data.values():\n        door_station = data.door_station\n        if door_station.token == token:\n            return door_station\n    return None\n",
                        "filePath": "homeassistant/components/doorbird/util.py",
                        "lineNumbers": [
                            22,
                            23,
                            24,
                            25,
                            26
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Validate that a host is properly configured.\"\"\"\n    if config[CONF_HOST].startswith(\"elks://\"):\n        if CONF_USERNAME not in config or CONF_PASSWORD not in config:\n            raise vol.Invalid(\"Specify username and password for elks://\")\n    elif not config[CONF_HOST].startswith(\"elk://\") and not config[\n",
                        "filePath": "homeassistant/components/elkm1/__init__.py",
                        "lineNumbers": [
                            108,
                            109,
                            110,
                            111,
                            112
                        ]
                    },
                    {
                        "additionalContext": "\n    short_mac = _short_mac(mac) if mac else None\n    if prefix and prefix != short_mac:\n        device_name = prefix\n    elif mac:\n",
                        "filePath": "homeassistant/components/elkm1/config_flow.py",
                        "lineNumbers": [
                            96,
                            97,
                            98,
                            99,
                            100
                        ]
                    },
                    {
                        "additionalContext": "        for entry in self._async_current_entries(include_ignore=False):\n            if (\n                entry.unique_id == mac\n                or hostname_from_url(entry.data[CONF_HOST]) == host\n            ):\n",
                        "filePath": "homeassistant/components/elkm1/config_flow.py",
                        "lineNumbers": [
                            171,
                            172,
                            173,
                            174,
                            175
                        ]
                    },
                    {
                        "additionalContext": "            mac: f\"{_short_mac(device.mac_address)} ({device.ip_address})\"\n            for mac, device in self._discovered_devices.items()\n            if mac not in current_unique_ids and device.ip_address not in current_hosts\n        }\n        if not devices_name:\n",
                        "filePath": "homeassistant/components/elkm1/config_flow.py",
                        "lineNumbers": [
                            226,
                            227,
                            228,
                            229,
                            230
                        ]
                    },
                    {
                        "additionalContext": "        if HUE_API_STATE_ON in request_json:\n            if not isinstance(request_json[HUE_API_STATE_ON], bool):\n                _LOGGER.error(\"Unable to parse data: %s\", request_json)\n                return self.json_message(\"Bad request\", HTTPStatus.BAD_REQUEST)\n            parsed[STATE_ON] = request_json[HUE_API_STATE_ON]\n",
                        "filePath": "homeassistant/components/emulated_hue/hue_api.py",
                        "lineNumbers": [
                            399,
                            400,
                            401,
                            402,
                            403
                        ]
                    },
                    {
                        "additionalContext": "                    parsed[attr] = int(request_json[key])\n                except ValueError:\n                    _LOGGER.error(\"Unable to parse data (2): %s\", request_json)\n                    return self.json_message(\"Bad request\", HTTPStatus.BAD_REQUEST)\n        if HUE_API_STATE_XY in request_json:\n",
                        "filePath": "homeassistant/components/emulated_hue/hue_api.py",
                        "lineNumbers": [
                            416,
                            417,
                            418,
                            419,
                            420
                        ]
                    },
                    {
                        "additionalContext": "                )\n            except ValueError:\n                _LOGGER.error(\"Unable to parse data (2): %s\", request_json)\n                return self.json_message(\"Bad request\", HTTPStatus.BAD_REQUEST)\n\n",
                        "filePath": "homeassistant/components/emulated_hue/hue_api.py",
                        "lineNumbers": [
                            425,
                            426,
                            427,
                            428,
                            429
                        ]
                    },
                    {
                        "additionalContext": "    )\n\n    ssdp_socket.bind((\"\" if upnp_bind_multicast else host_ip_addr, BROADCAST_PORT))\n\n    loop = asyncio.get_event_loop()\n",
                        "filePath": "homeassistant/components/emulated_hue/upnp.py",
                        "lineNumbers": [
                            170,
                            171,
                            172,
                            173,
                            174
                        ]
                    },
                    {
                        "additionalContext": "\n        device_mac = format_mac(device_info.mac_address)\n        mac_address_matches = unique_id == device_mac\n        #\n        # Migrate config entry to new unique ID if the current\n",
                        "filePath": "homeassistant/components/esphome/manager.py",
                        "lineNumbers": [
                            435,
                            436,
                            437,
                            438,
                            439
                        ]
                    },
                    {
                        "additionalContext": "        sock.setblocking(False)\n\n        sock.bind((\"\", UDP_PORT))\n\n        await asyncio.get_running_loop().create_datagram_endpoint(\n",
                        "filePath": "homeassistant/components/esphome/voice_assistant.py",
                        "lineNumbers": [
                            366,
                            367,
                            368,
                            369,
                            370
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Set up EufyHome devices.\"\"\"\n\n    if CONF_USERNAME in config[DOMAIN] and CONF_PASSWORD in config[DOMAIN]:\n        data = lakeside.get_devices(\n            config[DOMAIN][CONF_USERNAME], config[DOMAIN][CONF_PASSWORD]\n",
                        "filePath": "homeassistant/components/eufy/__init__.py",
                        "lineNumbers": [
                            59,
                            60,
                            61,
                            62,
                            63
                        ]
                    },
                    {
                        "additionalContext": "        tokens = dict(app_storage or {})\n\n        if tokens.pop(CONF_USERNAME, None) != config[DOMAIN][CONF_USERNAME]:\n            # any tokens won't be valid, and store might be corrupt\n            await store.async_save({})\n",
                        "filePath": "homeassistant/components/evohome/__init__.py",
                        "lineNumbers": [
                            126,
                            127,
                            128,
                            129,
                            130
                        ]
                    },
                    {
                        "additionalContext": "            _LOGGER.debug(\"Status = %s\", status)\n        finally:\n            if access_token != self.client.access_token:\n                await self.save_auth_tokens()\n\n",
                        "filePath": "homeassistant/components/evohome/coordinator.py",
                        "lineNumbers": [
                            176,
                            177,
                            178,
                            179,
                            180
                        ]
                    },
                    {
                        "additionalContext": "        config_file = load_json_object(config_path)\n        if config_file != DEFAULT_CONFIG and all(\n            key in config_file for key in FITBIT_CONF_KEYS\n        ):\n            return config_file\n",
                        "filePath": "homeassistant/components/fitbit/sensor.py",
                        "lineNumbers": [
                            574,
                            575,
                            576,
                            577,
                            578
                        ]
                    },
                    {
                        "additionalContext": "        # Flick will send the same token, but expiry is relative - so grab it from the token\n        token_decoded = jwt.decode(\n            token[CONF_ID_TOKEN], options={\"verify_signature\": False}\n        )\n\n",
                        "filePath": "homeassistant/components/flick_electric/__init__.py",
                        "lineNumbers": [
                            89,
                            90,
                            91,
                            92,
                            93
                        ]
                    },
                    {
                        "additionalContext": "        # No token saved, generate one\n        if (\n            CONF_TOKEN_EXPIRY not in self._entry.data\n            or CONF_ACCESS_TOKEN not in self._entry.data\n        ):\n            await self._update_token()\n",
                        "filePath": "homeassistant/components/flick_electric/__init__.py",
                        "lineNumbers": [
                            62,
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "            new_unique_id = f\"{unique_id}{entity_unique_id.removeprefix(entry_id)}\"\n        elif (\n            \":\" in entity_mac\n            and entity_mac != unique_id\n            and mac_matches_by_one(entity_mac, unique_id)\n        ):\n",
                        "filePath": "homeassistant/components/flux_led/__init__.py",
                        "lineNumbers": [
                            129,
                            130,
                            131,
                            132,
                            133,
                            134
                        ]
                    },
                    {
                        "additionalContext": "                discovered_mac is not None\n                and (formatted_discovered_mac := dr.format_mac(discovered_mac))\n                and formatted_discovered_mac != mac\n                and mac_matches_by_one(discovered_mac, mac)\n            ):\n",
                        "filePath": "homeassistant/components/flux_led/config_flow.py",
                        "lineNumbers": [
                            167,
                            168,
                            169,
                            170,
                            171
                        ]
                    },
                    {
                        "additionalContext": "            mac: f\"{async_name_from_discovery(device)} ({device[ATTR_IPADDR]})\"\n            for mac, device in self._discovered_devices.items()\n            if mac not in current_unique_ids\n            and device[ATTR_IPADDR] not in current_hosts\n        }\n",
                        "filePath": "homeassistant/components/flux_led/config_flow.py",
                        "lineNumbers": [
                            265,
                            266,
                            267,
                            268,
                            269
                        ]
                    },
                    {
                        "additionalContext": "    if not entry.unique_id or (\n        allow_update_mac\n        and entry.unique_id != formatted_mac\n        and mac_matches_by_one(formatted_mac, entry.unique_id)\n    ):\n",
                        "filePath": "homeassistant/components/flux_led/discovery.py",
                        "lineNumbers": [
                            130,
                            131,
                            132,
                            133,
                            134
                        ]
                    },
                    {
                        "additionalContext": "        if self.push_secret != secret:\n            _LOGGER.error(\n                \"Received Foursquare push with invalid push secret: %s\", secret\n            )\n            return self.json_message(\"Incorrect secret\", HTTPStatus.BAD_REQUEST)\n",
                        "filePath": "homeassistant/components/foursquare/__init__.py",
                        "lineNumbers": [
                            101,
                            102,
                            103,
                            104,
                            105,
                            106,
                            107
                        ]
                    },
                    {
                        "additionalContext": "\n    for mac, device in router.devices.items():\n        if mac in tracked:\n            continue\n\n",
                        "filePath": "homeassistant/components/freebox/device_tracker.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "def _is_tracked(mac: str, current_devices: ValuesView) -> bool:\n    \"\"\"Check if device is already tracked.\"\"\"\n    return any(mac in tracked for tracked in current_devices)\n\n\n",
                        "filePath": "homeassistant/components/fritz/coordinator.py",
                        "lineNumbers": [
                            56,
                            57,
                            58,
                            59,
                            60
                        ]
                    },
                    {
                        "additionalContext": "        _LOGGER.debug(\"Client dev_info: %s\", dev_info)\n\n        if dev_mac in self._devices:\n            self._devices[dev_mac].update(dev_info, consider_home)\n            return False\n",
                        "filePath": "homeassistant/components/fritz/coordinator.py",
                        "lineNumbers": [
                            508,
                            509,
                            510,
                            511,
                            512
                        ]
                    },
                    {
                        "additionalContext": "                    type=interf[\"type\"],\n                )\n                if dr.format_mac(int_mac) == self.mac:\n                    self.mesh_role = MeshRoles(node[\"mesh_role\"])\n\n",
                        "filePath": "homeassistant/components/fritz/coordinator.py",
                        "lineNumbers": [
                            591,
                            592,
                            593,
                            594,
                            595
                        ]
                    },
                    {
                        "additionalContext": "                dev_mac = interf[\"mac_address\"]\n\n                if dev_mac not in hosts:\n                    continue\n\n",
                        "filePath": "homeassistant/components/fritz/coordinator.py",
                        "lineNumbers": [
                            602,
                            603,
                            604,
                            605,
                            606
                        ]
                    },
                    {
                        "additionalContext": "            device_reg, config_entry.entry_id\n        ):\n            if any(con in device.connections for con in orphan_connections):\n                _LOGGER.debug(\"Removing obsolete device entry %s\", device.name)\n                device_reg.async_update_device(\n",
                        "filePath": "homeassistant/components/fritz/coordinator.py",
                        "lineNumbers": [
                            671,
                            672,
                            673,
                            674,
                            675
                        ]
                    },
                    {
                        "additionalContext": "                entity.domain == DEVICE_TRACKER_DOMAIN\n                or \"_internet_access\" in entity.unique_id\n            ) and entry_mac not in device_hosts:\n                _LOGGER.info(\"Removing orphan entity entry %s\", entity.entity_id)\n                orphan_macs.add(entry_mac)\n",
                        "filePath": "homeassistant/components/fritz/coordinator.py",
                        "lineNumbers": [
                            661,
                            662,
                            663,
                            664,
                            665
                        ]
                    },
                    {
                        "additionalContext": "                encoding=\"utf8\"\n            ) as file:\n                tpl = jinja2.Template(file.read())\n\n            # Cache template if not running from repository\n",
                        "filePath": "homeassistant/components/frontend/__init__.py",
                        "lineNumbers": [
                            636,
                            637,
                            638,
                            639,
                            640
                        ]
                    },
                    {
                        "additionalContext": "\n        for entry in self._async_current_entries():\n            if entry.data[CONF_MAC] == mac:\n                self.hass.config_entries.async_update_entry(\n                    entry,\n",
                        "filePath": "homeassistant/components/fully_kiosk/config_flow.py",
                        "lineNumbers": [
                            118,
                            119,
                            120,
                            121,
                            122
                        ]
                    },
                    {
                        "additionalContext": "    authentication = device_info.get(CONF_AUTHENTICATION)\n    if username and password:\n        if authentication == HTTP_DIGEST_AUTHENTICATION:\n            return httpx.DigestAuth(username=username, password=password)\n        return httpx.BasicAuth(username=username, password=password)\n",
                        "filePath": "homeassistant/components/generic/camera.py",
                        "lineNumbers": [
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "    _LOGGER.debug(\n        \"latitude=%s, longitude=%s, url=%s, radius=%s\",\n        latitude,\n        longitude,\n        url,\n        radius_in_km,\n",
                        "filePath": "homeassistant/components/geo_rss_events/sensor.py",
                        "lineNumbers": [
                            79,
                            80,
                            81,
                            82,
                            83,
                            84
                        ]
                    },
                    {
                        "additionalContext": "    access = get_feature_access(hass, entry)\n    token_scopes = entry.data.get(\"token\", {}).get(\"scope\", [])\n    return access.scope in token_scopes\n\n\n",
                        "filePath": "homeassistant/components/google/__init__.py",
                        "lineNumbers": [
                            213,
                            214,
                            215,
                            216,
                            217
                        ]
                    },
                    {
                        "additionalContext": "            hassio_ip\n        ):\n            _LOGGER.error(\"Invalid auth request from %s\", request.remote)\n            raise HTTPUnauthorized\n\n",
                        "filePath": "homeassistant/components/hassio/auth.py",
                        "lineNumbers": [
                            48,
                            49,
                            50,
                            51,
                            52
                        ]
                    },
                    {
                        "additionalContext": "            pass\n        else:\n            _LOGGER.warning(\"Retrieve wrong unload for %s\", service)\n            return\n\n",
                        "filePath": "homeassistant/components/hassio/discovery.py",
                        "lineNumbers": [
                            127,
                            128,
                            129,
                            130,
                            131
                        ]
                    },
                    {
                        "additionalContext": "                \" mode: %s, arrival: %s, departure: %s\"\n            ),\n            origin,\n            destination,\n            route_mode,\n            TransportMode(self.config.travel_mode),\n            arrival,\n            departure,\n        )\n\n",
                        "filePath": "homeassistant/components/here_travel_time/coordinator.py",
                        "lineNumbers": [
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84,
                            85,
                            86,
                            87
                        ]
                    },
                    {
                        "additionalContext": "                \" departure: %s\"\n            ),\n            origin,\n            destination,\n            arrival,\n            departure,\n        )\n        try:\n",
                        "filePath": "homeassistant/components/here_travel_time/coordinator.py",
                        "lineNumbers": [
                            196,
                            197,
                            198,
                            199,
                            200,
                            201,
                            202,
                            203
                        ]
                    },
                    {
                        "additionalContext": "                cval\n                for ctype, cval in dev_reg_ent.connections\n                if ctype == dr.CONNECTION_NETWORK_MAC\n            ]\n            matching_instances = [\n",
                        "filePath": "homeassistant/components/homekit/__init__.py",
                        "lineNumbers": [
                            459,
                            460,
                            461,
                            462,
                            463
                        ]
                    },
                    {
                        "additionalContext": "                homekit\n                for homekit in _async_all_homekit_instances(hass)\n                if homekit.driver and dr.format_mac(homekit.driver.state.mac) in macs\n            ]\n            if not matching_instances:\n",
                        "filePath": "homeassistant/components/homekit/__init__.py",
                        "lineNumbers": [
                            464,
                            465,
                            466,
                            467,
                            468
                        ]
                    },
                    {
                        "additionalContext": "            or not secret\n            or not entry_data.pairing_qr_secret\n            or secret != entry_data.pairing_qr_secret\n        ):\n            raise Unauthorized\n",
                        "filePath": "homeassistant/components/homekit/__init__.py",
                        "lineNumbers": [
                            1185,
                            1186,
                            1187,
                            1188,
                            1189
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Check to see if a port is available.\"\"\"\n    try:\n        _get_test_socket().bind((\"\", port))\n    except OSError:\n        return False\n",
                        "filePath": "homeassistant/components/homekit/util.py",
                        "lineNumbers": [
                            565,
                            566,
                            567,
                            568,
                            569
                        ]
                    },
                    {
                        "additionalContext": "            continue\n        try:\n            test_socket.bind((\"\", port))\n        except OSError:\n            if port == MAX_PORT:\n",
                        "filePath": "homeassistant/components/homekit/util.py",
                        "lineNumbers": [
                            590,
                            591,
                            592,
                            593,
                            594
                        ]
                    },
                    {
                        "additionalContext": "\n        target_check = jwt.decode(\n            token, algorithms=[\"ES256\", \"HS256\"], options={\"verify_signature\": False}\n        )\n        if target_check.get(ATTR_TARGET) in self.registrations:\n",
                        "filePath": "homeassistant/components/html5/notify.py",
                        "lineNumbers": [
                            315,
                            316,
                            317,
                            318,
                            319
                        ]
                    },
                    {
                        "additionalContext": "            _LOGGER.error(\n                \"Could not read SSL certificate from %s: %s\",\n                self.ssl_certificate,\n                error,\n            )\n",
                        "filePath": "homeassistant/components/http/__init__.py",
                        "lineNumbers": [
                            512,
                            513,
                            514,
                            515,
                            516
                        ]
                    },
                    {
                        "additionalContext": "            _LOGGER.debug(\n                \"Authenticated %s for %s using %s\",\n                request.remote,\n                request.path,\n                auth_type,\n            )\n",
                        "filePath": "homeassistant/components/http/auth.py",
                        "lineNumbers": [
                            234,
                            235,
                            236,
                            237,
                            238,
                            239
                        ]
                    },
                    {
                        "additionalContext": "        elif (\n            request := current_request.get()\n        ) and KEY_HASS_REFRESH_TOKEN_ID in request:\n            refresh_token_id = request[KEY_HASS_REFRESH_TOKEN_ID]\n        else:\n",
                        "filePath": "homeassistant/components/http/auth.py",
                        "lineNumbers": [
                            62,
                            63,
                            64,
                            65,
                            66
                        ]
                    },
                    {
                        "additionalContext": "    notification_msg = f\"{base_msg} See the log for details.\"\n\n    _LOGGER.warning(log_msg)\n\n    # Circular import with websocket_api\n",
                        "filePath": "homeassistant/components/http/ban.py",
                        "lineNumbers": [
                            133,
                            134,
                            135,
                            136,
                            137
                        ]
                    },
                    {
                        "additionalContext": "        if len(forwarded_for_headers) > 1:\n            _LOGGER.error(\n                \"Too many headers for X-Forwarded-For: %s\", forwarded_for_headers\n            )\n            raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/forwarded.py",
                        "lineNumbers": [
                            115,
                            116,
                            117,
                            118,
                            119
                        ]
                    },
                    {
                        "additionalContext": "        except ValueError as err:\n            _LOGGER.error(\n                \"Invalid IP address in X-Forwarded-For: %s\", forwarded_for_headers[0]\n            )\n            raise HTTPBadRequest from err\n",
                        "filePath": "homeassistant/components/http/forwarded.py",
                        "lineNumbers": [
                            125,
                            126,
                            127,
                            128,
                            129
                        ]
                    },
                    {
                        "additionalContext": "            if len(forwarded_proto_headers) > 1:\n                _LOGGER.error(\n                    \"Too many headers for X-Forward-Proto: %s\", forwarded_proto_headers\n                )\n                raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/forwarded.py",
                        "lineNumbers": [
                            151,
                            152,
                            153,
                            154,
                            155
                        ]
                    },
                    {
                        "additionalContext": "                _LOGGER.error(\n                    \"Empty item received in X-Forward-Proto header: %s\",\n                    forwarded_proto_headers[0],\n                )\n                raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/forwarded.py",
                        "lineNumbers": [
                            164,
                            165,
                            166,
                            167,
                            168
                        ]
                    },
                    {
                        "additionalContext": "                    len(forwarded_for),\n                    len(forwarded_proto),\n                    forwarded_proto_headers[0],\n                )\n                raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/forwarded.py",
                        "lineNumbers": [
                            178,
                            179,
                            180,
                            181,
                            182
                        ]
                    },
                    {
                        "additionalContext": "            if len(forwarded_host_headers) > 1:\n                _LOGGER.error(\n                    \"Too many headers for X-Forwarded-Host: %s\", forwarded_host_headers\n                )\n                raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/forwarded.py",
                        "lineNumbers": [
                            195,
                            196,
                            197,
                            198,
                            199
                        ]
                    },
                    {
                        "additionalContext": "# fmt: off\nFILTERS: Final = re.compile(\n    r\"(?:\"\n\n    # Common exploits\n",
                        "filePath": "homeassistant/components/http/security_filter.py",
                        "lineNumbers": [
                            18,
                            19,
                            20,
                            21,
                            22
                        ]
                    },
                    {
                        "additionalContext": "                _LOGGER.warning(\n                    \"Filtered a request with an unsafe byte in path: %s\",\n                    request.raw_path,\n                )\n                raise HTTPBadRequest\n\n        if FILTERS.search(_recursive_unquote(path_with_query_string)):\n            # Check the full path with query string first, if its\n            # a hit, than check just the query string to give a more\n",
                        "filePath": "homeassistant/components/http/security_filter.py",
                        "lineNumbers": [
                            70,
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78
                        ]
                    },
                    {
                        "additionalContext": "                    _LOGGER.warning(\n                        \"Filtered a request with unsafe byte query string: %s\",\n                        request.raw_path,\n                    )\n                    raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/security_filter.py",
                        "lineNumbers": [
                            65,
                            66,
                            67,
                            68,
                            69
                        ]
                    },
                    {
                        "additionalContext": "                _LOGGER.warning(\n                    \"Filtered a request with a potential harmful query string: %s\",\n                    request.raw_path,\n                )\n                raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/security_filter.py",
                        "lineNumbers": [
                            81,
                            82,
                            83,
                            84,
                            85
                        ]
                    },
                    {
                        "additionalContext": "\n            _LOGGER.warning(\n                \"Filtered a potential harmful request to: %s\", request.raw_path\n            )\n            raise HTTPBadRequest\n",
                        "filePath": "homeassistant/components/http/security_filter.py",
                        "lineNumbers": [
                            86,
                            87,
                            88,
                            89,
                            90
                        ]
                    },
                    {
                        "additionalContext": "            if not track_wired_clients:\n                for host in hosts:\n                    if host.get(\"MacAddress\") == mac:\n                        skip = not _is_wireless(host)\n                        break\n",
                        "filePath": "homeassistant/components/huawei_lte/device_tracker.py",
                        "lineNumbers": [
                            81,
                            82,
                            83,
                            84,
                            85
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Create an entry for                     self.reauth_entry, data=data, reason=\"missing_amc_scope\"\n                )\n            if self.reauth_entry.unique_id != user_id:\n                return self.async_abort(reason=\"wrong_account\")\n            return self.async_update_reload_and_abort(self.reauth_entry, data=data)\n",
                        "filePath": "homeassistant/components/husqvarna_automower/config_flow.py",
                        "lineNumbers": [
                            32,
                            33,
                            34,
                            35,
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44
                        ]
                    },
                    {
                        "additionalContext": "async def async_setup_entry(hass: HomeAssistant, config_entry: ConfigEntry) -> bool:\n    \"\"\"Set up Hydrawise from a config entry.\"\"\"\n    if CONF_USERNAME not in config_entry.data or CONF_PASSWORD not in config_entry.data:\n        # The GraphQL API requires username and password to authenticate. If either is\n        # missing, reauth is required.\n",
                        "filePath": "homeassistant/components/hydrawise/__init__.py",
                        "lineNumbers": [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    },
                    {
                        "additionalContext": "        _LOGGER.error(\n            \"Received invalid data from IFTTT. Data needs to be formatted as JSON: %s\",\n            body,\n        )\n        return\n",
                        "filePath": "homeassistant/components/ifttt/__init__.py",
                        "lineNumbers": [
                            106,
                            107,
                            108,
                            109,
                            110
                        ]
                    },
                    {
                        "additionalContext": "    if not isinstance(data, dict):\n        _LOGGER.error(\n            \"Received invalid data from IFTTT. Data needs to be a dictionary: %s\", data\n        )\n        return\n",
                        "filePath": "homeassistant/components/ifttt/__init__.py",
                        "lineNumbers": [
                            112,
                            113,
                            114,
                            115,
                            116
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Ensure correct config fields are provided based on API version used.\"\"\"\n    if conf[CONF_API_VERSION] == API_VERSION_2:\n        if CONF_TOKEN not in conf:\n            raise vol.Invalid(\n                f\"{CONF_TOKEN} and {CONF_BUCKET} are required when\"\n",
                        "filePath": "homeassistant/components/influxdb/__init__.py",
                        "lineNumbers": [
                            135,
                            136,
                            137,
                            138,
                            139
                        ]
                    },
                    {
                        "additionalContext": "            )\n\n    elif CONF_TOKEN in conf:\n        raise vol.Invalid(\n            f\"{CONF_TOKEN} and {CONF_BUCKET} are only allowed when\"\n",
                        "filePath": "homeassistant/components/influxdb/__init__.py",
                        "lineNumbers": [
                            147,
                            148,
                            149,
                            150,
                            151
                        ]
                    },
                    {
                        "additionalContext": "        kwargs[CONF_USERNAME] = conf[CONF_USERNAME]\n\n    if CONF_PASSWORD in conf:\n        kwargs[CONF_PASSWORD] = conf[CONF_PASSWORD]\n\n",
                        "filePath": "homeassistant/components/influxdb/__init__.py",
                        "lineNumbers": [
                            415,
                            416,
                            417,
                            418,
                            419
                        ]
                    },
                    {
                        "additionalContext": "    _LOGGER.debug(\n        \"Initializing for coordinates %s, %s -> station %s (%d, %d)\",\n        latitude,\n        longitude,\n        location.station,\n        location.id_station,\n",
                        "filePath": "homeassistant/components/ipma/__init__.py",
                        "lineNumbers": [
                            42,
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "            if entity_entry.domain == Platform.DEVICE_TRACKER:\n                mac = entity_entry.unique_id.partition(\"_\")[0]\n                if mac not in keep_devices:\n                    _LOGGER.debug(\"Removing entity %s\", entity_entry.entity_id)\n\n",
                        "filePath": "homeassistant/components/keenetic_ndms2/__init__.py",
                        "lineNumbers": [
                            82,
                            83,
                            84,
                            85,
                            86
                        ]
                    },
                    {
                        "additionalContext": "        if entity_entry.domain == DEVICE_TRACKER_DOMAIN:\n            mac = entity_entry.unique_id.partition(\"_\")[0]\n            if mac not in tracked:\n                tracked.add(mac)\n                restored.append(\n",
                        "filePath": "homeassistant/components/keenetic_ndms2/device_tracker.py",
                        "lineNumbers": [
                            50,
                            51,
                            52,
                            53,
                            54
                        ]
                    },
                    {
                        "additionalContext": "    new_tracked: list[KeeneticTracker] = []\n    for mac, device in router.last_devices.items():\n        if mac not in tracked:\n            tracked.add(mac)\n            new_tracked.append(KeeneticTracker(device, router))\n",
                        "filePath": "homeassistant/components/keenetic_ndms2/device_tracker.py",
                        "lineNumbers": [
                            75,
                            76,
                            77,
                            78,
                            79
                        ]
                    },
                    {
                        "additionalContext": "    mode = get_ip_mode(host)\n    mac = await hass.async_add_executor_job(partial(get_mac_address, **{mode: host}))\n    if mac is None or mac == \"00:00:00:00:00:00\":\n        raise PlatformNotReady(\"Cannot get the ip address of kef speaker.\")\n\n",
                        "filePath": "homeassistant/components/kef/media_player.py",
                        "lineNumbers": [
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "            v2_data[CONF_HOST] = entry.data[CONF_HOST]\n\n        if CONF_MAC in entry.data:\n            v2_data[CONF_MAC] = entry.data[CONF_MAC]\n\n",
                        "filePath": "homeassistant/components/lamarzocco/__init__.py",
                        "lineNumbers": [
                            170,
                            171,
                            172,
                            173,
                            174
                        ]
                    },
                    {
                        "additionalContext": "        mac = format_mac(discovery_info.macaddress)\n        for entry in self._async_current_entries():\n            if format_mac(entry.data[CONF_MAC]) == mac:\n                self.hass.config_entries.async_update_entry(\n                    entry,\n",
                        "filePath": "homeassistant/components/lametric/config_flow.py",
                        "lineNumbers": [
                            303,
                            304,
                            305,
                            306,
                            307
                        ]
                    },
                    {
                        "additionalContext": "    formatted_mac = dr.format_mac(mac_addr)\n    return bool(\n        formatted_serial(serial_number) == formatted_mac\n        or _get_mac_offset(serial_number, 1) == formatted_mac\n    )\n\n",
                        "filePath": "homeassistant/components/lifx/util.py",
                        "lineNumbers": [
                            178,
                            179,
                            180,
                            181,
                            182,
                            183
                        ]
                    },
                    {
                        "additionalContext": "    ) -> None:\n        \"\"\"Handle incoming Loqed messages.\"\"\"\n        _LOGGER.debug(\"Callback received: %s\", request.headers)\n        received_ts = request.headers[\"TIMESTAMP\"]\n        received_hash = request.headers[\"HASH\"]\n",
                        "filePath": "homeassistant/components/loqed/coordinator.py",
                        "lineNumbers": [
                            95,
                            96,
                            97,
                            98,
                            99
                        ]
                    },
                    {
                        "additionalContext": "        body = await request.text()\n\n        _LOGGER.debug(\"Callback body: %s\", body)\n\n        event_data = await self.lock.receiveWebhook(body, received_hash, received_ts)\n",
                        "filePath": "homeassistant/components/loqed/coordinator.py",
                        "lineNumbers": [
                            100,
                            101,
                            102,
                            103,
                            104
                        ]
                    },
                    {
                        "additionalContext": "\n        for mac, params in device_list.items():\n            if mac not in self.devices:\n                self.devices[mac] = Device(mac, self.all_devices.get(mac, {}))\n            else:\n",
                        "filePath": "homeassistant/components/mikrotik/coordinator.py",
                        "lineNumbers": [
                            165,
                            166,
                            167,
                            168,
                            169
                        ]
                    },
                    {
                        "additionalContext": "                self.devices[mac].update(params=self.all_devices.get(mac, {}))\n\n            if mac in wireless_devices:\n                # if wireless is supported then wireless_params are params\n                self.devices[mac].update(\n",
                        "filePath": "homeassistant/components/mikrotik/coordinator.py",
                        "lineNumbers": [
                            170,
                            171,
                            172,
                            173,
                            174
                        ]
                    },
                    {
                        "additionalContext": "            # ping check the rest of active devices if arp ping is enabled\n            active = True\n            if self.arp_enabled and mac in arp_devices:\n                active = self.do_arp_ping(\n                    str(params.get(\"active-address\")),\n",
                        "filePath": "homeassistant/components/mikrotik/coordinator.py",
                        "lineNumbers": [
                            182,
                            183,
                            184,
                            185,
                            186
                        ]
                    },
                    {
                        "additionalContext": "    new_tracked: list[MikrotikDataUpdateCoordinatorTracker] = []\n    for mac, device in coordinator.api.devices.items():\n        if mac not in tracked:\n            tracked[mac] = MikrotikDataUpdateCoordinatorTracker(device, coordinator)\n            new_tracked.append(tracked[mac])\n",
                        "filePath": "homeassistant/components/mikrotik/device_tracker.py",
                        "lineNumbers": [
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "            self._username\n            and self._password\n            and self._authentication == HTTP_BASIC_AUTHENTICATION\n        ):\n            self._auth = aiohttp.BasicAuth(self._username, password=self._password)\n",
                        "filePath": "homeassistant/components/mjpeg/camera.py",
                        "lineNumbers": [
                            113,
                            114,
                            115,
                            116,
                            117
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Return a still image response from the camera.\"\"\"\n        if (\n            self._authentication == HTTP_DIGEST_AUTHENTICATION\n            or self._still_image_url is None\n        ):\n",
                        "filePath": "homeassistant/components/mjpeg/camera.py",
                        "lineNumbers": [
                            137,
                            138,
                            139,
                            140,
                            141
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Return a httpx auth object.\"\"\"\n        username = \"\" if self._username is None else self._username\n        digest_auth = self._authentication == HTTP_DIGEST_AUTHENTICATION\n        cls = httpx.DigestAuth if digest_auth else httpx.BasicAuth\n        return cls(username, self._password)\n",
                        "filePath": "homeassistant/components/mjpeg/camera.py",
                        "lineNumbers": [
                            160,
                            161,
                            162,
                            163,
                            164
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Generate an HTTP MJPEG stream from the camera.\"\"\"\n        # aiohttp don't support DigestAuth so we use httpx\n        if self._authentication == HTTP_DIGEST_AUTHENTICATION:\n            return await self._handle_async_mjpeg_digest_stream(request)\n\n",
                        "filePath": "homeassistant/components/mjpeg/camera.py",
                        "lineNumbers": [
                            216,
                            217,
                            218,
                            219,
                            220
                        ]
                    },
                    {
                        "additionalContext": "    auth: HTTPDigestAuth | HTTPBasicAuth | None = None\n    if username and password:\n        if authentication == HTTP_DIGEST_AUTHENTICATION:\n            auth = HTTPDigestAuth(username, password)\n        else:\n",
                        "filePath": "homeassistant/components/mjpeg/config_flow.py",
                        "lineNumbers": [
                            77,
                            78,
                            79,
                            80,
                            81
                        ]
                    },
                    {
                        "additionalContext": "    if response.status_code == HTTPStatus.UNAUTHORIZED:\n        # If unauthorized, try again using digest auth\n        if authentication == HTTP_BASIC_AUTHENTICATION:\n            return validate_url(\n                url, username, password, verify_ssl, HTTP_DIGEST_AUTHENTICATION\n",
                        "filePath": "homeassistant/components/mjpeg/config_flow.py",
                        "lineNumbers": [
                            92,
                            93,
                            94,
                            95,
                            96
                        ]
                    },
                    {
                        "additionalContext": "    app_data = config_entry.data[ATTR_APP_DATA]\n    return (\n        ATTR_PUSH_TOKEN in app_data and ATTR_PUSH_URL in app_data\n    ) or ATTR_PUSH_WEBSOCKET_CHANNEL in app_data\n\n",
                        "filePath": "homeassistant/components/mobile_app/util.py",
                        "lineNumbers": [
                            45,
                            46,
                            47,
                            48,
                            49
                        ]
                    },
                    {
                        "additionalContext": "            await self.async_set_unique_id(user_id)\n            self._abort_if_unique_id_configured()\n        elif self.reauth_entry.unique_id != user_id:\n            return self.async_abort(reason=\"wrong_account\")\n\n",
                        "filePath": "homeassistant/components/monzo/config_flow.py",
                        "lineNumbers": [
                            55,
                            56,
                            57,
                            58,
                            59
                        ]
                    },
                    {
                        "additionalContext": "                if device\n                and device.name\n                and f\"MOTION_{mac_code.upper()}\" in device.name\n            ),\n            None,\n",
                        "filePath": "homeassistant/components/motionblinds_ble/config_flow.py",
                        "lineNumbers": [
                            159,
                            160,
                            161,
                            162,
                            163
                        ]
                    },
                    {
                        "additionalContext": "            # Note: Can't use homeassistant.helpers.template as it requires hass\n            # which is not available during entity construction.\n            streaming_url = Template(streaming_template).render(**camera)\n        else:\n            with suppress(MotionEyeClientURLParseError):\n",
                        "filePath": "homeassistant/components/motioneye/camera.py",
                        "lineNumbers": [
                            197,
                            198,
                            199,
                            200,
                            201
                        ]
                    },
                    {
                        "additionalContext": "        auth = None\n        if camera.get(KEY_STREAMING_AUTH_MODE) in (\n            HTTP_BASIC_AUTHENTICATION,\n            HTTP_DIGEST_AUTHENTICATION,\n        ):\n            auth = camera[KEY_STREAMING_AUTH_MODE]\n",
                        "filePath": "homeassistant/components/motioneye/camera.py",
                        "lineNumbers": [
                            186,
                            187,
                            188,
                            189,
                            190,
                            191
                        ]
                    },
                    {
                        "additionalContext": "\n        # If the device mac is valid we use it, otherwise we use the default id\n        if info.get(CONF_UUID, EMPTY_MAC) != EMPTY_MAC:\n            unique_id = info[CONF_UUID]\n        else:\n",
                        "filePath": "homeassistant/components/motionmount/config_flow.py",
                        "lineNumbers": [
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "\n        # If the device supplied as with a valid MAC we use that\n        if info.get(CONF_UUID, EMPTY_MAC) != EMPTY_MAC:\n            unique_id = info[CONF_UUID]\n\n",
                        "filePath": "homeassistant/components/motionmount/config_flow.py",
                        "lineNumbers": [
                            127,
                            128,
                            129,
                            130,
                            131
                        ]
                    },
                    {
                        "additionalContext": "\n        # Create a base unique id\n        if mac == EMPTY_MAC:\n            self._base_unique_id = config_entry.entry_id\n        else:\n",
                        "filePath": "homeassistant/components/motionmount/entity.py",
                        "lineNumbers": [
                            26,
                            27,
                            28,
                            29,
                            30
                        ]
                    },
                    {
                        "additionalContext": "        )\n\n        if mac == EMPTY_MAC:\n            self._attr_device_info[ATTR_IDENTIFIERS] = {(DOMAIN, config_entry.entry_id)}\n        else:\n",
                        "filePath": "homeassistant/components/motionmount/entity.py",
                        "lineNumbers": [
                            38,
                            39,
                            40,
                            41,
                            42
                        ]
                    },
                    {
                        "additionalContext": "                async with timeout(35):\n                    await client.connect(user_input[CONF_HOST], user_input[CONF_PORT])\n                    if CONF_PASSWORD in user_input:\n                        await client.password(user_input[CONF_PASSWORD])\n                    with suppress(mpd.ConnectionError):\n",
                        "filePath": "homeassistant/components/mpd/config_flow.py",
                        "lineNumbers": [
                            40,
                            41,
                            42,
                            43,
                            44
                        ]
                    },
                    {
                        "additionalContext": "            async with timeout(35):\n                await client.connect(import_config[CONF_HOST], import_config[CONF_PORT])\n                if CONF_PASSWORD in import_config:\n                    await client.password(import_config[CONF_PASSWORD])\n                with suppress(mpd.ConnectionError):\n",
                        "filePath": "homeassistant/components/mpd/config_flow.py",
                        "lineNumbers": [
                            77,
                            78,
                            79,
                            80,
                            81
                        ]
                    },
                    {
                        "additionalContext": "    # If the sentinel password is submitted, we replace that with our current\n    # password from the config entry data.\n    password_changed = user_password is not None and user_password != PWD_NOT_CHANGED\n    password = user_password if password_changed else entry_password\n    if password is not None:\n",
                        "filePath": "homeassistant/components/mqtt/config_flow.py",
                        "lineNumbers": [
                            184,
                            185,
                            186,
                            187,
                            188
                        ]
                    },
                    {
                        "additionalContext": "                errors[\"base\"] = \"cannot_connect\"\n            else:\n                if format_mac(config.mac_address) != self.entry.unique_id:\n                    return self.async_abort(reason=\"another_device\")\n\n",
                        "filePath": "homeassistant/components/nam/config_flow.py",
                        "lineNumbers": [
                            252,
                            253,
                            254,
                            255,
                            256
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Set up config entry.\"\"\"\n    hass.data.setdefault(NEATO_DOMAIN, {})\n    if CONF_TOKEN not in entry.data:\n        raise ConfigEntryAuthFailed\n\n",
                        "filePath": "homeassistant/components/neato/__init__.py",
                        "lineNumbers": [
                            31,
                            32,
                            33,
                            34,
                            35
                        ]
                    },
                    {
                        "additionalContext": "        return None\n\n    _LOGGER.debug(\"Got webhook data: %s\", data)\n\n    event_type = data.get(ATTR_EVENT_TYPE)\n",
                        "filePath": "homeassistant/components/netatmo/webhook.py",
                        "lineNumbers": [
                            41,
                            42,
                            43,
                            44,
                            45
                        ]
                    },
                    {
                        "additionalContext": "def async_send_event(hass: HomeAssistant, event_type: str, data: dict) -> None:\n    \"\"\"Send events.\"\"\"\n    _LOGGER.debug(\"%s: %s\", event_type, data)\n    async_dispatcher_send(\n        hass,\n",
                        "filePath": "homeassistant/components/netatmo/webhook.py",
                        "lineNumbers": [
                            77,
                            78,
                            79,
                            80,
                            81
                        ]
                    },
                    {
                        "additionalContext": "    device_mac = None\n    for connection in device_entry.connections:\n        if connection[0] == dr.CONNECTION_NETWORK_MAC:\n            device_mac = connection[1]\n            break\n",
                        "filePath": "homeassistant/components/netgear/__init__.py",
                        "lineNumbers": [
                            202,
                            203,
                            204,
                            205,
                            206
                        ]
                    },
                    {
                        "additionalContext": "        return False\n\n    if device_mac not in router.devices:\n        return True\n\n",
                        "filePath": "homeassistant/components/netgear/__init__.py",
                        "lineNumbers": [
                            209,
                            210,
                            211,
                            212,
                            213
                        ]
                    },
                    {
                        "additionalContext": "\n        for mac, device in router.devices.items():\n            if mac in tracked:\n                continue\n\n",
                        "filePath": "homeassistant/components/netgear/device_tracker.py",
                        "lineNumbers": [
                            35,
                            36,
                            37,
                            38,
                            39
                        ]
                    },
                    {
                        "additionalContext": "\n        for mac, device in router.devices.items():\n            if mac in tracked:\n                continue\n\n",
                        "filePath": "homeassistant/components/netgear/sensor.py",
                        "lineNumbers": [
                            307,
                            308,
                            309,
                            310,
                            311
                        ]
                    },
                    {
                        "additionalContext": "\n        for mac, device in router.devices.items():\n            if mac in tracked:\n                continue\n\n",
                        "filePath": "homeassistant/components/netgear/switch.py",
                        "lineNumbers": [
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "                    # Use digest or basic authentication\n                    auth_: HTTPDigestAuth | HTTPBasicAuth\n                    if auth in (ATTR_IMAGE_AUTH_DIGEST, ATTR_ICON_AUTH_DIGEST):\n                        auth_ = HTTPDigestAuth(username, password)\n                    else:\n",
                        "filePath": "homeassistant/components/nfandroidtv/notify.py",
                        "lineNumbers": [
                            207,
                            208,
                            209,
                            210,
                            211
                        ]
                    },
                    {
                        "additionalContext": "        now = dt_util.now()\n        for mac_address, original_name in self._known_mac_addresses.items():\n            if mac_address in self.devices.tracked:\n                continue\n            self.devices.config_entry_owner[mac_address] = self._entry_id\n",
                        "filePath": "homeassistant/components/nmap_tracker/__init__.py",
                        "lineNumbers": [
                            275,
                            276,
                            277,
                            278,
                            279
                        ]
                    },
                    {
                        "additionalContext": "            )\n\n            new = formatted_mac not in devices.tracked\n            devices.tracked[formatted_mac] = device\n            devices.ipv4_last_mac[ipv4] = formatted_mac\n",
                        "filePath": "homeassistant/components/nmap_tracker/__init__.py",
                        "lineNumbers": [
                            398,
                            399,
                            400,
                            401,
                            402
                        ]
                    },
                    {
                        "additionalContext": "        (CONF_USER_UUID, client.user_uuid),\n    ):\n        if entry.data.get(key) == value:\n            continue\n        entry_updates[\"data\"][key] = value\n",
                        "filePath": "homeassistant/components/notion/__init__.py",
                        "lineNumbers": [
                            109,
                            110,
                            111,
                            112,
                            113
                        ]
                    },
                    {
                        "additionalContext": "\n    client = OpenSky(session=async_get_clientsession(hass))\n    if CONF_USERNAME in entry.options and CONF_PASSWORD in entry.options:\n        try:\n            await client.authenticate(\n",
                        "filePath": "homeassistant/components/opensky/__init__.py",
                        "lineNumbers": [
                            21,
                            22,
                            23,
                            24,
                            25
                        ]
                    },
                    {
                        "additionalContext": "        errors: dict[str, str] = {}\n        if user_input is not None:\n            authentication = CONF_USERNAME in user_input or            if authentication and CONF_USERNAME not in user_input:\n                errors[\"base\"] = \"username_missing\"\n            if authentication and CONF_PASSWORD not in user_input:\n                errors[\"base\"] = \"password_missing\"\n            if user_input[CONF_CONTRIBUTING_USER] and not authentication:\n",
                        "filePath": "homeassistant/components/opensky/config_flow.py",
                        "lineNumbers": [
                            93,
                            94,
                            95,
                            96,
                            97,
                            98,
                            99,
                            100
                        ]
                    },
                    {
                        "additionalContext": "        message = message.encode(\"utf-8\")\n        payload = SecretBox(key).encrypt(message, encoder=Base64Encoder)\n        _LOGGER.debug(\"Encrypted message: %s to %s\", message, payload)\n        return payload.decode(\"utf-8\")\n    except ValueError:\n",
                        "filePath": "homeassistant/components/owntracks/messages.py",
                        "lineNumbers": [
                            173,
                            174,
                            175,
                            176,
                            177
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Set the updated authentication token.\"\"\"\n        updated_token = self.picnic_api_client.session.auth_token\n        if self.config_entry.data.get(CONF_ACCESS_TOKEN) != updated_token:\n            # Create an updated data dict\n            data = {**self.config_entry.data, CONF_ACCESS_TOKEN: updated_token}\n",
                        "filePath": "homeassistant/components/picnic/coordinator.py",
                        "lineNumbers": [
                            152,
                            153,
                            154,
                            155,
                            156
                        ]
                    },
                    {
                        "additionalContext": "        plexapi.exceptions.NotFound,\n    ) as error:\n        if INVALID_TOKEN_MESSAGE in str(error):\n            raise ConfigEntryAuthFailed(\n                \"Token not accepted, please reauthenticate Plex server\"\n",
                        "filePath": "homeassistant/components/plex/__init__.py",
                        "lineNumbers": [
                            156,
                            157,
                            158,
                            159,
                            160
                        ]
                    },
                    {
                        "additionalContext": "                prefix = \"https\" if user_input.get(CONF_SSL) else \"http\"\n                user_input[CONF_URL] = f\"{prefix}://{host}:{port}\"\n            elif CONF_TOKEN not in user_input:\n                return await self.async_step_manual_setup(\n                    user_input=user_input, errors={\"base\": \"host_or_token\"}\n",
                        "filePath": "homeassistant/components/plex/config_flow.py",
                        "lineNumbers": [
                            151,
                            152,
                            153,
                            154,
                            155
                        ]
                    },
                    {
                        "additionalContext": "            for gdm_entry in get_plex_data(self.hass)[                    if client is not None:\n                        process_device(\"GDM\", client)\n                elif machine_identifier not in available_clients:\n                    baseurl = (\n                        f\"http://{gdm_entry['from'][0]}:{gdm_entry['data']['Port']}\"\n",
                        "filePath": "homeassistant/components/plex/server.py",
                        "lineNumbers": [
                            437,
                            438,
                            439,
                            440,
                            441,
                            442,
                            443,
                            444,
                            445
                        ]
                    },
                    {
                        "additionalContext": "        )\n        if errors:\n            if CONF_PASSWORD in errors:\n                # The default password is the gateway din last 5\n                # if it does not work, we have to ask\n",
                        "filePath": "homeassistant/components/powerwall/config_flow.py",
                        "lineNumbers": [
                            150,
                            151,
                            152,
                            153,
                            154
                        ]
                    },
                    {
                        "additionalContext": "        mac = service_info.address\n\n        if mac in self._ignored:\n            return\n\n",
                        "filePath": "homeassistant/components/private_ble_device/coordinator.py",
                        "lineNumbers": [
                            138,
                            139,
                            140,
                            141,
                            142
                        ]
                    },
                    {
                        "additionalContext": "\n    try:\n        if machine_type == TYPE_VM:\n            status = proxmox.nodes(node_name).qemu(vm_id).status.current.get()\n        elif machine_type == TYPE_CONTAINER:\n            status = proxmox.nodes(node_name).lxc(vm_id).status.current.get()\n    except (ResourceException, requests.exceptions.ConnectionError):\n",
                        "filePath": "homeassistant/components/proxmoxve/__init__.py",
                        "lineNumbers": [
                            242,
                            243,
                            244,
                            245,
                            246,
                            247,
                            248
                        ]
                    },
                    {
                        "additionalContext": "            and name not in ALLOWED_EVENTBUS\n            or obj is hass.states\n            and name not in ALLOWED_STATEMACHINE\n            or obj is hass.services\n            and name not in ALLOWED_SERVICEREGISTRY\n",
                        "filePath": "homeassistant/components/python_script/__init__.py",
                        "lineNumbers": [
                            218,
                            219,
                            220,
                            221,
                            222
                        ]
                    },
                    {
                        "additionalContext": "                    qsw_type in data\n                    and self.type_id in data[qsw_type]\n                    and subkey in data[qsw_type][self.type_id]\n                ):\n                    value = data[qsw_type][self.type_id][subkey]\n            elif subkey in data:\n                value = data[subkey]\n        return value\n",
                        "filePath": "homeassistant/components/qnap_qsw/entity.py",
                        "lineNumbers": [
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84
                        ]
                    },
                    {
                        "additionalContext": "        if self.coordinator.data is not None and key in self.coordinator.data:\n            data = self.coordinator.data[key]\n            if subkey in data:\n                value = data[subkey]\n        return value\n",
                        "filePath": "homeassistant/components/qnap_qsw/entity.py",
                        "lineNumbers": [
                            152,
                            153,
                            154,
                            155,
                            156
                        ]
                    },
                    {
                        "additionalContext": "\n    new_unique_id = format_mac(mac_address)\n    if entry.unique_id == new_unique_id and CONF_MAC in entry.data:\n        _LOGGER.debug(\"Config entry already in correct state\")\n        return True\n",
                        "filePath": "homeassistant/components/rainbird/__init__.py",
                        "lineNumbers": [
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "    entries = hass.config_entries.async_entries(DOMAIN)\n    for existing_entry in entries:\n        if existing_entry.unique_id == new_unique_id:\n            _LOGGER.warning(\n                \"Unable to fix missing unique id (already exists); Removing duplicate entry\"\n",
                        "filePath": "homeassistant/components/rainbird/__init__.py",
                        "lineNumbers": [
                            128,
                            129,
                            130,
                            131,
                            132
                        ]
                    },
                    {
                        "additionalContext": "            for raw_mac in user_input.get(CONF_MAC, ()):\n                mac = bytes.fromhex(raw_mac).hex()\n                if mac not in meter_macs:\n                    meter_macs.append(mac)\n            if meter_macs and not errors:\n",
                        "filePath": "homeassistant/components/rainforest_raven/config_flow.py",
                        "lineNumbers": [
                            74,
                            75,
                            76,
                            77,
                            78
                        ]
                    },
                    {
                        "additionalContext": "            if api_category == DATA_API_VERSIONS:\n                data = await controller.api.versions()\n            elif api_category == DATA_MACHINE_FIRMWARE_UPDATE_STATUS:\n                data = await controller.machine.get_firmware_update_status()\n            elif api_category == DATA_PROGRAMS:\n",
                        "filePath": "homeassistant/components/rainmachine/__init__.py",
                        "lineNumbers": [
                            277,
                            278,
                            279,
                            280,
                            281
                        ]
                    },
                    {
                        "additionalContext": "        if (\n            existing_entry\n            and CONF_PASSWORD in existing_entry.data\n            and existing_entry.data[CONF_HOST] != discovery_info.ip\n        ):\n",
                        "filePath": "homeassistant/components/reolink/config_flow.py",
                        "lineNumbers": [
                            134,
                            135,
                            136,
                            137,
                            138
                        ]
                    },
                    {
                        "additionalContext": "            if not data:\n                _LOGGER.debug(\n                    \"Webhook '%s' triggered with unknown payload: %s\", webhook_id, data\n                )\n        except ConnectionResetError:\n",
                        "filePath": "homeassistant/components/reolink/host.py",
                        "lineNumbers": [
                            631,
                            632,
                            633,
                            634,
                            635
                        ]
                    },
                    {
                        "additionalContext": "    auth: httpx.DigestAuth | tuple[str, str] | None = None\n    if username and password:\n        if config.get(CONF_AUTHENTICATION) == HTTP_DIGEST_AUTHENTICATION:\n            auth = httpx.DigestAuth(username, password)\n        else:\n",
                        "filePath": "homeassistant/components/rest/__init__.py",
                        "lineNumbers": [
                            218,
                            219,
                            220,
                            221,
                            222
                        ]
                    },
                    {
                        "additionalContext": "    auth: httpx.Auth | None = None\n    if username and password:\n        if config.get(CONF_AUTHENTICATION) == HTTP_DIGEST_AUTHENTICATION:\n            auth = httpx.DigestAuth(username, password)\n        else:\n",
                        "filePath": "homeassistant/components/rest/notify.py",
                        "lineNumbers": [
                            95,
                            96,
                            97,
                            98,
                            99
                        ]
                    },
                    {
                        "additionalContext": "\n    for mac in coordinator.data[KEY_SYS_CLIENTS]:\n        if mac in tracked:\n            continue\n\n",
                        "filePath": "homeassistant/components/ruckus_unleashed/device_tracker.py",
                        "lineNumbers": [
                            54,
                            55,
                            56,
                            57,
                            58
                        ]
                    },
                    {
                        "additionalContext": "    mac: str | None = entry.data.get(CONF_MAC)\n    model: str | None = entry.data.get(CONF_MODEL)\n    mac_is_incorrectly_formatted = mac and dr.format_mac(mac) != mac\n    if (\n        not mac or not model or mac_is_incorrectly_formatted\n",
                        "filePath": "homeassistant/components/samsungtv/__init__.py",
                        "lineNumbers": [
                            222,
                            223,
                            224,
                            225,
                            226
                        ]
                    },
                    {
                        "additionalContext": "            )\n\n        if mac and mac != \"none\":\n            # Samsung sometimes returns a value of \"none\" for the mac address\n            # this should be ignored\n",
                        "filePath": "homeassistant/components/samsungtv/__init__.py",
                        "lineNumbers": [
                            238,
                            239,
                            240,
                            241,
                            242
                        ]
                    },
                    {
                        "additionalContext": "    current_formatted_mac = format_mac(current_unformatted_mac)\n    return (\n        current_formatted_mac == formatted_mac\n        and current_unformatted_mac != current_formatted_mac\n    )\n\n",
                        "filePath": "homeassistant/components/samsungtv/config_flow.py",
                        "lineNumbers": [
                            93,
                            94,
                            95,
                            96,
                            97,
                            98
                        ]
                    },
                    {
                        "additionalContext": "            # Samsung sometimes returns a value of \"none\" for the mac address\n            # this should be ignored - but also shouldn't trigger getmac\n            if mac != \"none\":\n                self._mac = mac\n        elif mac := await self.hass.async_add_executor_job(\n",
                        "filePath": "homeassistant/components/samsungtv/config_flow.py",
                        "lineNumbers": [
                            240,
                            241,
                            242,
                            243,
                            244
                        ]
                    },
                    {
                        "additionalContext": "        matching_host_entry: ConfigEntry | None = None\n        for entry in self._async_current_entries(include_ignore=False):\n            if (self._mac and self._mac == entry.data.get(CONF_MAC)) or (\n                self._upnp_udn and self._upnp_udn == entry.unique_id\n            ):\n",
                        "filePath": "homeassistant/components/samsungtv/config_flow.py",
                        "lineNumbers": [
                            338,
                            339,
                            340,
                            341,
                            342
                        ]
                    },
                    {
                        "additionalContext": "            new_unique_id = entry.unique_id.replace(source_key, new_key)\n\n        if new_unique_id and new_unique_id != entry.unique_id:\n            if existing_entity_id := entity_registry.async_get_entity_id(\n                entry.domain, entry.platform, new_unique_id\n",
                        "filePath": "homeassistant/components/screenlogic/__init__.py",
                        "lineNumbers": [
                            150,
                            151,
                            152,
                            153,
                            154
                        ]
                    },
                    {
                        "additionalContext": "            mac: gateway[SL_GATEWAY_NAME]\n            for mac, gateway in self.discovered_gateways.items()\n            if mac not in existing\n        }\n\n",
                        "filePath": "homeassistant/components/screenlogic/config_flow.py",
                        "lineNumbers": [
                            108,
                            109,
                            110,
                            111,
                            112
                        ]
                    },
                    {
                        "additionalContext": "    # Attempt to rediscover gateway to follow IP changes\n    discovered_gateways = await async_discover_gateways_by_unique_id(hass)\n    if mac in discovered_gateways:\n        return discovered_gateways[mac]\n\n",
                        "filePath": "homeassistant/components/screenlogic/coordinator.py",
                        "lineNumbers": [
                            35,
                            36,
                            37,
                            38,
                            39
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Validate user input.\"\"\"\n    try:\n        if CONF_PASSWORD in entry:\n            send(\n                key=entry[CONF_DEVICE_KEY],\n",
                        "filePath": "homeassistant/components/simplepush/config_flow.py",
                        "lineNumbers": [
                            17,
                            18,
                            19,
                            20,
                            21
                        ]
                    },
                    {
                        "additionalContext": "def _async_standardize_config_entry(hass: HomeAssistant, entry: ConfigEntry) -> None:\n    \"\"\"Bring a config entry up to current standards.\"\"\"\n    if CONF_TOKEN not in entry.data:\n        raise ConfigEntryAuthFailed(\n            \"SimpliSafe OAuth standard requires re-authentication\"\n",
                        "filePath": "homeassistant/components/simplisafe/__init__.py",
                        "lineNumbers": [
                            286,
                            287,
                            288,
                            289,
                            290
                        ]
                    },
                    {
                        "additionalContext": "        )\n\n        if event.event_type not in WEBSOCKET_EVENTS_TO_FIRE_HASS_EVENT:\n            return\n\n",
                        "filePath": "homeassistant/components/simplisafe/__init__.py",
                        "lineNumbers": [
                            535,
                            536,
                            537,
                            538,
                            539
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"Get the Personal Access Token and validate it.\"\"\"\n        errors = {}\n        if user_input is None or CONF_ACCESS_TOKEN not in user_input:\n            return self._show_step_pat(errors)\n\n",
                        "filePath": "homeassistant/components/smartthings/config_flow.py",
                        "lineNumbers": [
                            92,
                            93,
                            94,
                            95,
                            96
                        ]
                    },
                    {
                        "additionalContext": "        await self.async_set_unique_id(mac)\n        for entry in self._async_current_entries(include_ignore=False):\n            if entry.unique_id == mac or entry.data[CONF_HOST] == host:\n                if (\n                    async_update_entry_from_discovery(self.hass, entry, device)\n",
                        "filePath": "homeassistant/components/steamist/config_flow.py",
                        "lineNumbers": [
                            72,
                            73,
                            74,
                            75,
                            76
                        ]
                    },
                    {
                        "additionalContext": "            mac: f\"{device.name} ({device.ipaddress})\"\n            for mac, device in self._discovered_devices.items()\n            if mac not in current_unique_ids and device.ipaddress not in current_hosts\n        }\n        # Check if there is at least one device\n",
                        "filePath": "homeassistant/components/steamist/config_flow.py",
                        "lineNumbers": [
                            145,
                            146,
                            147,
                            148,
                            149
                        ]
                    },
                    {
                        "additionalContext": "\n        stream = next(\n            (s for s in hass.data[DOMAIN][ATTR_STREAMS] if s.access_token == token),\n            None,\n        )\n",
                        "filePath": "homeassistant/components/stream/core.py",
                        "lineNumbers": [
                            385,
                            386,
                            387,
                            388,
                            389
                        ]
                    },
                    {
                        "additionalContext": "    assert entry.unique_id is not None\n    hass.data.setdefault(DOMAIN, {})\n    if CONF_ADDRESS not in entry.data and CONF_MAC in entry.data:\n        # Bleak uses addresses not mac addresses which are actually\n        # UUIDs on some platforms (MacOS).\n        mac = entry.data[CONF_MAC]\n        if \"-\" not in mac:\n            mac = dr.format_mac(mac)\n        hass.config_entries.async_update_entry(\n",
                        "filePath": "homeassistant/components/switchbot/__init__.py",
                        "lineNumbers": [
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84,
                            85,
                            86
                        ]
                    },
                    {
                        "additionalContext": "        \"\"\"See if we already have a configured NAS with this MAC address.\"\"\"\n        for entry in self._async_current_entries():\n            if discovered_mac in [\n                format_synology_mac(mac) for mac in entry.data.get(CONF_MAC, [])\n            ]:\n                return entry\n        return None\n",
                        "filePath": "homeassistant/components/synology_dsm/config_flow.py",
                        "lineNumbers": [
                            365,
                            366,
                            367,
                            368,
                            369,
                            370,
                            371
                        ]
                    },
                    {
                        "additionalContext": "\n    connections = device_entry.connections\n    macs = [c[1] for c in connections if c[0] == CONNECTION_NETWORK_MAC]\n    tasmota_discovery = hass.data[discovery.TASMOTA_DISCOVERY_INSTANCE]\n    for mac in macs:\n",
                        "filePath": "homeassistant/components/tasmota/__init__.py",
                        "lineNumbers": [
                            170,
                            171,
                            172,
                            173,
                            174
                        ]
                    },
                    {
                        "additionalContext": "    offenders = []\n    for other_mac, other_config in hass.data[DISCOVERY_DATA].items():\n        if own_mac and other_mac == own_mac:\n            continue\n        if command_topic == get_topic_command(other_config):\n",
                        "filePath": "homeassistant/components/tasmota/discovery.py",
                        "lineNumbers": [
                            74,
                            75,
                            76,
                            77,
                            78
                        ]
                    },
                    {
                        "additionalContext": "                trigger_config.trigger_id,\n            )\n            if discovery_hash in hass.data[ALREADY_DISCOVERED]:\n                _LOGGER.debug(\n                    \"Trigger already added, sending update: %s\",\n",
                        "filePath": "homeassistant/components/tasmota/discovery.py",
                        "lineNumbers": [
                            267,
                            268,
                            269,
                            270,
                            271
                        ]
                    },
                    {
                        "additionalContext": "                )\n                macs = issue_data[\"mac\"].split()\n                if mac not in macs:\n                    continue\n                if payload and command_topic == issue_data[\"topic\"]:\n",
                        "filePath": "homeassistant/components/tasmota/discovery.py",
                        "lineNumbers": [
                            237,
                            238,
                            239,
                            240,
                            241
                        ]
                    },
                    {
                        "additionalContext": "\n            if self._ssl_context is not None:\n                sock = self._ssl_context.wrap_socket(\n                    sock, server_hostname=self._config[CONF_HOST]\n                )\n",
                        "filePath": "homeassistant/components/tcp/common.py",
                        "lineNumbers": [
                            114,
                            115,
                            116,
                            117,
                            118
                        ]
                    },
                    {
                        "additionalContext": "                        _LOGGER.error(\n                            \"TemplateError in %s: %s -> %s\",\n                            attribute,\n                            attribute_templ.template,\n                            exc,\n",
                        "filePath": "homeassistant/components/telegram_bot/__init__.py",
                        "lineNumbers": [
                            417,
                            418,
                            419,
                            420,
                            421
                        ]
                    },
                    {
                        "additionalContext": "        for chat_id in self._get_target_chat_ids(target):\n            _LOGGER.debug(\n                \"Send location %s/%s to chat ID %s\", latitude, longitude, chat_id\n            )\n            await self._send_msg(\n",
                        "filePath": "homeassistant/components/telegram_bot/__init__.py",
                        "lineNumbers": [
                            992,
                            993,
                            994,
                            995,
                            996
                        ]
                    },
                    {
                        "additionalContext": "                headers = {\"Authorization\": f\"Bearer {password}\"}\n            elif username is not None and password is not None:\n                if authentication == HTTP_DIGEST_AUTHENTICATION:\n                    params[\"auth\"] = httpx.DigestAuth(username, password)\n                else:\n",
                        "filePath": "homeassistant/components/telegram_bot/__init__.py",
                        "lineNumbers": [
                            313,
                            314,
                            315,
                            316,
                            317
                        ]
                    },
                    {
                        "additionalContext": "            return self.json_message(\"Access denied\", HTTPStatus.UNAUTHORIZED)\n        secret_token_header = request.headers.get(\"X-Telegram-Bot-Api-Secret-Token\")\n        if secret_token_header is None or self.secret_token != secret_token_header:\n            _LOGGER.warning(\"Invalid secret token from %s\", real_ip)\n            return self.json_message(\"Access denied\", HTTPStatus.UNAUTHORIZED)\n",
                        "filePath": "homeassistant/components/telegram_bot/webhooks.py",
                        "lineNumbers": [
                            154,
                            155,
                            156,
                            157,
                            158
                        ]
                    },
                    {
                        "additionalContext": "            extended_mac_address = xa.hex()\n            if name in self._known_routers and self._known_routers[name] == (\n                extended_mac_address,\n                data,\n            ):\n                _LOGGER.debug(\n",
                        "filePath": "homeassistant/components/thread/discovery.py",
                        "lineNumbers": [
                            208,
                            209,
                            210,
                            211,
                            212,
                            213
                        ]
                    },
                    {
                        "additionalContext": "    # Plugs are prefixed with the mac in python-kasa but not\n    # in pyHS100 so we need to strip off the mac\n    if \"_\" not in device_id:\n        return device_id\n    return device_id.split(\"_\")[1]\n",
                        "filePath": "homeassistant/components/tplink/__init__.py",
                        "lineNumbers": [
                            223,
                            224,
                            225,
                            226,
                            227
                        ]
                    },
                    {
                        "additionalContext": "\n        credentials = await get_credentials(self.hass)\n        if credentials and credentials != self._discovered_device.config.credentials:\n            try:\n                device = await self._async_try_connect(\n",
                        "filePath": "homeassistant/components/tplink/config_flow.py",
                        "lineNumbers": [
                            145,
                            146,
                            147,
                            148,
                            149
                        ]
                    },
                    {
                        "additionalContext": "            )\n            for formatted_mac, device in self._discovered_devices.items()\n            if formatted_mac not in configured_devices\n        }\n        # Check if there is at least one device\n",
                        "filePath": "homeassistant/components/tplink/config_flow.py",
                        "lineNumbers": [
                            314,
                            315,
                            316,
                            317,
                            318
                        ]
                    },
                    {
                        "additionalContext": "\n        # Is speech already in memory\n        if cache_key in self.mem_cache:\n            filename = self.mem_cache[cache_key][\"filename\"]\n        # Is file store in file cache\n        elif use_cache and cache_key in self.file_cache:\n            filename = self.file_cache[cache_key]\n            self.hass.async_create_task(self._async_file_to_mem(cache_key))\n",
                        "filePath": "homeassistant/components/tts/__init__.py",
                        "lineNumbers": [
                            619,
                            620,
                            621,
                            622,
                            623,
                            624,
                            625,
                            626
                        ]
                    },
                    {
                        "additionalContext": "\n        # If we have the file, load it into memory if necessary\n        if cache_key not in self.mem_cache:\n            if use_cache and cache_key in self.file_cache:\n                await self._async_file_to_mem(cache_key)\n            else:\n",
                        "filePath": "homeassistant/components/tts/__init__.py",
                        "lineNumbers": [
                            650,
                            651,
                            652,
                            653,
                            654,
                            655
                        ]
                    },
                    {
                        "additionalContext": "            mac: f\"Unknown ({mac})\"\n            for mac in self.options.get(CONF_CLIENT_SOURCE, [])\n            if mac not in clients\n        }\n\n",
                        "filePath": "homeassistant/components/unifi/config_flow.py",
                        "lineNumbers": [
                            320,
                            321,
                            322,
                            323,
                            324
                        ]
                    },
                    {
                        "additionalContext": "            redacted[key] = async_replace_list_data(value, to_replace)\n        elif isinstance(value, str):\n            if value in to_replace:\n                redacted[key] = to_replace[value]\n            elif value.count(\":\") == 5:\n",
                        "filePath": "homeassistant/components/unifi/diagnostics.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "            new_value = async_replace_dict_data(item, to_replace)\n        elif isinstance(item, str):\n            if item in to_replace:\n                new_value = to_replace[item]\n            elif item.count(\":\") == 5:\n",
                        "filePath": "homeassistant/components/unifi/diagnostics.py",
                        "lineNumbers": [
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "        for entry in device.raw.get(\"ethernet_table\", []):\n            mac = entry.get(\"mac\", \"\")\n            if mac not in macs_to_redact:\n                macs_to_redact[mac] = format_mac(str(counter).zfill(12))\n                counter += 1\n",
                        "filePath": "homeassistant/components/unifi/diagnostics.py",
                        "lineNumbers": [
                            87,
                            88,
                            89,
                            90,
                            91
                        ]
                    },
                    {
                        "additionalContext": "        api = self.hub.api\n        for mac in config.option_supported_clients + config.option_block_clients + macs:\n            if mac not in api.clients and mac in api.clients_all:\n                api.clients.process_raw([dict(api.clients_all[mac].raw)])\n\n",
                        "filePath": "homeassistant/components/unifi/hub/entity_loader.py",
                        "lineNumbers": [
                            93,
                            94,
                            95,
                            96,
                            97
                        ]
                    },
                    {
                        "additionalContext": "    mac = \"\"\n    for connection in device_entry.connections:\n        if connection[0] == CONNECTION_NETWORK_MAC:\n            mac = connection[1]\n            break\n\n    if mac == \"\":\n        return\n\n",
                        "filePath": "homeassistant/components/unifi/services.py",
                        "lineNumbers": [
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68
                        ]
                    },
                    {
                        "additionalContext": "        _async_unifi_mac_from_hass(connection[1])\n        for connection in device_entry.connections\n        if connection[0] == dr.CONNECTION_NETWORK_MAC\n    }\n    api = config_entry.runtime_data.api\n    if api.bootstrap.nvr.mac in unifi_macs:\n        return False\n    for device in async_get_devices(api.bootstrap, DEVICES_THAT_ADOPT):\n        if device.is_adopted_by_us and device.mac in unifi_macs:\n            return False\n    return True\n",
                        "filePath": "homeassistant/components/unifiprotect/__init__.py",
                        "lineNumbers": [
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208,
                            209
                        ]
                    },
                    {
                        "additionalContext": "        for entry in self._async_current_entries():\n            if entry.source == SOURCE_IGNORE:\n                if entry.unique_id == mac:\n                    return self.async_abort(reason=\"already_configured\")\n                continue\n",
                        "filePath": "homeassistant/components/unifiprotect/config_flow.py",
                        "lineNumbers": [
                            141,
                            142,
                            143,
                            144,
                            145
                        ]
                    },
                    {
                        "additionalContext": "            entry_host = entry.data[CONF_HOST]\n            entry_has_direct_connect = _host_is_direct_connect(entry_host)\n            if entry.unique_id == mac:\n                new_host = None\n                if (\n",
                        "filePath": "homeassistant/components/unifiprotect/config_flow.py",
                        "lineNumbers": [
                            146,
                            147,
                            148,
                            149,
                            150
                        ]
                    },
                    {
                        "additionalContext": "    _LOGGER.warning(\"Client error (%s): %s\", code.value, message)\n    if code == HTTPStatus.BAD_REQUEST:\n        return web.Response(body=message, status=code)\n    return web.Response(status=code)\n\n",
                        "filePath": "homeassistant/components/unifiprotect/views.py",
                        "lineNumbers": [
                            64,
                            65,
                            66,
                            67,
                            68
                        ]
                    },
                    {
                        "additionalContext": "            return None\n\n        macs = [c[1] for c in device.connections if c[0] == dr.CONNECTION_NETWORK_MAC]\n        for mac in macs:\n            if (ufp_device := data.api.bootstrap.get_device_from_mac(mac)) is not None:\n",
                        "filePath": "homeassistant/components/unifiprotect/views.py",
                        "lineNumbers": [
                            170,
                            171,
                            172,
                            173,
                            174
                        ]
                    },
                    {
                        "additionalContext": "            entry_mac_address = entry.data.get(CONFIG_ENTRY_MAC_ADDRESS)\n            entry_host = entry.data.get(CONFIG_ENTRY_HOST)\n            if entry_mac_address != mac_address and entry_host != host:\n                continue\n\n",
                        "filePath": "homeassistant/components/upnp/config_flow.py",
                        "lineNumbers": [
                            195,
                            196,
                            197,
                            198,
                            199
                        ]
                    },
                    {
                        "additionalContext": "            usr=config[CONF_USERNAME],\n            pwd=config[CONF_PASSWORD],\n            digest_auth=config[CONF_AUTHENTICATION] == HTTP_DIGEST_AUTHENTICATION,\n            sec_lvl=config[CONF_SECURITY_LEVEL],\n        ),\n",
                        "filePath": "homeassistant/components/vivotek/camera.py",
                        "lineNumbers": [
                            67,
                            68,
                            69,
                            70,
                            71
                        ]
                    },
                    {
                        "additionalContext": "    _LOGGER.debug(\"Adding device trackers entities\")\n    for mac, device_info in coordinator.data.devices.items():\n        if mac in tracked:\n            continue\n        _LOGGER.debug(\"New device tracker: %s\", device_info.device.name)\n",
                        "filePath": "homeassistant/components/vodafone_station/device_tracker.py",
                        "lineNumbers": [
                            51,
                            52,
                            53,
                            54,
                            55
                        ]
                    },
                    {
                        "additionalContext": "            \"Received message for unregistered webhook %s from %s\",\n            webhook_id,\n            received_from,\n        )\n        # Look at content to provide some context for received webhook\n",
                        "filePath": "homeassistant/components/webhook/__init__.py",
                        "lineNumbers": [
                            138,
                            139,
                            140,
                            141,
                            142
                        ]
                    },
                    {
                        "additionalContext": "        # Limit to 64 chars to avoid flooding the log\n        content = await content_stream.read(64)\n        _LOGGER.debug(\"%s\", content)\n        return Response(status=HTTPStatus.OK)\n\n",
                        "filePath": "homeassistant/components/webhook/__init__.py",
                        "lineNumbers": [
                            143,
                            144,
                            145,
                            146,
                            147
                        ]
                    },
                    {
                        "additionalContext": "            \",\".join(webhook[\"allowed_methods\"]),\n            method_name,\n            received_from,\n        )\n        return Response(status=HTTPStatus.METHOD_NOT_ALLOWED)\n",
                        "filePath": "homeassistant/components/webhook/__init__.py",
                        "lineNumbers": [
                            156,
                            157,
                            158,
                            159,
                            160
                        ]
                    },
                    {
                        "additionalContext": "                request_remote = ip_address(request.remote)\n            except ValueError:\n                _LOGGER.debug(\"Unable to parse remote ip %s\", request.remote)\n                return Response(status=HTTPStatus.OK)\n\n",
                        "filePath": "homeassistant/components/webhook/__init__.py",
                        "lineNumbers": [
                            170,
                            171,
                            172,
                            173,
                            174
                        ]
                    },
                    {
                        "additionalContext": "        with suppress(TimeoutError):\n            async with asyncio.timeout(10):\n                response = await websession.get(url, ssl=False)\n                if response.status == HTTPStatus.OK:\n                    content = await response.read()\n",
                        "filePath": "homeassistant/components/webostv/media_player.py",
                        "lineNumbers": [
                            488,
                            489,
                            490,
                            491,
                            492
                        ]
                    },
                    {
                        "additionalContext": "    machine_state = washer.get_machine_state()\n\n    if machine_state == MachineState.RunningMainCycle:\n        for func, cycle_name in CYCLE_FUNC:\n            if func(washer):\n",
                        "filePath": "homeassistant/components/whirlpool/sensor.py",
                        "lineNumbers": [
                            83,
                            84,
                            85,
                            86,
                            87
                        ]
                    },
                    {
                        "additionalContext": "            )\n\n        if self.reauth_entry.unique_id == user_id:\n            return self.async_update_reload_and_abort(\n                self.reauth_entry, data={**self.reauth_entry.data, **data}\n",
                        "filePath": "homeassistant/components/withings/config_flow.py",
                        "lineNumbers": [
                            68,
                            69,
                            70,
                            71,
                            72
                        ]
                    },
                    {
                        "additionalContext": "            mac: f\"{DEFAULT_NAME} {_short_mac(mac)} ({device.ip_address})\"\n            for mac, device in self._discovered_devices.items()\n            if mac not in current_unique_ids and device.ip_address not in current_hosts\n        }\n        # Check if there is at least one device\n",
                        "filePath": "homeassistant/components/wiz/config_flow.py",
                        "lineNumbers": [
                            138,
                            139,
                            140,
                            141,
                            142
                        ]
                    },
                    {
                        "additionalContext": "        try:\n            self.data = requests.get(resource, timeout=10).json()\n            _LOGGER.debug(\"Data: %s\", self.data)\n            _LOGGER.debug(\"Tide data queried with start time set to: %s\", start)\n        except ValueError as err:\n",
                        "filePath": "homeassistant/components/worldtidesinfo/sensor.py",
                        "lineNumbers": [
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "                \"url: [%s] \\nwith parameter: [%s] \\nwas: [%s]\"\n            )\n        else:\n        _LOGGER.error(\n            \"Invalid response: [%s] at url: [%s] with data [%s]\", res, url, data\n        )\n",
                        "filePath": "homeassistant/components/xiaomi/device_tracker.py",
                        "lineNumbers": [
                            171,
                            172,
                            173,
                            174,
                            175,
                            176,
                            177,
                            178
                        ]
                    },
                    {
                        "additionalContext": "            result = self._retrieve_list_with_retry()\n            if result:\n                hosts = [x for x in result if \"mac\" in x and \"name\" in x]\n                mac2name_list = [(x[\"mac\"].upper(), x[\"name\"]) for x in hosts]\n                self.mac2name = dict(mac2name_list)\n",
                        "filePath": "homeassistant/components/xiaomi/device_tracker.py",
                        "lineNumbers": [
                            65,
                            66,
                            67,
                            68,
                            69
                        ]
                    },
                    {
                        "additionalContext": "        _LOGGER.exception(\"No field code in response from mi router. %s\", result)\n        return None\n    if xiaomi_code == 0:\n        try:\n            return result[\"list\"]\n",
                        "filePath": "homeassistant/components/xiaomi/device_tracker.py",
                        "lineNumbers": [
                            133,
                            134,
                            135,
                            136,
                            137
                        ]
                    },
                    {
                        "additionalContext": "\n        self._gateway_id = config_entry.unique_id\n        if config_entry.data[CONF_MAC] == format_mac(self._sid):\n            # this entity belongs to the gateway itself\n            self._is_gateway = True\n",
                        "filePath": "homeassistant/components/xiaomi_aqara/__init__.py",
                        "lineNumbers": [
                            275,
                            276,
                            277,
                            278,
                            279
                        ]
                    },
                    {
                        "additionalContext": "        if not os.path.isfile(secret_path):\n            with open(secret_path, \"w\", encoding=\"utf8\") as secret_file:\n                secret_file.write(DEFAULT_SECRETS)\n\n        with open(version_path, \"w\", encoding=\"utf8\") as version_file:\n",
                        "filePath": "homeassistant/config.py",
                        "lineNumbers": [
                            453,
                            454,
                            455,
                            456,
                            457
                        ]
                    },
                    {
                        "additionalContext": "            \"does not contain a dictionary\"\n        )\n        _LOGGER.error(msg)\n        raise HomeAssistantError(msg) from exc\n\n",
                        "filePath": "homeassistant/config.py",
                        "lineNumbers": [
                            548,
                            549,
                            550,
                            551,
                            552
                        ]
                    },
                    {
                        "additionalContext": "    for key in config:\n        with suppress(vol.Invalid):\n            if cv.domain_key(key) != domain:\n                continue\n            domain_configs.append(key)\n",
                        "filePath": "homeassistant/config.py",
                        "lineNumbers": [
                            1417,
                            1418,
                            1419,
                            1420,
                            1421
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Return a config with all configuration for a domain removed.\"\"\"\n    filter_keys = extract_domain_configs(config, domain)\n    return {key: value for key, value in config.items() if key not in filter_keys}\n\n\n",
                        "filePath": "homeassistant/config.py",
                        "lineNumbers": [
                            1699,
                            1700,
                            1701,
                            1702,
                            1703
                        ]
                    },
                    {
                        "additionalContext": "\n        # Abort discoveries done using the default discovery unique id\n        if unique_id != DEFAULT_DISCOVERY_UNIQUE_ID:\n            for progress in self._async_in_progress(\n                include_uninitialized=True,\n",
                        "filePath": "homeassistant/config_entries.py",
                        "lineNumbers": [
                            2353,
                            2354,
                            2355,
                            2356,
                            2357
                        ]
                    },
                    {
                        "additionalContext": "            return self.async_abort(reason=\"oauth_failed\")\n\n        if \"expires_in\" not in token:\n            _LOGGER.warning(\"Invalid token: %s\", token)\n            return self.async_abort(reason=\"oauth_error\")\n",
                        "filePath": "homeassistant/helpers/config_entry_oauth2_flow.py",
                        "lineNumbers": [
                            345,
                            346,
                            347,
                            348,
                            349
                        ]
                    },
                    {
                        "additionalContext": "    parts = config_key.partition(\" \")\n    _domain = parts[0] if parts[2].strip(\" \") else config_key\n    if not _domain or _domain.strip(\" \") != _domain:\n        raise vol.Invalid(\"invalid domain\", path=[config_key])\n\n",
                        "filePath": "homeassistant/helpers/config_validation.py",
                        "lineNumbers": [
                            371,
                            372,
                            373,
                            374,
                            375
                        ]
                    },
                    {
                        "additionalContext": "            return None\n        for connection in _normalize_connections(connections):\n            if connection in self._connections:\n                return self._connections[connection]\n        return None\n",
                        "filePath": "homeassistant/helpers/device_registry.py",
                        "lineNumbers": [
                            497,
                            498,
                            499,
                            500,
                            501
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Normalize connections to ensure we can match mac addresses.\"\"\"\n    return {\n        (key, format_mac(value)) if key == CONNECTION_NETWORK_MAC else (key, value)\n        for key, value in connections\n    }\n",
                        "filePath": "homeassistant/helpers/device_registry.py",
                        "lineNumbers": [
                            1307,
                            1308,
                            1309,
                            1310,
                            1311
                        ]
                    },
                    {
                        "additionalContext": "            domain,\n            platform,\n            unique_id,\n            report_issue,\n        )\n",
                        "filePath": "homeassistant/helpers/entity_registry.py",
                        "lineNumbers": [
                            640,
                            641,
                            642,
                            643,
                            644
                        ]
                    },
                    {
                        "additionalContext": "            _LOGGER.debug(\n                \"Serving %s to %s (auth: %s)\",\n                request.path,\n                request.remote,\n                authenticated,\n            )\n\n",
                        "filePath": "homeassistant/helpers/http.py",
                        "lineNumbers": [
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70
                        ]
                    },
                    {
                        "additionalContext": "            sss = []\n            for skey in sdict:\n                if skey in flatsecret:\n                    _LOGGER.error(\n                        \"Duplicated secrets in files %s and %s\", flatsecret[skey], sfn\n                    )\n                flatsecret[skey] = sfn\n",
                        "filePath": "homeassistant/scripts/check_config.py",
                        "lineNumbers": [
                            151,
                            152,
                            153,
                            154,
                            155,
                            156,
                            157
                        ]
                    },
                    {
                        "additionalContext": "        for skey, sval in res[\"secrets\"].items():\n            if sval is None:\n                print(\" -\", skey + \":\", color(\"red\", \"not found\"))\n                continue\n            print(\" -\", skey + \":\", sval)\n\n    return len(res[\"except\"])\n",
                        "filePath": "homeassistant/scripts/check_config.py",
                        "lineNumbers": [
                            162,
                            163,
                            164,
                            165,
                            166,
                            167,
                            168
                        ]
                    },
                    {
                        "additionalContext": "    # Patches with local mock functions\n    for key, val in MOCKS.items():\n        if not secrets and key == \"secrets\":\n            continue\n        # The * in the key is removed to find the mock_function (side_effect)\n",
                        "filePath": "homeassistant/scripts/check_config.py",
                        "lineNumbers": [
                            199,
                            200,
                            201,
                            202,
                            203
                        ]
                    },
                    {
                        "additionalContext": "def slugify(text: str | None, *, separator: str = \"_\") -> str:\n    \"\"\"Slugify a given text.\"\"\"\n    if text == \"\" or text is None:\n        return \"\"\n    slug = unicode_slug.slugify(text, separator=separator)\n",
                        "filePath": "homeassistant/util/__init__.py",
                        "lineNumbers": [
                            41,
                            42,
                            43,
                            44,
                            45
                        ]
                    },
                    {
                        "additionalContext": "            secrets = self._load_secret_yaml(secret_dir)\n\n            if secret in secrets:\n                _LOGGER.debug(\n                    \"Secret %s retrieved from secrets.yaml in folder %s\",\n                    secret,\n                    secret_dir,\n                )\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            66,
                            67,
                            68,
                            69,
                            70,
                            71,
                            72,
                            73
                        ]
                    },
                    {
                        "additionalContext": "            return self._cache[secret_path]\n\n        _LOGGER.debug(\"Loading %s\", secret_path)\n        try:\n            secrets = load_yaml(str(secret_path))\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            81,
                            82,
                            83,
                            84,
                            85
                        ]
                    },
                    {
                        "additionalContext": "                            \" 'logger: %s' found\"\n                        ),\n                        logger,\n                    )\n                del secrets[\"logger\"]\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            98,
                            99,
                            100,
                            101,
                            102
                        ]
                    },
                    {
                        "additionalContext": "            return parse_yaml(conf_file, secrets)\n    except UnicodeDecodeError as exc:\n        _LOGGER.error(\"Unable to read file %s: %s\", fname, exc)\n        raise HomeAssistantError(exc) from exc\n\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            227,
                            228,
                            229,
                            230,
                            231
                        ]
                    },
                    {
                        "additionalContext": "                raise HomeAssistantError(\"Secrets is not a dictionary\")\n\n            if \"logger\" in secrets:\n                logger = str(secrets[\"logger\"]).lower()\n                if logger == \"debug\":\n                    _LOGGER.setLevel(logging.DEBUG)\n                else:\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            88,
                            89,
                            90,
                            91,
                            92,
                            93,
                            94
                        ]
                    },
                    {
                        "additionalContext": "    for fname in _find_files(loc, \"*.yaml\"):\n        filename = os.path.splitext(os.path.basename(fname))[0]\n        if os.path.basename(fname) == SECRET_YAML:\n            continue\n        loaded_yaml = load_yaml(fname, loader.secrets)\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            389,
                            390,
                            391,
                            392,
                            393
                        ]
                    },
                    {
                        "additionalContext": "    loc = os.path.join(os.path.dirname(loader.get_name), node.value)\n    for fname in _find_files(loc, \"*.yaml\"):\n        if os.path.basename(fname) == SECRET_YAML:\n            continue\n        loaded_yaml = load_yaml(fname, loader.secrets)\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            407,
                            408,
                            409,
                            410,
                            411
                        ]
                    },
                    {
                        "additionalContext": "        loaded_yaml\n        for f in _find_files(loc, \"*.yaml\")\n        if os.path.basename(f) != SECRET_YAML\n        and (loaded_yaml := load_yaml(f, loader.secrets)) is not None\n    ]\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            423,
                            424,
                            425,
                            426,
                            427
                        ]
                    },
                    {
                        "additionalContext": "    merged_list: list[JSON_TYPE] = []\n    for fname in _find_files(loc, \"*.yaml\"):\n        if os.path.basename(fname) == SECRET_YAML:\n            continue\n        loaded_yaml = load_yaml(fname, loader.secrets)\n",
                        "filePath": "homeassistant/util/yaml/loader.py",
                        "lineNumbers": [
                            435,
                            436,
                            437,
                            438,
                            439
                        ]
                    },
                    {
                        "additionalContext": "\nPACKAGE_REGEX = re.compile(\n    r\"^(?:--.+\\s)?([-_,\\.\\w\\d\\[\\]]+)(==|>=|<=|~=|!=|<|>|===)*(.*)$\"\n)\nPIP_REGEX = re.compile(r\"^(--.+\\s)?([-_\\.\\w\\d]+.*(?:==|>=|<=|~=|!=|<|>|===)?.*$)\")\n",
                        "filePath": "script/hassfest/requirements.py",
                        "lineNumbers": [
                            24,
                            25,
                            26,
                            27,
                            28
                        ]
                    },
                    {
                        "additionalContext": "    data = store._data_to_save()\n    assert len(data[\"users\"]) == 0\n    assert data[\"groups\"] == [\n        {\"id\": auth_store.GROUP_ID_ADMIN, \"name\": auth_store.GROUP_NAME_ADMIN},\n        {\"id\": auth_store.GROUP_ID_USER, \"name\": auth_store.GROUP_NAME_USER},\n",
                        "filePath": "tests/auth/test_auth_store.py",
                        "lineNumbers": [
                            189,
                            190,
                            191,
                            192,
                            193
                        ]
                    },
                    {
                        "additionalContext": "    assert user.refresh_tokens == {refresh_token    assert await store.async_get_user(user.id) == user\n    assert store.async_get_refresh_token(refresh_token.id) == refresh_token\n    assert store.async_get_refresh_token_by_token(refresh_token.token) == refresh_token\n    await store.async_remove_user(user)\n    assert store.async_get_refresh_token(refresh_token.id) is None\n",
                        "filePath": "tests/auth/test_auth_store.py",
                        "lineNumbers": [
                            314,
                            315,
                            316,
                            317,
                            318,
                            319
                        ]
                    },
                    {
                        "additionalContext": "    assert token is not None\n    assert token.client_id is None\n    assert token.token_type == auth.models.TOKEN_TYPE_SYSTEM\n    assert token.expire_at is None\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            409,
                            410,
                            411,
                            412,
                            413
                        ]
                    },
                    {
                        "additionalContext": "    assert token is not None\n    assert token.client_id is None\n    assert token.token_type == auth.models.TOKEN_TYPE_SYSTEM\n    assert token.expire_at is None\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            426,
                            427,
                            428,
                            429,
                            430
                        ]
                    },
                    {
                        "additionalContext": "    assert token is not None\n    assert token.client_id == CLIENT_ID\n    assert token.token_type == auth_models.TOKEN_TYPE_NORMAL\n    # default access token expiration\n    assert token.access_token_expiration == auth_const.ACCESS_TOKEN_EXPIRATION\n\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            446,
                            447,
                            448,
                            449,
                            450,
                            451,
                            452
                        ]
                    },
                    {
                        "additionalContext": "    assert token is not None\n    assert token.client_id is None\n    assert token.token_type == auth_models.TOKEN_TYPE_SYSTEM\n\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            465,
                            466,
                            467,
                            468,
                            469
                        ]
                    },
                    {
                        "additionalContext": "    assert token.client_id == CLIENT_ID\n    assert token.access_token_expiration == timedelta(days=100)\n    assert token.token_type == auth.models.TOKEN_TYPE_NORMAL\n    assert token.expire_at is not None\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            481,
                            482,
                            483,
                            484,
                            485
                        ]
                    },
                    {
                        "additionalContext": "    assert token is not None\n    assert token.client_id == CLIENT_ID\n    assert token.token_type == auth_models.TOKEN_TYPE_NORMAL\n\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            500,
                            501,
                            502,
                            503,
                            504
                        ]
                    },
                    {
                        "additionalContext": "    assert token.client_name == \"GPS LOGGER\"\n    assert token.client_icon == \"mdi:home\"\n    assert token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    assert token.expire_at is None\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            523,
                            524,
                            525,
                            526,
                            527
                        ]
                    },
                    {
                        "additionalContext": "    user = MockUser().add_to_auth_manager(manager)\n    refresh_token = await manager.async_create_refresh_token(user, CLIENT_ID)\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_NORMAL\n    jwt_key = refresh_token.jwt_key\n    access_token = manager.async_create_access_token(refresh_token)\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            696,
                            697,
                            698,
                            699,
                            700
                        ]
                    },
                    {
                        "additionalContext": "        access_token_expiration=timedelta(days=3000),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token = manager.async_create_access_token(refresh_token)\n    jwt_key = refresh_token.jwt_key\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            737,
                            738,
                            739,
                            740,
                            741
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert refresh_token_2.id != refresh_token.id\n    assert refresh_token_2.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token_2 = manager.async_create_access_token(refresh_token_2)\n    jwt_key_2 = refresh_token_2.jwt_key\n\n    assert access_token != access_token_2\n    assert jwt_key != jwt_key_2\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            764,
                            765,
                            766,
                            767,
                            768,
                            769,
                            770,
                            771,
                            772
                        ]
                    },
                    {
                        "additionalContext": "    token_after = list(user.refresh_tokens.values())[0]\n\n    assert token_before == token_after\n\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1189,
                            1190,
                            1191,
                            1192,
                            1193
                        ]
                    },
                    {
                        "additionalContext": "        access_token_expiration=timedelta(days=3000),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token = manager.async_create_access_token(refresh_token)\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1219,
                            1220,
                            1221,
                            1222,
                            1223
                        ]
                    },
                    {
                        "additionalContext": "    invalid_token = f\"{header}.{payload}.{invalid_signature}\"\n\n    assert access_token != invalid_token\n\n    result = manager.async_validate_access_token(invalid_token)\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1230,
                            1231,
                            1232,
                            1233,
                            1234
                        ]
                    },
                    {
                        "additionalContext": "        access_token_expiration=timedelta(days=3000),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token = manager.async_create_access_token(refresh_token)\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1246,
                            1247,
                            1248,
                            1249,
                            1250
                        ]
                    },
                    {
                        "additionalContext": "    invalid_token = f\"{header}.{payload}.{invalid_signature}\"\n\n    assert access_token != invalid_token\n\n    result = manager.async_validate_access_token(invalid_token)\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1257,
                            1258,
                            1259,
                            1260,
                            1261
                        ]
                    },
                    {
                        "additionalContext": "        access_token_expiration=timedelta(days=3000),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token = manager.async_create_access_token(refresh_token)\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1273,
                            1274,
                            1275,
                            1276,
                            1277
                        ]
                    },
                    {
                        "additionalContext": "    invalid_token = f\"{header}.{payload}.\"\n\n    assert access_token != invalid_token\n\n    result = manager.async_validate_access_token(invalid_token)\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1283,
                            1284,
                            1285,
                            1286,
                            1287
                        ]
                    },
                    {
                        "additionalContext": "        access_token_expiration=timedelta(days=3000),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n\n    access_token = manager.async_create_access_token(refresh_token)\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1299,
                            1300,
                            1301,
                            1302,
                            1303
                        ]
                    },
                    {
                        "additionalContext": "        access_token_expiration=timedelta(seconds=1),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token = manager.async_create_access_token(refresh_token)\n\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1347,
                            1348,
                            1349,
                            1350,
                            1351
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert (\n            refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n        )\n        access_token = manager.async_create_access_token(refresh_token)\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            1370,
                            1371,
                            1372,
                            1373,
                            1374
                        ]
                    },
                    {
                        "additionalContext": "def get_fixture_path(filename: str, integration: str | None = None) -> pathlib.Path:\n    \"\"\"Get path of fixture.\"\"\"\n    if integration is None and \"/\" in filename and not filename.startswith(\"helpers/\"):\n        integration, filename = filename.split(\"/\", 1)\n\n",
                        "filePath": "tests/common.py",
                        "lineNumbers": [
                            545,
                            546,
                            547,
                            548,
                            549
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == \"test@test.com\"\n    assert result[\"data\"][\"token\"][\"access_token\"] == EXAMPLE_TOKEN\n    assert result[\"data\"][\"token\"][\"refresh_token\"] == \"mock-refresh-token\"\n    assert result[\"result\"].unique_id == \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\"\n",
                        "filePath": "tests/components/aladdin_connect/test_config_flow.py",
                        "lineNumbers": [
                            98,
                            99,
                            100,
                            101,
                            102
                        ]
                    },
                    {
                        "additionalContext": "    assert auth_call_json[\"code\"] == accept_grant_code\n    assert auth\n    assert token_call_json[\"grant_type\"] == \"refresh_token\"\n    assert token_call_json[\"refresh_token\"] == refresh_token\n    assert token_call_json[CONF_CLIENT_ID] == client_id\n    assert token_call_json[CONF_CLIENT_SECRET] == client_secret\n\n\n",
                        "filePath": "tests/components/alexa/test_auth.py",
                        "lineNumbers": [
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70,
                            71
                        ]
                    },
                    {
                        "additionalContext": "    assert auth_call_json[\"code\"] == accept_grant_code\n    assert auth_call_json[CONF_CLIENT_ID] == client_id\n    assert auth_call_json[CONF_CLIENT_SECRET] == client_secret\n",
                        "filePath": "tests/components/alexa/test_auth.py",
                        "lineNumbers": [
                            97,
                            98,
                            99
                        ]
                    },
                    {
                        "additionalContext": "    assert msg[\"header\"][\"messageId\"] is not None\n    assert msg[\"header\"][\"messageId\"] != directive_header[\"messageId\"]\n    assert msg[\"header\"][\"correlationToken\"] == directive_header[\"correlationToken\"]\n    assert msg[\"header\"][\"name\"] == \"Response\"\n    assert msg[\"header\"][\"namespace\"] == \"Alexa\"\n",
                        "filePath": "tests/components/alexa/test_smart_home.py",
                        "lineNumbers": [
                            77,
                            78,
                            79,
                            80,
                            81
                        ]
                    },
                    {
                        "additionalContext": "        if cmd == CMD_DEVICE_PROPERTIES:\n            return PROPS_DEV_INFO\n        if cmd == CMD_MAC_WLAN0:\n            return PROPS_DEV_MAC\n        if cmd == CMD_MAC_ETH0:\n            return PROPS_DEV_MAC if mac_eth else None\n        return response\n",
                        "filePath": "tests/components/androidtv/patchers.py",
                        "lineNumbers": [
                            122,
                            123,
                            124,
                            125,
                            126,
                            127,
                            128
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == name\n    assert result[\"data\"] == {\"host\": host, \"name\": name, \"mac\": mac}\n    assert result[\"context\"][\"source\"] == \"user\"\n    assert result[\"context\"][\"unique_id\"] == unique_id\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            61,
                            62,
                            63,
                            64,
                            65
                        ]
                    },
                    {
                        "additionalContext": "    assert len(mock_unload_entry.mock_calls) == 1\n    assert len(mock_setup_entry.mock_calls) == 1\n    assert hass.config_entries.async_entries(DOMAIN)[0].data == {\n        \"host\": host,\n        \"name\": name_existing,\n        \"mac\": mac,\n    }\n\n\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            352,
                            353,
                            354,
                            355,
                            356,
                            357,
                            358,
                            359,
                            360
                        ]
                    },
                    {
                        "additionalContext": "    assert len(mock_unload_entry.mock_calls) == 0\n    assert len(mock_setup_entry.mock_calls) == 0\n    assert hass.config_entries.async_entries(DOMAIN)[0].data == {\n        \"host\": host,\n        \"name\": name_existing,\n        \"mac\": mac,\n    }\n\n\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            411,
                            412,
                            413,
                            414,
                            415,
                            416,
                            417,
                            418,
                            419
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == name\n    assert result[\"data\"] == {\n        \"host\": host,\n        \"name\": name,\n        \"mac\": mac,\n    }\n    assert result[\"context\"][\"source\"] == \"zeroconf\"\n    assert result[\"context\"][\"unique_id\"] == unique_id\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            479,
                            480,
                            481,
                            482,
                            483,
                            484,
                            485,
                            486,
                            487
                        ]
                    },
                    {
                        "additionalContext": "\n    await hass.async_block_till_done()\n    assert hass.config_entries.async_entries(DOMAIN)[0].data == {\n        \"host\": host,\n        \"name\": name,\n        \"mac\": mac,\n    }\n    assert len(mock_unload_entry.mock_calls) == 1\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            661,
                            662,
                            663,
                            664,
                            665,
                            666,
                            667,
                            668,
                            669
                        ]
                    },
                    {
                        "additionalContext": "\n    await hass.async_block_till_done()\n    assert hass.config_entries.async_entries(DOMAIN)[0].data == {\n        \"host\": host,\n        \"name\": name,\n        \"mac\": mac,\n    }\n    assert len(mock_unload_entry.mock_calls) == 0\n    assert len(mock_setup_entry.mock_calls) == 0\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            714,
                            715,
                            716,
                            717,
                            718,
                            719,
                            720,
                            721,
                            722
                        ]
                    },
                    {
                        "additionalContext": "\n    await hass.async_block_till_done()\n    assert hass.config_entries.async_entries(DOMAIN)[0].data == {\n        \"host\": host,\n        \"name\": name,\n        \"mac\": mac,\n    }\n    assert len(mock_unload_entry.mock_calls) == 1\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/androidtv_remote/test_config_flow.py",
                        "lineNumbers": [
                            809,
                            810,
                            811,
                            812,
                            813,
                            814,
                            815,
                            816,
                            817
                        ]
                    },
                    {
                        "additionalContext": "async def test_error_pwd_required(hass: HomeAssistant, config) -> None:\n    \"\"\"Test we abort for missing password.\"\"\"\n    config_data = {k: v for k, v in config.items() if k != CONF_PASSWORD}\n    result = await hass.config_entries.flow.async_init(\n        DOMAIN,\n",
                        "filePath": "tests/components/asuswrt/test_config_flow.py",
                        "lineNumbers": [
                            147,
                            148,
                            149,
                            150,
                            151
                        ]
                    },
                    {
                        "additionalContext": "async def test_error_no_password_ssh(hass: HomeAssistant) -> None:\n    \"\"\"Test we abort for wrong password and ssh file combination.\"\"\"\n    config_data = {k: v for k, v in CONFIG_DATA_SSH.items() if k != CONF_PASSWORD}\n    result = await hass.config_entries.flow.async_init(\n        DOMAIN,\n",
                        "filePath": "tests/components/asuswrt/test_config_flow.py",
                        "lineNumbers": [
                            160,
                            161,
                            162,
                            163,
                            164
                        ]
                    },
                    {
                        "additionalContext": "async def test_error_invalid_ssh(hass: HomeAssistant, patch_is_file) -> None:\n    \"\"\"Test we abort if invalid ssh file is provided.\"\"\"\n    config_data = {k: v for k, v in CONFIG_DATA_SSH.items() if k != CONF_PASSWORD}\n    config_data[CONF_SSH_KEY] = SSH_KEY\n\n",
                        "filePath": "tests/components/asuswrt/test_config_flow.py",
                        "lineNumbers": [
                            173,
                            174,
                            175,
                            176,
                            177
                        ]
                    },
                    {
                        "additionalContext": "    await august_gateway.async_refresh_access_token_if_needed()\n    refresh_access_token_mock.assert_called()\n    assert august_gateway.access_token == new_token\n    assert august_gateway.authentication.access_token_expires == new_token_expire_time\n",
                        "filePath": "tests/components/august/test_gateway.py",
                        "lineNumbers": [
                            51,
                            52,
                            53,
                            54
                        ]
                    },
                    {
                        "additionalContext": "\n    assert hass.auth.async_validate_access_token(tokens[\"access_token\"]) is not None\n    assert tokens[\"ha_auth_provider\"] == \"insecure_example\"\n\n    # Use refresh token to get more tokens.\n",
                        "filePath": "tests/components/auth/test_init.py",
                        "lineNumbers": [
                            95,
                            96,
                            97,
                            98,
                            99
                        ]
                    },
                    {
                        "additionalContext": "    assert resp.status == HTTPStatus.OK\n    tokens = await resp.json()\n    assert \"refresh_token\" not in tokens\n    assert hass.auth.async_validate_access_token(tokens[\"access_token\"]) is not None\n\n",
                        "filePath": "tests/components/auth/test_init.py",
                        "lineNumbers": [
                            109,
                            110,
                            111,
                            112,
                            113
                        ]
                    },
                    {
                        "additionalContext": "\n    freezer.move_to(now + timedelta(minutes=9, seconds=59))\n    assert retrieve(client_id, code) == mock_credential\n\n\n",
                        "filePath": "tests/components/auth/test_init.py",
                        "lineNumbers": [
                            188,
                            189,
                            190,
                            191,
                            192
                        ]
                    },
                    {
                        "additionalContext": "    token = result[\"result\"][0]\n    refresh_token = hass.auth.async_validate_access_token(hass_access_token)\n    assert token[\"id\"] == refresh_token.id\n    assert token[\"    assert token[\"created_at\"] == refresh_token.creat    assert token[\"is_current\"] is True\n    assert token[\"last_used_at\"] == refresh_token.last_used_at.isoformat()\n    assert token[\"last_used_ip\"] == refresh_token.last_used_ip\n    assert token[\"auth_provider_type\"] == \"homeassistant\"\n\n\n",
                        "filePath": "tests/components/auth/test_init.py",
                        "lineNumbers": [
                            471,
                            472,
                            473,
                            474,
                            475,
                            476,
                            477,
                            478,
                            479,
                            480,
                            481,
                            482,
                            483,
                            484
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert (\n        remaining_tokens_by_type[TOKEN_TYPE_NORMAL] == expected_remaining_normal_tokens\n    )\n\n",
                        "filePath": "tests/components/auth/test_init.py",
                        "lineNumbers": [
                            657,
                            658,
                            659,
                            660,
                            661,
                            662,
                            663,
                            664,
                            665
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"M1065-LW - {MAC}\"\n    assert result[\"data\"] == {\n        CONF_PROTOCOL: \"http\",\n",
                        "filePath": "tests/components/axis/test_config_flow.py",
                        "lineNumbers": [
                            80,
                            81,
                            82,
                            83,
                            84
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"M1065-LW - {MAC}\"\n    assert result[\"data\"] == {\n        CONF_PROTOCOL: \"http\",\n",
                        "filePath": "tests/components/axis/test_config_flow.py",
                        "lineNumbers": [
                            214,
                            215,
                            216,
                            217,
                            218
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"M1065-LW - {MAC}\"\n    assert result[\"data\"] == {\n        CONF_PROTOCOL: \"http\",\n",
                        "filePath": "tests/components/axis/test_config_flow.py",
                        "lineNumbers": [
                            403,
                            404,
                            405,
                            406,
                            407
                        ]
                    },
                    {
                        "additionalContext": "    assert hub.config.model == config_entry_data[CONF_MODEL]\n    assert hub.config.name == config_entry_data[CONF_NAME]\n    assert hub.unique_id == FORMATTED_MAC\n\n    device_entry = device_registry.async_get_device(\n",
                        "filePath": "tests/components/axis/test_hub.py",
                        "lineNumbers": [
                            69,
                            70,
                            71,
                            72,
                            73
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"type\"] is FlowResultType.ABORT\n        assert result[\"reason\"] == reason\n        assert config_entry.data[\"api_token\"] == expected_api_token\n\n        await hass.async_block_till_done()\n",
                        "filePath": "tests/components/blue_current/test_config_flow.py",
                        "lineNumbers": [
                            167,
                            168,
                            169,
                            170,
                            171
                        ]
                    },
                    {
                        "additionalContext": "        await hass.async_block_till_done()\n\n        assert config_entry.data == config_entry_with_wrong_password[\"data\"]\n\n        result = await hass.config_entries.flow.async_init(\n",
                        "filePath": "tests/components/bmw_connected_drive/test_config_flow.py",
                        "lineNumbers": [
                            186,
                            187,
                            188,
                            189,
                            190
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == device.name\n    assert result[\"data\"] == device.get_entry_data()\n\n    assert mock_hello.call_count == 1\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            65,
                            66,
                            67,
                            68,
                            69
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert dict(mock_entry.data) == device.get_entry_data()\n    assert mock_api.auth.call_count == 0\n\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            125,
                            126,
                            127,
                            128,
                            129
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == device.name\n    assert result[\"data\"] == device.get_entry_data()\n\n\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            369,
                            370,
                            371,
                            372,
                            373
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == device.name\n    assert result[\"data\"] == device.get_entry_data()\n\n    assert mock_api.set_lock.call_args == call(False)\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            404,
                            405,
                            406,
                            407,
                            408
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == device.name\n    assert result[\"data\"] == device.get_entry_data()\n\n    assert mock_api.set_lock.call_count == 0\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            546,
                            547,
                            548,
                            549,
                            550
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == device.name\n    assert result[\"data\"][\"host\"] == device.host\n    assert result[\"data\"][\"mac\"] == device.mac\n    assert result[\"data\"][\"type\"] == device.devtype\n\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            575,
                            576,
                            577,
                            578,
                            579
                        ]
                    },
                    {
                        "additionalContext": "\n    assert mock_entry.data[\"host\"] == device.host\n    assert mock_entry.data[\"mac\"] == device.mac\n    assert mock_entry.data[\"type\"] == device.devtype\n    assert mock_api.auth.call_count == 0\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            642,
                            643,
                            644,
                            645,
                            646
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert dict(mock_entry.data) == device.get_entry_data()\n    assert mock_api.auth.call_count == 1\n    assert mock_hello.call_count == 1\n",
                        "filePath": "tests/components/broadlink/test_config_flow.py",
                        "lineNumbers": [
                            756,
                            757,
                            758,
                            759,
                            760
                        ]
                    },
                    {
                        "additionalContext": "        identifiers={(DOMAIN, mock_setup.entry.unique_id)}\n    )\n    assert device_entry.identifiers == {(DOMAIN, device.mac)}\n    assert device_entry.name == device.name\n    assert device_entry.model == device.model\n",
                        "filePath": "tests/components/broadlink/test_device.py",
                        "lineNumbers": [
                            259,
                            260,
                            261,
                            262,
                            263
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert result3[\"type\"] == result_type\n        assert entry.data[\"password\"] == password\n        assert result3.get(\"step_id\", None) == step_id\n        assert result3.get(\"reason\", None) == reason\n",
                        "filePath": "tests/components/brunt/test_config_flow.py",
                        "lineNumbers": [
                            132,
                            133,
                            134,
                            135,
                            136
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result2.get(\"type\") is FlowResultType.CREATE_ENTRY\n    assert result2.get(\"title\") == format_mac(\"00:80:41:19:69:90\")\n    assert result2.get(\"data\") == {\n        CONF_HOST: \"127.0.0.1\",\n",
                        "filePath": "tests/components/bsblan/test_config_flow.py",
                        "lineNumbers": [
                            42,
                            43,
                            44,
                            45,
                            46
                        ]
                    },
                    {
                        "additionalContext": "    }\n    assert \"result\" in result2\n    assert result2[\"result\"].unique_id == format_mac(\"00:80:41:19:69:90\")\n\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/bsblan/test_config_flow.py",
                        "lineNumbers": [
                            51,
                            52,
                            53,
                            54,
                            55
                        ]
                    },
                    {
                        "additionalContext": "\n    token = await conf.async_get_access_token()\n    assert token == \"mock-token\"\n    assert len(aioclient_mock.mock_calls) == 1\n    assert conf._token_valid is not None\n",
                        "filePath": "tests/components/cloud/test_alexa_config.py",
                        "lineNumbers": [
                            195,
                            196,
                            197,
                            198,
                            199,
                            200,
                            201,
                            202,
                            203
                        ]
                    },
                    {
                        "additionalContext": "    assert conf._token_valid is None\n    token = await conf.async_get_access_token()\n    assert token == \"mock-token\"\n    assert len(aioclient_mock.mock_calls) == 2\n\n",
                        "filePath": "tests/components/cloud/test_alexa_config.py",
                        "lineNumbers": [
                            205,
                            206,
                            207,
                            208,
                            209
                        ]
                    },
                    {
                        "additionalContext": "        \"mock-user-id\",\n        cloud_prefs,\n        Mock(username=\"abcdefghjkl\"),\n    )\n\n",
                        "filePath": "tests/components/cloud/test_google_config.py",
                        "lineNumbers": [
                            44,
                            45,
                            46,
                            47,
                            48
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == HOST\n    assert result[\"data\"][CONF_HOST] == HOST\n    assert result[\"data\"][KEY_MAC] == MAC\n\n\n",
                        "filePath": "tests/components/daikin/test_config_flow.py",
                        "lineNumbers": [
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "        await hass.async_block_till_done()\n\n        assert config_entry.unique_id != MAC\n\n        type(mock_daikin).mac = PropertyMock(return_value=MAC)\n",
                        "filePath": "tests/components/daikin/test_init.py",
                        "lineNumbers": [
                            76,
                            77,
                            78,
                            79,
                            80
                        ]
                    },
                    {
                        "additionalContext": "        )\n\n        assert entity_registry.async_get(\"climate.daikinap00000\").unique_id == MAC\n        assert entity_registry.async_get(\n            \"switch.daikinap00000_zone_1\"\n",
                        "filePath": "tests/components/daikin/test_init.py",
                        "lineNumbers": [
                            96,
                            97,
                            98,
                            99,
                            100
                        ]
                    },
                    {
                        "additionalContext": "    assert entity_registry.async_get(\"switch.daikinap00000_zone_1\") is None\n\n    assert entity_registry.async_get(\"climate.daikin_127_0_0_1\").unique_id == MAC\n    assert entity_registry.async_get(\"switch.none_zone_1\").unique_id.startswith(MAC)\n\n",
                        "filePath": "tests/components/daikin/test_init.py",
                        "lineNumbers": [
                            111,
                            112,
                            113,
                            114,
                            115
                        ]
                    },
                    {
                        "additionalContext": "    type(mock_daikin).values = PropertyMock(return_value=DATA)\n\n    assert config_entry.unique_id != MAC\n\n    assert await hass.config_entries.async_reload(config_entry.entry_id)\n",
                        "filePath": "tests/components/daikin/test_init.py",
                        "lineNumbers": [
                            149,
                            150,
                            151,
                            152,
                            153
                        ]
                    },
                    {
                        "additionalContext": "    await hass.async_block_till_done()\n\n    assert config_entry.unique_id == MAC\n\n    assert (\n",
                        "filePath": "tests/components/daikin/test_init.py",
                        "lineNumbers": [
                            154,
                            155,
                            156,
                            157,
                            158
                        ]
                    },
                    {
                        "additionalContext": "\n    entity = entity_registry.async_get(\"climate.daikin_127_0_0_1\")\n    assert entity.unique_id == MAC\n    assert update_unique_id(entity, MAC) is None\n\n",
                        "filePath": "tests/components/daikin/test_init.py",
                        "lineNumbers": [
                            162,
                            163,
                            164,
                            165,
                            166
                        ]
                    },
                    {
                        "additionalContext": "    test_entity.mock_mac_address = TEST_MAC_ADDRESS\n\n    assert test_entity.unique_id == TEST_MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/device_tracker/test_config_entry.py",
                        "lineNumbers": [
                            569,
                            570,
                            571,
                            572,
                            573
                        ]
                    },
                    {
                        "additionalContext": "    assert device.dev_id == config.dev_id\n    assert device.track == config.track\n    assert device.mac == config.mac\n    assert device.config_picture == config.config_picture\n    assert device.consider_home == config.consider_home\n    assert device.icon == config.icon\n",
                        "filePath": "tests/components/device_tracker/test_init.py",
                        "lineNumbers": [
                            142,
                            143,
                            144,
                            145,
                            146,
                            147
                        ]
                    },
                    {
                        "additionalContext": "        \"55502f40dc8b7c769880b10874abc9d0.jpg?s=80&d=wavatar\"\n    )\n    assert device.config_picture == gravatar_url\n\n\n",
                        "filePath": "tests/components/device_tracker/test_init.py",
                        "lineNumbers": [
                            210,
                            211,
                            212,
                            213,
                            214
                        ]
                    },
                    {
                        "additionalContext": "        \"55502f40dc8b7c769880b10874abc9d0.jpg?s=80&d=wavatar\"\n    )\n    assert device.config_picture == gravatar_url\n\n\n",
                        "filePath": "tests/components/device_tracker/test_init.py",
                        "lineNumbers": [
                            230,
                            231,
                            232,
                            233,
                            234
                        ]
                    },
                    {
                        "additionalContext": "\n    # Config entry should be updated to have a MAC address\n    assert config_entry_mock_no_mac.data[CONF_MAC] == MOCK_MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/dlna_dmr/test_config_flow.py",
                        "lineNumbers": [
                            459,
                            460,
                            461,
                            462,
                            463
                        ]
                    },
                    {
                        "additionalContext": "\n    # Config entry should still have a MAC address\n    assert config_entry_mock.data[CONF_MAC] == MOCK_MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/dlna_dmr/test_config_flow.py",
                        "lineNumbers": [
                            480,
                            481,
                            482,
                            483,
                            484
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert (dr.CONNECTION_NETWORK_MAC, MOCK_MAC_ADDRESS) in device.connections\n\n\n",
                        "filePath": "tests/components/dlna_dmr/test_media_player.py",
                        "lineNumbers": [
                            356,
                            357,
                            358,
                            359,
                            360
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert (dr.CONNECTION_NETWORK_MAC, MOCK_MAC_ADDRESS) not in device.connections\n\n\n",
                        "filePath": "tests/components/dlna_dmr/test_media_player.py",
                        "lineNumbers": [
                            378,
                            379,
                            380,
                            381,
                            382
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert (dr.CONNECTION_NETWORK_MAC, MOCK_MAC_ADDRESS) not in device.connections\n\n    # MAC address discovered and set by config flow\n",
                        "filePath": "tests/components/dlna_dmr/test_media_player.py",
                        "lineNumbers": [
                            2294,
                            2295,
                            2296,
                            2297,
                            2298
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert (dr.CONNECTION_NETWORK_MAC, MOCK_MAC_ADDRESS) in device.connections\n\n\n",
                        "filePath": "tests/components/dlna_dmr/test_media_player.py",
                        "lineNumbers": [
                            2314,
                            2315,
                            2316,
                            2317,
                            2318
                        ]
                    },
                    {
                        "additionalContext": "        text=load_fixture(\"efergy/yearly_cost.json\"),\n    )\n    if token == TOKEN:\n        aioclient_mock.get(\n            f\"{base_url}getCurrentValuesSummary?token={token}\",\n",
                        "filePath": "tests/components/efergy/__init__.py",
                        "lineNumbers": [
                            106,
                            107,
                            108,
                            109,
                            110
                        ]
                    },
                    {
                        "additionalContext": "        \"username\": \"test-username\",\n    }\n    assert result3[\"result\"].unique_id == MOCK_MAC\n    assert len(mock_setup.mock_calls) == 1\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/elkm1/test_config_flow.py",
                        "lineNumbers": [
                            482,
                            483,
                            484,
                            485,
                            486
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == \"ohana\"\n    assert result[\"result\"].unique_id == MOCK_MAC\n    assert result[\"data\"] == {\n        \"auto_configure\": False,\n",
                        "filePath": "tests/components/elkm1/test_config_flow.py",
                        "lineNumbers": [
                            880,
                            881,
                            882,
                            883,
                            884
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == \"ohana\"\n    assert result[\"result\"].unique_id == MOCK_MAC\n    assert result[\"data\"] == {\n        \"auto_configure\": True,\n",
                        "filePath": "tests/components/elkm1/test_config_flow.py",
                        "lineNumbers": [
                            932,
                            933,
                            934,
                            935,
                            936
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == \"ohana\"\n    assert result[\"result\"].unique_id == MOCK_MAC\n    assert result[\"data\"] == {\n        \"auto_configure\": True,\n",
                        "filePath": "tests/components/elkm1/test_config_flow.py",
                        "lineNumbers": [
                            976,
                            977,
                            978,
                            979,
                            980
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert config_entry.unique_id == MOCK_MAC\n\n\n",
                        "filePath": "tests/components/elkm1/test_config_flow.py",
                        "lineNumbers": [
                            1112,
                            1113,
                            1114,
                            1115,
                            1116
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == slugify(MAC)\n    assert result[\"data\"] == {}\n    assert result[\"context\"][\"unique_id\"] == MAC\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/eq3btsmart/test_config_flow.py",
                        "lineNumbers": [
                            37,
                            38,
                            39,
                            40,
                            41
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"title\"] == slugify(MAC)\n        assert result[\"data\"] == {}\n        assert result[\"context\"][\"unique_id\"] == MAC\n        assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/eq3btsmart/test_config_flow.py",
                        "lineNumbers": [
                            71,
                            72,
                            73,
                            74,
                            75
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == slugify(MAC)\n    assert result[\"data\"] == {}\n    assert result[\"context\"][\"unique_id\"] == MAC\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/eq3btsmart/test_config_flow.py",
                        "lineNumbers": [
                            99,
                            100,
                            101,
                            102,
                            103
                        ]
                    },
                    {
                        "additionalContext": "    assert \"token\" in data\n    del data[\"token\"][\"expires_at\"]\n    assert dict(config_entry.data) == {\n        \"auth_implementation\": FAKE_AUTH_IMPL,\n        \"token\": SERVER_ACCESS_TOKEN,\n    }\n\n\n",
                        "filePath": "tests/components/fitbit/test_config_flow.py",
                        "lineNumbers": [
                            85,
                            86,
                            87,
                            88,
                            89,
                            90,
                            91,
                            92
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Test where token is expired and the refresh attempt succeeds.\"\"\"\n\n    assert config_entry.data[\"token\"][\"access_token\"] == FAKE_ACCESS_TOKEN\n\n    aioclient_mock.post(\n",
                        "filePath": "tests/components/fitbit/test_init.py",
                        "lineNumbers": [
                            81,
                            82,
                            83,
                            84,
                            85
                        ]
                    },
                    {
                        "additionalContext": "    # Verify token request\n    assert len(aioclient_mock.mock_calls) == 1\n    assert aioclient_mock.mock_calls[0][2] == {\n        CONF_CLIENT_ID: CLIENT_ID,\n        CONF_CLIENT_SECRET: CLIENT_SECRET,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": FAKE_REFRESH_TOKEN,\n    }\n\n    # Verify updated token\n",
                        "filePath": "tests/components/fitbit/test_init.py",
                        "lineNumbers": [
                            93,
                            94,
                            95,
                            96,
                            97,
                            98,
                            99,
                            100,
                            101,
                            102
                        ]
                    },
                    {
                        "additionalContext": "    assert (\n        config_entry.data[\"token\"][\"access_token\"]\n        == SERVER_ACCESS_TOKEN[\"access_token\"]\n    )\n\n",
                        "filePath": "tests/components/fitbit/test_init.py",
                        "lineNumbers": [
                            103,
                            104,
                            105,
                            106,
                            107
                        ]
                    },
                    {
                        "additionalContext": "        assert result2[\"type\"] is FlowResultType.CREATE_ENTRY\n        assert result2[\"title\"] == TEST_USER_ID\n        assert result2[\"data\"] == {\"username\": TEST_USER_ID, \"password\": TEST_PASSWORD}\n        await hass.async_block_till_done()\n        assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/flo/test_config_flow.py",
                        "lineNumbers": [
                            35,
                            36,
                            37,
                            38,
                            39
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result3[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result3[\"title\"] == DEFAULT_ENTRY_TITLE\n    assert result3[\"data\"] == {\n        CONF_MINOR_VERSION: 4,\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            93,
                            94,
                            95,
                            96,
                            97
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result3[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result3[\"title\"] == DEFAULT_ENTRY_TITLE\n    assert result3[\"data\"] == {\n        CONF_MINOR_VERSION: 4,\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            168,
                            169,
                            170,
                            171,
                            172
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert result3[\"type\"] is FlowResultType.CREATE_ENTRY\n        assert result3[\"title\"] == DEFAULT_ENTRY_TITLE\n        assert result3[\"data\"] == {\n            CONF_MINOR_VERSION: 4,\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            251,
                            252,
                            253,
                            254,
                            255
                        ]
                    },
                    {
                        "additionalContext": "        await hass.async_block_till_done()\n    assert result4[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result4[\"title\"] == DEFAULT_ENTRY_TITLE\n    assert result4[\"data\"] == {\n        CONF_MINOR_VERSION: 4,\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            329,
                            330,
                            331,
                            332,
                            333
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert config_entry.unique_id == MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            609,
                            610,
                            611,
                            612,
                            613
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert config_entry.unique_id == MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            632,
                            633,
                            634,
                            635,
                            636
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert config_entry.unique_id == MAC_ADDRESS_ONE_OFF\n\n\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            653,
                            654,
                            655,
                            656,
                            657
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert config_entry.unique_id == MAC_ADDRESS_DIFFERENT\n\n\n",
                        "filePath": "tests/components/flux_led/test_config_flow.py",
                        "lineNumbers": [
                            681,
                            682,
                            683,
                            684,
                            685
                        ]
                    },
                    {
                        "additionalContext": "\n    entity_id = \"light.bulb_rgbcw_ddeeff\"\n    assert entity_registry.async_get(entity_id).unique_id == MAC_ADDRESS\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/flux_led/test_init.py",
                        "lineNumbers": [
                            156,
                            157,
                            158,
                            159,
                            160
                        ]
                    },
                    {
                        "additionalContext": "        assert config_entry.state is ConfigEntryState.LOADED\n\n    assert config_entry.unique_id == MAC_ADDRESS\n    assert config_entry.title == title\n\n",
                        "filePath": "tests/components/flux_led/test_init.py",
                        "lineNumbers": [
                            222,
                            223,
                            224,
                            225,
                            226
                        ]
                    },
                    {
                        "additionalContext": "        await hass.async_block_till_done()\n\n    assert config_entry.unique_id == MAC_ADDRESS_ONE_OFF\n    assert (\n        entity_registry.async_get(\"switch.bulb_rgbcw_ddeeff_remote_access\").unique_id\n        == f\"{MAC_ADDRESS_ONE_OFF}_remote_access\"\n    )\n\n",
                        "filePath": "tests/components/flux_led/test_init.py",
                        "lineNumbers": [
                            309,
                            310,
                            311,
                            312,
                            313,
                            314,
                            315,
                            316,
                            317,
                            318,
                            319,
                            320
                        ]
                    },
                    {
                        "additionalContext": "\n    entity_id = \"light.bulb_rgbcw_ddeeff\"\n    assert entity_registry.async_get(entity_id).unique_id == MAC_ADDRESS\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/flux_led/test_light.py",
                        "lineNumbers": [
                            99,
                            100,
                            101,
                            102,
                            103
                        ]
                    },
                    {
                        "additionalContext": "\n    entity_id = \"light.bulb_rgbcw_ddeeff\"\n    assert entity_registry.async_get(entity_id).unique_id == MAC_ADDRESS\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/flux_led/test_light.py",
                        "lineNumbers": [
                            120,
                            121,
                            122,
                            123,
                            124
                        ]
                    },
                    {
                        "additionalContext": "\n    entity_id = \"number.bulb_rgbcw_ddeeff_effect_speed\"\n    assert entity_registry.async_get(entity_id).unique_id == MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/flux_led/test_number.py",
                        "lineNumbers": [
                            58,
                            59,
                            60,
                            61,
                            62
                        ]
                    },
                    {
                        "additionalContext": "    assert (\n        entity_registry.async_get(entity_id).unique_id\n        == f\"{MAC_ADDRESS}_power_restored\"\n    )\n\n",
                        "filePath": "tests/components/flux_led/test_select.py",
                        "lineNumbers": [
                            89,
                            90,
                            91,
                            92,
                            93
                        ]
                    },
                    {
                        "additionalContext": "    entity_id = \"switch.bulb_rgbcw_ddeeff_remote_access\"\n    assert (\n        entity_registry.async_get(entity_id).unique_id == f\"{MAC_ADDRESS}_remote_access\"\n    )\n\n",
                        "filePath": "tests/components/flux_led/test_switch.py",
                        "lineNumbers": [
                            96,
                            97,
                            98,
                            99,
                            100
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Test the default setup.\"\"\"    )\n    aioclient_mock.get(\n        re.compile(\"api.foobot.io/v2/device/.*\"),\n        text=load_fixture(\"data.json\", \"foobot\"),\n    )\n",
                        "filePath": "tests/components/foobot/test_sensor.py",
                        "lineNumbers": [
                            35,
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43
                        ]
                    },
                    {
                        "additionalContext": "    fake_async_add_entities = MagicMock()\n\n    aioclient_mock.get(re.compile(\"api.foobot.io/v2/owner/.*\"), exc=TimeoutError())\n    with pytest.raises(PlatformNotReady):\n        await foobot.async_setup_platform(hass, VALID_CONFIG, fake_async_add_entities)\n",
                        "filePath": "tests/components/foobot/test_sensor.py",
                        "lineNumbers": [
                            66,
                            67,
                            68,
                            69,
                            70
                        ]
                    },
                    {
                        "additionalContext": "    errors = [HTTPStatus.BAD_REQUEST, HTTPStatus.UNAUTHORIZED, HTTPStatus.FORBIDDEN]\n    for error in errors:\n        aioclient_mock.get(re.compile(\"api.foobot.io/v2/owner/.*\"), status=error)\n        result = await foobot.async_setup_platform(\n            hass, VALID_CONFIG, fake_async_add_entities\n",
                        "filePath": "tests/components/foobot/test_sensor.py",
                        "lineNumbers": [
                            79,
                            80,
                            81,
                            82,
                            83
                        ]
                    },
                    {
                        "additionalContext": "    errors = [HTTPStatus.TOO_MANY_REQUESTS, HTTPStatus.INTERNAL_SERVER_ERROR]\n    for error in errors:\n        aioclient_mock.get(re.compile(\"api.foobot.io/v2/owner/.*\"), status=error)\n        with pytest.raises(PlatformNotReady):\n            await foobot.async_setup_platform(\n",
                        "filePath": "tests/components/foobot/test_sensor.py",
                        "lineNumbers": [
                            94,
                            95,
                            96,
                            97,
                            98
                        ]
                    },
                    {
                        "additionalContext": "                INVALID_RESPONSE_CONFIG[config_flow.CONF_USERNAME],\n            ]\n            or passwd != VALID_CONFIG[config_flow.CONF_PASSWORD]\n        ):\n            product_all_info_rc = dev_info_rc = ERROR_FOSCAM_AUTH\n",
                        "filePath": "tests/components/foscam/test_config_flow.py",
                        "lineNumbers": [
                            56,
                            57,
                            58,
                            59,
                            60
                        ]
                    },
                    {
                        "additionalContext": "    result = await get_diagnostics_for_config_entry(hass, hass_client, entry)\n    avm_wrapper: AvmWrapper = hass.data[DOMAIN][entry.entry_id]\n    assert result == {\n        \"entry\": entry_dict,\n        \"device_info\": {\n            \"client_devices\": [\n                {\n                    \"connected_to\": device.connected_to,\n                    \"connection_type\": device.connection_type,\n                    \"hostname\": device.hostname,\n                    \"is_connected\": device.is_connected,\n                    \"last_activity\": device.last_activity.isoformat(),\n                    \"wan_access\": device.wan_access,\n                }\n                for _, device in avm_wrapper.devices.items()\n            ],\n            \"connection_type\": \"WANPPPConnection\",\n            \"current_firmware\": \"7.29\",\n            \"discovered_services\": [\n                \"DeviceInfo1\",\n                \"Hosts1\",\n                \"LANEthernetInterfaceConfig1\",\n                \"Layer3Forwarding1\",\n                \"UserInterface1\",\n                \"WANCommonIFC1\",\n                \"WANCommonInterfaceConfig1\",\n                \"WANDSLInterfaceConfig1\",\n                \"WANIPConn1\",\n                \"WANPPPConnection1\",\n                \"WLANConfiguration1\",\n                \"X_AVM-DE_Homeauto1\",\n                \"X_AVM-DE_HostFilter1\",\n            ],\n            \"is_router\": True,\n            \"last_exception\": None,\n            \"last_update success\": True,\n            \"latest_firmware\": None,\n            \"mesh_role\": \"master\",\n            \"model\": \"FRITZ!Box 7530 AX\",\n            \"unique_id\": MOCK_MESH_MASTER_MAC.replace(\"6F:12\", \"XX:XX\"),\n            \"update_available\": False,\n            \"wan_link_properties\": {\n                \"NewLayer1DownstreamMaxBitRate\": 318557000,\n                \"NewLayer1UpstreamMaxBitRate\": 51805000,\n                \"NewPhysicalLinkStatus\": \"Up\",\n                \"NewWANAccessType\": \"DSL\",\n            },\n        },\n    }\n",
                        "filePath": "tests/components/fritz/test_diagnostics.py",
                        "lineNumbers": [
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70,
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84
                        ]
                    },
                    {
                        "additionalContext": "\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.mock_title_guestwifi?token={access_token}\",\n        \"friendly_name\": \"Mock Title GuestWifi\",\n    }\n\n    entity_entry = entity_registry.async_get(\"image.mock_title_guestwifi\")\n",
                        "filePath": "tests/components/fritz/test_image.py",
                        "lineNumbers": [
                            118,
                            119,
                            120,
                            121,
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] ==     assert result[\"data\"][CONF_USERNAME] == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n    assert result[\"data\"][CONF_ACCESS_TOKEN] == ACCESS_TOKEN\n    assert result[\"data\"][CONF_EXPIRATION] == EXPIRATION\n\n",
                        "filePath": "tests/components/fyta/test_config_flow.py",
                        "lineNumbers": [
                            93,
                            94,
                            95,
                            96,
                            97,
                            98
                        ]
                    },
                    {
                        "additionalContext": "    assert entry.data[CONF_USERNAME] == \"other_username\"\n    assert entry.data[CONF_PASSWORD] == \"other_password\"\n    assert entry.data[CONF_ACCESS_TOKEN] == ACCESS_TOKEN\n    assert entry.data[CONF_EXPIRATION] == EXPIRATION\n",
                        "filePath": "tests/components/fyta/test_config_flow.py",
                        "lineNumbers": [
                            193,
                            194,
                            195,
                            196
                        ]
                    },
                    {
                        "additionalContext": "    assert entry.minor_version == 2\n    assert entry.data[CONF_USERNAME] == USERNAME\n    assert entry.data[CONF_PASSWORD] == PASSWORD\n    assert entry.data[CONF_ACCESS_TOKEN] == ACCESS_TOKEN\n    assert entry.data[CONF_EXPIRATION] == EXPIRATION\n",
                        "filePath": "tests/components/fyta/test_init.py",
                        "lineNumbers": [
                            148,
                            149,
                            150,
                            151,
                            152
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert \"data\" in result\n    assert result[\"data\"][CONF_ACCESS_TOKEN] == MOCK_ACCESS_TOKEN\n    assert \"options\" in result\n    assert result[\"options\"][CONF_REPOSITORIES] == DEFAULT_REPOSITORIES\n",
                        "filePath": "tests/components/github/test_config_flow.py",
                        "lineNumbers": [
                            83,
                            84,
                            85,
                            86,
                            87
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"title\"] == DEFAULT_NAME\n        assert result[\"data\"] == CONF_DATA\n        assert result[\"result\"].unique_id == MAC\n\n\n",
                        "filePath": "tests/components/goalzero/test_config_flow.py",
                        "lineNumbers": [
                            39,
                            40,
                            41,
                            42,
                            43
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"title\"] == MANUFACTURER\n        assert result[\"data\"] == CONF_DATA\n        assert result[\"result\"].unique_id == MAC\n\n        result = await hass.config_entries.flow.async_init(\n",
                        "filePath": "tests/components/goalzero/test_config_flow.py",
                        "lineNumbers": [
                            109,
                            110,
                            111,
                            112,
                            113
                        ]
                    },
                    {
                        "additionalContext": "        if flow[\"flow_id\"] == result[\"flow_id\"]\n    )\n    assert flow[\"context\"][\"unique_id\"] == MOCK_MAC_ADDR\n\n    entry = MockConfigEntry(\n",
                        "filePath": "tests/components/gogogate2/test_config_flow.py",
                        "lineNumbers": [
                            123,
                            124,
                            125,
                            126,
                            127
                        ]
                    },
                    {
                        "additionalContext": "    token = result.get(\"data\", {}).get(\"token\", {})\n    del token[\"expires_at\"]\n    assert token == {\n        \"access_token\": \"mock-access-token\",\n        \"expires_in\": 60,\n",
                        "filePath": "tests/components/google/test_config_flow.py",
                        "lineNumbers": [
                            719,
                            720,
                            721,
                            722,
                            723
                        ]
                    },
                    {
                        "additionalContext": "        call = aioclient_mock.mock_calls[0]\n        assert call[2] == MOCK_JSON\n        assert call[3] == MOCK_HEADER\n\n\n",
                        "filePath": "tests/components/google_assistant/test_http.py",
                        "lineNumbers": [
                            156,
                            157,
                            158,
                            159,
                            160
                        ]
                    },
                    {
                        "additionalContext": "        call = aioclient_mock.mock_calls[0]\n        assert call[2] == MOCK_JSON\n        assert call[3] == MOCK_HEADER\n        call = aioclient_mock.mock_calls[1]\n        assert call[2] == MOCK_JSON\n        assert call[3] == MOCK_HEADER\n\n\n",
                        "filePath": "tests/components/google_assistant/test_http.py",
                        "lineNumbers": [
                            182,
                            183,
                            184,
                            185,
                            186,
                            187,
                            188,
                            189
                        ]
                    },
                    {
                        "additionalContext": "    assert \"token\" in config_entry.data\n    # Verify access token is refreshed\n    assert config_entry.data[\"token\"].get(\"access_token\") == access_token\n    assert config_entry.data[\"token\"].get(\"refresh_token\") == \"mock-refresh-token\"\n\n",
                        "filePath": "tests/components/google_mail/test_config_flow.py",
                        "lineNumbers": [
                            169,
                            170,
                            171,
                            172,
                            173
                        ]
                    },
                    {
                        "additionalContext": "    assert \"token\" in config_entry.data\n    # Verify access token is refreshed\n    assert config_entry.data[\"token\"][\"access_token\"] == resulting_access_token\n    assert config_entry.data[\"token\"][\"refresh_token\"] == \"mock-refresh-token\"\n",
                        "filePath": "tests/components/google_tasks/test_config_flow.py",
                        "lineNumbers": [
                            314,
                            315,
                            316,
                            317
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            86,
                            87,
                            88,
                            89,
                            90
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            129,
                            130,
                            131,
                            132,
                            133
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            172,
                            173,
                            174,
                            175,
                            176
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            215,
                            216,
                            217,
                            218,
                            219
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            258,
                            259,
                            260,
                            261,
                            262
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            294,
                            295,
                            296,
                            297,
                            298
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            386,
                            387,
                            388,
                            389,
                            390
                        ]
                    },
                    {
                        "additionalContext": "    # Check we forwarded command\n    assert len(aioclient_mock.mock_calls) == 1\n    assert X_AUTH_TOKEN not in aioclient_mock.mock_calls[-1][3]\n    assert aioclient_mock.mock_calls[-1][3][\"X-Hass-Source\"] == \"core.ingress\"\n    assert (\n",
                        "filePath": "tests/components/hassio/test_ingress.py",
                        "lineNumbers": [
                            519,
                            520,
                            521,
                            522,
                            523
                        ]
                    },
                    {
                        "additionalContext": "    assert hassio_user.name == \"Supervisor\"\n    for token in hassio_user.refresh_tokens.values():\n        if token.token == refresh_token:\n            break\n    else:\n",
                        "filePath": "tests/components/hassio/test_init.py",
                        "lineNumbers": [
                            353,
                            354,
                            355,
                            356,
                            357
                        ]
                    },
                    {
                        "additionalContext": "\n    assert mock_config.data.get(\"username\") == USERNAME\n    assert mock_config.data.get(\"password\") == UPDATED_PASSWORD\n    assert result2[\"type\"] is FlowResultType.ABORT\n    assert result2[\"reason\"] == \"reauth_successful\"\n",
                        "filePath": "tests/components/hive/test_config_flow.py",
                        "lineNumbers": [
                            279,
                            280,
                            281,
                            282,
                            283
                        ]
                    },
                    {
                        "additionalContext": "\n    assert mock_config.data.get(\"username\") == USERNAME\n    assert mock_config.data.get(\"password\") == UPDATED_PASSWORD\n    assert result3[\"type\"] is FlowResultType.ABORT\n    assert result3[\"reason\"] == \"reauth_successful\"\n",
                        "filePath": "tests/components/hive/test_config_flow.py",
                        "lineNumbers": [
                            357,
                            358,
                            359,
                            360,
                            361
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Test where token is expired and the refresh attempt succeeds.\"\"\"\n\n    assert config_entry.data[\"token\"][\"access_token\"] == FAKE_ACCESS_TOKEN\n\n    requests_mock.post(OAUTH2_TOKEN, json=SERVER_ACCESS_TOKEN)\n",
                        "filePath": "tests/components/home_connect/test_init.py",
                        "lineNumbers": [
                            164,
                            165,
                            166,
                            167,
                            168
                        ]
                    },
                    {
                        "additionalContext": "    # Verify token request\n    assert aioclient_mock.call_count == 1\n    assert aioclient_mock.mock_calls[0][2] == {\n        \"client_id\": CLIENT_ID,\n        \"client_secret\": CLIENT_SECRET,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": FAKE_REFRESH_TOKEN,\n    }\n\n    # Verify updated token\n",
                        "filePath": "tests/components/home_connect/test_init.py",
                        "lineNumbers": [
                            178,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185,
                            186,
                            187
                        ]
                    },
                    {
                        "additionalContext": "    assert (\n        config_entry.data[\"token\"][\"access_token\"]\n        == SERVER_ACCESS_TOKEN[\"access_token\"]\n    )\n\n",
                        "filePath": "tests/components/home_connect/test_init.py",
                        "lineNumbers": [
                            188,
                            189,
                            190,
                            191,
                            192
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    formatted_mac = dr.format_mac(homekit.driver.state.mac)\n    assert (dr.CONNECTION_NETWORK_MAC, formatted_mac) in device.connections\n\n    # Start again to make sure the registry entry is kept\n",
                        "filePath": "tests/components/homekit/test_homekit.py",
                        "lineNumbers": [
                            762,
                            763,
                            764,
                            765,
                            766
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    formatted_mac = dr.format_mac(homekit.driver.state.mac)\n    assert (dr.CONNECTION_NETWORK_MAC, formatted_mac) in device.connections\n    assert device.model == \"HomeBridge\"\n\n",
                        "filePath": "tests/components/homekit/test_homekit.py",
                        "lineNumbers": [
                            784,
                            785,
                            786,
                            787,
                            788
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    formatted_mac = dr.format_mac(homekit.driver.state.mac)\n    assert (dr.CONNECTION_NETWORK_MAC, formatted_mac) in device.connections\n    assert device.model == \"Light\"\n\n",
                        "filePath": "tests/components/homekit/test_homekit.py",
                        "lineNumbers": [
                            2197,
                            2198,
                            2199,
                            2200,
                            2201
                        ]
                    },
                    {
                        "additionalContext": "    ):\n        assert await hmip_auth.async_checkbutton()\n        assert await hmip_auth.async_register() == \"ABC\"\n\n\n",
                        "filePath": "tests/components/homematicip_cloud/test_hap.py",
                        "lineNumbers": [
                            59,
                            60,
                            61,
                            62,
                            63
                        ]
                    },
                    {
                        "additionalContext": "    signature = yarl.URL(msg[\"result\"][\"path\"]).query[\"authSig\"]\n    claims = jwt.decode(\n        signature,\n        hass.data[DATA_SIGN_SECRET],\n        algorithms=[\"HS256\"],\n",
                        "filePath": "tests/components/http/test_auth.py",
                        "lineNumbers": [
                            505,
                            506,
                            507,
                            508,
                            509
                        ]
                    },
                    {
                        "additionalContext": "    signature = yarl.URL(data[\"path\"]).query[\"authSig\"]\n    claims = jwt.decode(\n        signature,\n        hass.data[DATA_SIGN_SECRET],\n        algorithms=[\"HS256\"],\n",
                        "filePath": "tests/components/http/test_auth.py",
                        "lineNumbers": [
                            541,
                            542,
                            543,
                            544,
                            545
                        ]
                    },
                    {
                        "additionalContext": "    signature = yarl.URL(signed_path).query[\"authSig\"]\n    claims = jwt.decode(\n        signature,\n        hass.data[DATA_SIGN_SECRET],\n        algorithms=[\"HS256\"],\n",
                        "filePath": "tests/components/http/test_auth.py",
                        "lineNumbers": [
                            557,
                            558,
                            559,
                            560,
                            561
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"type\"] is FlowResultType.ABORT\n        assert result[\"reason\"] == \"reauth_successful\"\n        assert CONF_TOKEN in config_entry.data\n\n\n",
                        "filePath": "tests/components/hyperion/test_config_flow.py",
                        "lineNumbers": [
                            876,
                            877,
                            878,
                            879,
                            880
                        ]
                    },
                    {
                        "additionalContext": "from tests.common import MockConfigEntry\n\nMOCK_USERNAME = \"test@example.com\"\nMOCK_PASSWORD = \"password\"\nMOCK_DATA = {CONF_USERNAME: MOCK_USERNAME, CONF_PASSWORD: MOCK_PASSWORD}\n",
                        "filePath": "tests/components/iaqualink/conftest.py",
                        "lineNumbers": [
                            14,
                            15,
                            16,
                            17,
                            18
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == USERNAME\n    assert result[\"data\"][CONF_USERNAME] == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n    assert result[\"data\"][CONF_WITH_FAMILY] == WITH_FAMILY\n    assert result[\"data\"][CONF_MAX_INTERVAL] == DEFAULT_MAX_INTERVAL\n",
                        "filePath": "tests/components/icloud/test_config_flow.py",
                        "lineNumbers": [
                            191,
                            192,
                            193,
                            194,
                            195
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == USERNAME\n    assert result[\"data\"][CONF_USERNAME] == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n    assert result[\"data\"][CONF_WITH_FAMILY] == DEFAULT_WITH_FAMILY\n    assert result[\"data\"][CONF_MAX_INTERVAL] == DEFAULT_MAX_INTERVAL\n",
                        "filePath": "tests/components/icloud/test_config_flow.py",
                        "lineNumbers": [
                            308,
                            309,
                            310,
                            311,
                            312
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == USERNAME\n    assert result[\"data\"][CONF_USERNAME] == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n    assert result[\"data\"][CONF_WITH_FAMILY] == DEFAULT_WITH_FAMILY\n    assert result[\"data\"][CONF_MAX_INTERVAL] == DEFAULT_MAX_INTERVAL\n",
                        "filePath": "tests/components/icloud/test_config_flow.py",
                        "lineNumbers": [
                            353,
                            354,
                            355,
                            356,
                            357
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.ABORT\n    assert result[\"reason\"] == \"reauth_successful\"\n    assert config_entry.data[CONF_PASSWORD] == PASSWORD_2\n\n\n",
                        "filePath": "tests/components/icloud/test_config_flow.py",
                        "lineNumbers": [
                            401,
                            402,
                            403,
                            404,
                            405
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == \"2023-04-01T00:00:00+00:00\"\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n\n",
                        "filePath": "tests/components/image/test_init.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == \"2023-04-01T00:00:00+00:00\"\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n\n",
                        "filePath": "tests/components/image/test_init.py",
                        "lineNumbers": [
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == \"2023-04-01T00:00:00+00:00\"\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": \"abcd\",\n        \"friendly_name\": \"Test\",\n    }\n\n\n",
                        "filePath": "tests/components/image/test_init.py",
                        "lineNumbers": [
                            84,
                            85,
                            86,
                            87,
                            88,
                            89,
                            90,
                            91,
                            92
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == \"unknown\"\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n\n",
                        "filePath": "tests/components/image/test_init.py",
                        "lineNumbers": [
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112,
                            113
                        ]
                    },
                    {
                        "additionalContext": "    # assert state.state == \"unknown\"\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n    resp = await client.get(f\"/api/image_proxy/image.test?token={access_token}\")\n    assert resp.status == HTTPStatus.INTERNAL_SERVER_ERROR\n",
                        "filePath": "tests/components/image/test_init.py",
                        "lineNumbers": [
                            130,
                            131,
                            132,
                            133,
                            134,
                            135,
                            136,
                            137,
                            138
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_HOST] == MOCK_HOST\n    assert result[\"data\"][CONF_PORT] == MOCK_PORT\n    assert result[\"data\"][CONF_PASSWORD] == MOCK_PASSWORD\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            44,
                            45,
                            46,
                            47,
                            48
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_HOST] == MOCK_HOST\n    assert result[\"data\"][CONF_PORT] == MOCK_PORT\n    assert result[\"data\"][CONF_PASSWORD] == MOCK_PASSWORD\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            78,
                            79,
                            80,
                            81,
                            82
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_HOST] == MOCK_HOST\n    assert result[\"data\"][CONF_PORT] == MOCK_PORT\n    assert result[\"data\"][CONF_PASSWORD] == MOCK_PASSWORD\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_HOST] == MOCK_HOST\n    assert result[\"data\"][CONF_PORT] == MOCK_PORT\n    assert result[\"data\"][CONF_PASSWORD] == MOCK_PASSWORD\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            156,
                            157,
                            158,
                            159,
                            160
                        ]
                    },
                    {
                        "additionalContext": "    assert mock_integration.data[CONF_HOST] == MOCK_HOST\n    assert mock_integration.data[CONF_PORT] == MOCK_PORT\n    assert mock_integration.data[CONF_PASSWORD] == MOCK_PASSWORD\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            185,
                            186,
                            187,
                            188,
                            189
                        ]
                    },
                    {
                        "additionalContext": "    assert mock_integration.data[CONF_HOST] == MOCK_HOST\n    assert mock_integration.data[CONF_PORT] == MOCK_PORT\n    assert mock_integration.data[CONF_PASSWORD] == MOCK_PASSWORD\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            240,
                            241,
                            242,
                            243,
                            244
                        ]
                    },
                    {
                        "additionalContext": "    assert mock_integration.data[CONF_HOST] == MOCK_HOST\n    assert mock_integration.data[CONF_PORT] == MOCK_PORT\n    assert mock_integration.data[CONF_PASSWORD] == MOCK_PASSWORD\n",
                        "filePath": "tests/components/jvc_projector/test_config_flow.py",
                        "lineNumbers": [
                            295,
                            296,
                            297
                        ]
                    },
                    {
                        "additionalContext": "    device = device_registry.async_get_device(identifiers={(DOMAIN, MOCK_MAC)})\n    assert device is not None\n    assert device.identifiers == {(DOMAIN, MOCK_MAC)}\n\n\n",
                        "filePath": "tests/components/jvc_projector/test_init.py",
                        "lineNumbers": [
                            24,
                            25,
                            26,
                            27,
                            28
                        ]
                    },
                    {
                        "additionalContext": "    access_token = state.attributes[\"access_token\"]\n    assert state.entity_id == \"image.qr_code\"\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.qr_code?token={access_token}\",\n        \"friendly_name\": \"QR Code\",\n    }\n\n\n",
                        "filePath": "tests/components/kitchen_sink/test_image.py",
                        "lineNumbers": [
                            40,
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48
                        ]
                    },
                    {
                        "additionalContext": "                gateway_port=3675,\n                secure_config=SecureConfig(\n                    device_authentication_password=\"device_auth\",\n                    user_password=\"password\",\n                    user_id=2,\n",
                        "filePath": "tests/components/knx/test_init.py",
                        "lineNumbers": [
                            172,
                            173,
                            174,
                            175,
                            176
                        ]
                    },
                    {
                        "additionalContext": "\n    assert len(hass.config_entries.async_entries()) == 1\n    assert hass.config_entries.async_entries()[0].data == {\n        \"username\": new_username,\n        \"password\": new_password,\n        \"id\": \"1\",\n        \"name\": \"Test\",\n    }\n",
                        "filePath": "tests/components/lacrosse_view/test_config_flow.py",
                        "lineNumbers": [
                            288,
                            289,
                            290,
                            291,
                            292,
                            293,
                            294,
                            295
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.configuration_url is None\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")\n    }\n    assert device_entry.entry_type is None\n    assert device_entry.identifiers == {(DOMAIN, \"SA110405124500W00BS9\")}\n",
                        "filePath": "tests/components/lametric/test_button.py",
                        "lineNumbers": [
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.configuration_url is None\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")\n    }\n    assert device_entry.entry_type is None\n    assert device_entry.identifiers == {(DOMAIN, \"SA110405124500W00BS9\")}\n",
                        "filePath": "tests/components/lametric/test_button.py",
                        "lineNumbers": [
                            90,
                            91,
                            92,
                            93,
                            94,
                            95,
                            96
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.configuration_url is None\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")\n    }\n    assert device_entry.entry_type is None\n    assert device_entry.identifiers == {(DOMAIN, \"SA110405124500W00BS9\")}\n",
                        "filePath": "tests/components/lametric/test_button.py",
                        "lineNumbers": [
                            138,
                            139,
                            140,
                            141,
                            142,
                            143,
                            144
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.configuration_url is None\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")\n    }\n    assert device_entry.entry_type is None\n    assert device_entry.identifiers == {(DOMAIN, \"SA110405124500W00BS9\")}\n",
                        "filePath": "tests/components/lametric/test_button.py",
                        "lineNumbers": [
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    assert device.configuration_url is None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")}\n    assert device.entry_type is None\n    assert device.hw_version is None\n",
                        "filePath": "tests/components/lametric/test_number.py",
                        "lineNumbers": [
                            57,
                            58,
                            59,
                            60,
                            61
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    assert device.configuration_url is None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")}\n    assert device.entry_type is None\n    assert device.hw_version is None\n",
                        "filePath": "tests/components/lametric/test_number.py",
                        "lineNumbers": [
                            105,
                            106,
                            107,
                            108,
                            109
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    assert device.configuration_url is None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")}\n    assert device.entry_type is None\n    assert device.hw_version is None\n",
                        "filePath": "tests/components/lametric/test_select.py",
                        "lineNumbers": [
                            50,
                            51,
                            52,
                            53,
                            54
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    assert device.configuration_url is None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")}\n    assert device.entry_type is None\n    assert device.hw_version is None\n",
                        "filePath": "tests/components/lametric/test_sensor.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "    assert device\n    assert device.configuration_url is None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")}\n    assert device.entry_type is None\n    assert device.hw_version is None\n",
                        "filePath": "tests/components/lametric/test_switch.py",
                        "lineNumbers": [
                            52,
                            53,
                            54,
                            55,
                            56
                        ]
                    },
                    {
                        "additionalContext": "\n    async def login(self, *args, **kwargs):\n        if kwargs.get(\"password\") == TEST_PASSWORD or kwargs.get(\"token\") == TEST_TOKEN:\n            self.access_token = TEST_TOKEN\n            return LoginResponse(\n",
                        "filePath": "tests/components/matrix/conftest.py",
                        "lineNumbers": [
                            95,
                            96,
                            97,
                            98,
                            99
                        ]
                    },
                    {
                        "additionalContext": "\n    async def whoami(self):\n        if self.access_token == TEST_TOKEN:\n            self.user_id = TEST_MXID\n            self.device_id = TEST_DEVICE_ID\n",
                        "filePath": "tests/components/matrix/conftest.py",
                        "lineNumbers": [
                            109,
                            110,
                            111,
                            112,
                            113
                        ]
                    },
                    {
                        "additionalContext": "\nbad_password_good_access_token = LoginTestParameters(\n    password=\"WrongPassword\",\n    access_token={TEST_MXID: TEST_TOKEN},\n    expected_login_state=True,\n",
                        "filePath": "tests/components/matrix/test_login.py",
                        "lineNumbers": [
                            40,
                            41,
                            42,
                            43,
                            44
                        ]
                    },
                    {
                        "additionalContext": "\nbad_password_bad_access_token = LoginTestParameters(\n    password=\"WrongPassword\",\n    access_token={TEST_MXID: \"WrongToken\"},\n    expected_login_state=False,\n",
                        "filePath": "tests/components/matrix/test_login.py",
                        "lineNumbers": [
                            50,
                            51,
                            52,
                            53,
                            54
                        ]
                    },
                    {
                        "additionalContext": "\nbad_password_missing_access_token = LoginTestParameters(\n    password=\"WrongPassword\",\n    access_token={},\n    expected_login_state=False,\n",
                        "filePath": "tests/components/matrix/test_login.py",
                        "lineNumbers": [
                            63,
                            64,
                            65,
                            66,
                            67
                        ]
                    },
                    {
                        "additionalContext": "    # Test loading good tokens.\n    loaded_tokens = await matrix_bot._get_auth_tokens()\n    assert loaded_tokens == {TEST_MXID: TEST_TOKEN}\n\n    # Test miscellaneous error from hass.\n",
                        "filePath": "tests/components/matrix/test_login.py",
                        "lineNumbers": [
                            106,
                            107,
                            108,
                            109,
                            110
                        ]
                    },
                    {
                        "additionalContext": "    mock_load_json.side_effect = HomeAssistantError()\n    loaded_tokens = await matrix_bot._get_auth_tokens()\n    assert loaded_tokens == {}\n",
                        "filePath": "tests/components/matrix/test_login.py",
                        "lineNumbers": [
                            111,
                            112,
                            113
                        ]
                    },
                    {
                        "additionalContext": "    register_json = await resp.json()\n    assert CONF_WEBHOOK_ID in register_json\n    assert CONF_SECRET in register_json\n\n    entries = hass.config_entries.async_entries(DOMAIN)\n",
                        "filePath": "tests/components/mobile_app/test_http_api.py",
                        "lineNumbers": [
                            43,
                            44,
                            45,
                            46,
                            47
                        ]
                    },
                    {
                        "additionalContext": "    assert update_json[\"app_version\"] == \"2.0.0\"\n    assert CONF_WEBHOOK_ID not in update_json\n    assert CONF_SECRET not in update_json\n\n\n",
                        "filePath": "tests/components/mobile_app/test_webhook.py",
                        "lineNumbers": [
                            183,
                            184,
                            185,
                            186,
                            187
                        ]
                    },
                    {
                        "additionalContext": "    enable_enc_json = await enable_enc_resp.json()\n    assert len(enable_enc_json) == 1\n    assert CONF_SECRET in enable_enc_json\n\n    key = enable_enc_json[\"secret\"]\n",
                        "filePath": "tests/components/mobile_app/test_webhook.py",
                        "lineNumbers": [
                            679,
                            680,
                            681,
                            682,
                            683
                        ]
                    },
                    {
                        "additionalContext": "    blind.blind_type = BlindType.RollerBlind.name\n    blind.mac = TEST_BLIND_MAC\n    blind.device_type = DEVICE_TYPES_WIFI[0]\n    assert device_name(blind) == \"RollerBlind\"\n",
                        "filePath": "tests/components/motion_blinds/test_gateway.py",
                        "lineNumbers": [
                            16,
                            17,
                            18,
                            19,
                            20,
                            21
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"Motionblind {TEST_MAC.upper()}\"\n    assert result[\"data\"] == {\n        CONF_ADDRESS: TEST_ADDRESS,\n",
                        "filePath": "tests/components/motionblinds_ble/test_config_flow.py",
                        "lineNumbers": [
                            67,
                            68,
                            69,
                            70,
                            71
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"type\"] is FlowResultType.FORM\n    assert result[\"step_id\"] == \"user\"\n    assert result[\"errors\"] == {\"base\": const.ERROR_INVALID_MAC_CODE}\n\n    # Recover\n",
                        "filePath": "tests/components/motionblinds_ble/test_config_flow.py",
                        "lineNumbers": [
                            96,
                            97,
                            98,
                            99,
                            100
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"Motionblind {TEST_MAC.upper()}\"\n    assert result[\"data\"] == {\n        CONF_ADDRESS: TEST_ADDRESS,\n",
                        "filePath": "tests/components/motionblinds_ble/test_config_flow.py",
                        "lineNumbers": [
                            112,
                            113,
                            114,
                            115,
                            116
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"Motionblind {TEST_MAC.upper()}\"\n    assert result[\"data\"] == {\n        CONF_ADDRESS: TEST_ADDRESS,\n",
                        "filePath": "tests/components/motionblinds_ble/test_config_flow.py",
                        "lineNumbers": [
                            197,
                            198,
                            199,
                            200,
                            201
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == f\"Motionblind {TEST_MAC.upper()}\"\n    assert result[\"data\"] == {\n        CONF_ADDRESS: TEST_ADDRESS,\n",
                        "filePath": "tests/components/motionblinds_ble/test_config_flow.py",
                        "lineNumbers": [
                            248,
                            249,
                            250,
                            251,
                            252
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"result\"]\n    assert result[\"result\"].unique_id == ZEROCONF_MAC\n\n\n",
                        "filePath": "tests/components/motionmount/test_config_flow.py",
                        "lineNumbers": [
                            197,
                            198,
                            199,
                            200,
                            201
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"result\"]\n    assert result[\"result\"].unique_id == ZEROCONF_MAC\n\n\n",
                        "filePath": "tests/components/motionmount/test_config_flow.py",
                        "lineNumbers": [
                            453,
                            454,
                            455,
                            456,
                            457
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"result\"]\n    assert result[\"result\"].unique_id == ZEROCONF_MAC\n",
                        "filePath": "tests/components/motionmount/test_config_flow.py",
                        "lineNumbers": [
                            487,
                            488,
                            489
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"02:5b:26:a8:dc:12\")}\n    assert device.manufacturer == \"Whatever\"\n    assert device.name == \"Beer\"\n",
                        "filePath": "tests/components/mqtt/test_common.py",
                        "lineNumbers": [
                            1045,
                            1046,
                            1047,
                            1048,
                            1049
                        ]
                    },
                    {
                        "additionalContext": "\n    assert len(hass.config_entries.async_entries()) == 1\n    assert config_entry.data.get(CONF_PASSWORD) == new_password\n    await hass.async_block_till_done()\n\n",
                        "filePath": "tests/components/mqtt/test_config_flow.py",
                        "lineNumbers": [
                            1166,
                            1167,
                            1168,
                            1169,
                            1170
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"02:5b:26:a8:dc:12\")}\n    assert device.manufacturer == \"Whatever\"\n    assert device.name == \"Beer\"\n",
                        "filePath": "tests/components/mqtt/test_device_trigger.py",
                        "lineNumbers": [
                            1218,
                            1219,
                            1220,
                            1221,
                            1222
                        ]
                    },
                    {
                        "additionalContext": "    }\n    assert (\n           assert (\n        debug_info_data[\"triggers\"][0    assert (\n        debug_info_data[\"triggers\"][1][\"discovery_data\"][\"payload\"]\n        == topic_map[debug_info_data[\"triggers\"][1][\"discovery_data\"][\"topic\"]]\n    )\n\n",
                        "filePath": "tests/components/mqtt/test_device_trigger.py",
                        "lineNumbers": [
                            1659,
                            1660,
                            1661,
                            1662,
                            1663,
                            1664,
                            1665,
                            1666,
                            1667,
                            1668,
                            1669,
                            1670,
                            1671,
                            1672
                        ]
                    },
                    {
                        "additionalContext": "        == \"homeassistant/device_automation/bla2/config\"\n    )\n    assert debug_info_data[\"triggers\"][0][\"discovery_data\"][\"payload\"] == config2\n\n\n",
                        "filePath": "tests/components/mqtt/test_device_trigger.py",
                        "lineNumbers": [
                            1680,
                            1681,
                            1682,
                            1683,
                            1684
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == STATE_UNKNOWN\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n    async_fire_mqtt_message(hass, topic, b\"grass\")\n",
                        "filePath": "tests/components/mqtt/test_image.py",
                        "lineNumbers": [
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == STATE_UNKNOWN\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n    # Fire incorrect encoded message (utf-8 encoded string)\n",
                        "filePath": "tests/components/mqtt/test_image.py",
                        "lineNumbers": [
                            118,
                            119,
                            120,
                            121,
                            122,
                            123,
                            124,
                            125,
                            126
                        ]
                    },
                    {
                        "additionalContext": "\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n    async_fire_mqtt_message(hass, topic, b\"http://localhost/test.png\")\n",
                        "filePath": "tests/components/mqtt/test_image.py",
                        "lineNumbers": [
                            234,
                            235,
                            236,
                            237,
                            238,
                            239,
                            240,
                            241,
                            242
                        ]
                    },
                    {
                        "additionalContext": "\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n    async_fire_mqtt_message(hass, topic, '{\"val\": \"http://localhost/test.png\"}')\n",
                        "filePath": "tests/components/mqtt/test_image.py",
                        "lineNumbers": [
                            309,
                            310,
                            311,
                            312,
                            313,
                            314,
                            315,
                            316,
                            317
                        ]
                    },
                    {
                        "additionalContext": "\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n    async_fire_mqtt_message(hass, topic, b\"http://localhost/test.png\")\n",
                        "filePath": "tests/components/mqtt/test_image.py",
                        "lineNumbers": [
                            377,
                            378,
                            379,
                            380,
                            381,
                            382,
                            383,
                            384,
                            385
                        ]
                    },
                    {
                        "additionalContext": "    assert state.state == STATE_UNKNOWN\n    access_token = state.attributes[\"access_token\"]\n    assert state.attributes == {\n        \"access_token\": access_token,\n        \"entity_picture\": f\"/api/image_proxy/image.test?token={access_token}\",\n        \"friendly_name\": \"Test\",\n    }\n\n    async_fire_mqtt_message(hass, topic, b\"http://localhost/test.png\")\n",
                        "filePath": "tests/components/mqtt/test_image.py",
                        "lineNumbers": [
                            438,
                            439,
                            440,
                            441,
                            442,
                            443,
                            444,
                            445,
                            446
                        ]
                    },
                    {
                        "additionalContext": "    )\n    assert device is not None\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"02:5b:26:a8:dc:12\")}\n    assert device.manufacturer == \"Whatever\"\n    assert device.name == \"Beer\"\n",
                        "filePath": "tests/components/mqtt/test_tag.py",
                        "lineNumbers": [
                            460,
                            461,
                            462,
                            463,
                            464
                        ]
                    },
                    {
                        "additionalContext": "async def mbddns_update_mock(domain, password, host, ttl=60, session=None):\n    \"\"\"Mock out mythic beasts updater.\"\"\"\n    if password == \"incorrect\":\n        _LOGGER.error(\"Updating Mythic Beasts failed: Not authenticated\")\n        return False\n",
                        "filePath": "tests/components/mythicbeastsdns/test_init.py",
                        "lineNumbers": [
                            13,
                            14,
                            15,
                            16,
                            17
                        ]
                    },
                    {
                        "additionalContext": "\n    assert entry.data[CONF_HOST] == TEST_HOST\n    assert entry.data[CONF_TOKEN] == TEST_TOKEN\n\n\n",
                        "filePath": "tests/components/nanoleaf/test_config_flow.py",
                        "lineNumbers": [
                            315,
                            316,
                            317,
                            318,
                            319
                        ]
                    },
                    {
                        "additionalContext": "\n    assert result[\"url\"] == (\n        f\"{OAUTH2_AUTHORIZE}?response_type=code&client_id={CLIENT_ID}\"\n        \"&redirect_uri=https://example.com/auth/external/callback\"\n        f\"&state={state}\"\n        f\"&client_secret={CLIENT_SECRET}\"\n        \"&scope=public_profile+control_robots+maps\"\n    )\n\n",
                        "filePath": "tests/components/neato/test_config_flow.py",
                        "lineNumbers": [
                            53,
                            54,
                            55,
                            56,
                            57,
                            58,
                            59,
                            60,
                            61
                        ]
                    },
                    {
                        "additionalContext": "    assert len(calls) == 2\n    (method, url, data, headers) = calls[0]\n    assert headers == {\"Authorization\": f\"Bearer {FAKE_TOKEN}\"}\n    (method, url, data, headers) = calls[1]\n    assert headers == {\"Authorization\": f\"Bearer {FAKE_TOKEN}\"}\n\n    # Verify the subscriber was created with the correct credentials\n",
                        "filePath": "tests/components/nest/test_api.py",
                        "lineNumbers": [
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79
                        ]
                    },
                    {
                        "additionalContext": "    assert captured_creds\n    creds = captured_creds\n    assert creds.token == FAKE    assert creds.valid\n    assert not creds.expired\n    assert creds.token_uri == OAUTH2_TOKEN\n    assert creds.client_id == CLIENT_ID\n    assert creds.client_secret == CLIENT_SECRET\n    assert creds.scopes == SDM_SCOPES\n\n",
                        "filePath": "tests/components/nest/test_api.py",
                        "lineNumbers": [
                            81,
                            82,
                            83,
                            84,
                            85,
                            86,
                            87,
                            88,
                            89,
                            90,
                            91,
                            92
                        ]
                    },
                    {
                        "additionalContext": "    # Verify refresh token call to get an updated token\n    (method, url, data, headers) = calls[0]\n    assert data == {\n        \"client_id\": CLIENT_ID,\n        \"client_secret\": CLIENT_SECRET,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": FAKE_REFRESH_TOKEN,\n    }\n    # Verify API requests are made with the new token\n    (method, url, data, headers) = calls[1]\n    assert headers == {\"Authorization\": f\"Bearer {FAKE_UPDATED_TOKEN}\"}\n    (method, url, data, headers) = calls[2]\n    assert headers == {\"Authorization\": f\"Bearer {FAKE_UPDATED_TOKEN}\"}\n\n    # The subscriber is created with a token that is expired.  Verify that the\n",
                        "filePath": "tests/components/nest/test_api.py",
                        "lineNumbers": [
                            141,
                            142,
                            143,
                            144,
                            145,
                            146,
                            147,
                            148,
                            149,
                            150,
                            151,
                            152,
                            153,
                            154,
                            155
                        ]
                    },
                    {
                        "additionalContext": "    assert captured_creds\n    creds = captured_creds\n    assert creds.token == FAKE_TOKEN\n    assert creds.refresh_token == FAKE_REFRESH_TOKEN\n    assert int(dt_util.as_timestamp(creds.expiry)) == int(token_expiration_time)\n    assert not creds.valid\n    assert creds.expired\n    assert creds.token_uri == OAUTH2_TOKEN\n    assert creds.client_id == CLIENT_ID\n    assert creds.client_secret == CLIENT_SECRET\n    assert creds.scopes == SDM_SCOPES\n",
                        "filePath": "tests/components/nest/test_api.py",
                        "lineNumbers": [
                            158,
                            159,
                            160,
                            161,
                            162,
                            163,
                            164,
                            165,
                            166,
                            167,
                            168
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"].get(CONF_SSL) == SSL\n    assert result[\"data\"].get(CONF_USERNAME) == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n\n\n",
                        "filePath": "tests/components/netgear/test_config_flow.py",
                        "lineNumbers": [
                            103,
                            104,
                            105,
                            106,
                            107
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"].get(CONF_SSL) == SSL\n    assert result[\"data\"].get(CONF_USERNAME) == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n\n\n",
                        "filePath": "tests/components/netgear/test_config_flow.py",
                        "lineNumbers": [
                            172,
                            173,
                            174,
                            175,
                            176
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"].get(CONF_SSL) == SSL\n    assert result[\"data\"].get(CONF_USERNAME) == DEFAULT_USER\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n\n\n",
                        "filePath": "tests/components/netgear/test_config_flow.py",
                        "lineNumbers": [
                            298,
                            299,
                            300,
                            301,
                            302
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"].get(CONF_SSL) is True\n    assert result[\"data\"].get(CONF_USERNAME) == DEFAULT_USER\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n\n\n",
                        "filePath": "tests/components/netgear/test_config_flow.py",
                        "lineNumbers": [
                            333,
                            334,
                            335,
                            336,
                            337
                        ]
                    },
                    {
                        "additionalContext": "    \"\"\"Get suggested value for key in voluptuous schema.\"\"\"\n    for k in schema:\n        if k == key:\n            if k.description is None or \"suggested_value\" not in k.description:\n                return None\n",
                        "filePath": "tests/components/obihai/__init__.py",
                        "lineNumbers": [
                            29,
                            30,
                            31,
                            32,
                            33
                        ]
                    },
                    {
                        "additionalContext": "    entry = entity_registry.async_get(\"button.testcamera_reboot\")\n    assert entry\n    assert entry.unique_id == f\"{MAC}_reboot\"\n\n\n",
                        "filePath": "tests/components/onvif/test_button.py",
                        "lineNumbers": [
                            24,
                            25,
                            26,
                            27,
                            28
                        ]
                    },
                    {
                        "additionalContext": "    entry = entity_registry.async_get(\"button.testcamera_set_system_date_and_time\")\n    assert entry\n    assert entry.unique_id == f\"{MAC}_setsystemdatetime\"\n\n\n",
                        "filePath": "tests/components/onvif/test_button.py",
                        "lineNumbers": [
                            56,
                            57,
                            58,
                            59,
                            60
                        ]
                    },
                    {
                        "additionalContext": "            )\n            scopes.append(scope)\n        if with_hardware and \"HARDWARE\" in item:\n            scope = MagicMock()\n            scope.getValue = MagicMock(\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            86,
                            87,
                            88,
                            89,
                            90
                        ]
                    },
                    {
                        "additionalContext": "\n        assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n        assert result[\"title\"] == f\"{URN} - {MAC}\"\n        assert result[\"data\"] == {\n            config_flow.CONF_NAME: URN,\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            160,
                            161,
                            162,
                            163,
                            164
                        ]
                    },
                    {
                        "additionalContext": "\n        assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n        assert result[\"title\"] == f\"{NAME} - {MAC}\"\n        assert result[\"data\"] == {\n            config_flow.CONF_NAME: NAME,\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            356,
                            357,
                            358,
                            359,
                            360
                        ]
                    },
                    {
                        "additionalContext": "            assert len(mock_setup_entry.mock_calls) == 1\n\n        assert result[\"title\"] == f\"{NAME} - {MAC}\"\n        assert result[\"data\"] == {\n            config_flow.CONF_NAME: NAME,\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            552,
                            553,
                            554,
                            555,
                            556
                        ]
                    },
                    {
                        "additionalContext": "            assert len(mock_setup_entry.mock_calls) == 1\n\n        assert result[\"title\"] == f\"{NAME} - {MAC}\"\n        assert result[\"data\"] == {\n            config_flow.CONF_NAME: NAME,\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            633,
                            634,
                            635,
                            636,
                            637
                        ]
                    },
                    {
                        "additionalContext": "    device = devices[0]\n    assert device.model == \"TestModel\"\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, MAC)}\n    assert config_entry.data[CONF_HOST] == \"1.2.3.4\"\n    await hass.config_entries.async_unload(config_entry.entry_id)\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            684,
                            685,
                            686,
                            687,
                            688
                        ]
                    },
                    {
                        "additionalContext": "    device = devices[0]\n    assert device.model == \"TestModel\"\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, MAC)}\n    assert config_entry.data[CONF_HOST] == \"1.2.3.4\"\n\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            732,
                            733,
                            734,
                            735,
                            736
                        ]
                    },
                    {
                        "additionalContext": "            assert len(mock_setup_entry.mock_calls) == 1\n\n        assert result[\"title\"] == f\"{NAME} - {MAC}\"\n        assert result[\"data\"] == {\n            config_flow.CONF_NAME: NAME,\n",
                        "filePath": "tests/components/onvif/test_config_flow.py",
                        "lineNumbers": [
                            968,
                            969,
                            970,
                            971,
                            972
                        ]
                    },
                    {
                        "additionalContext": "    entry = entity_registry.async_get(\"switch.testcamera_wiper\")\n    assert entry\n    assert entry.unique_id == f\"{MAC}_wiper\"\n\n\n",
                        "filePath": "tests/components/onvif/test_switch.py",
                        "lineNumbers": [
                            24,
                            25,
                            26,
                            27,
                            28
                        ]
                    },
                    {
                        "additionalContext": "    entry = entity_registry.async_get(\"switch.testcamera_autofocus\")\n    assert entry\n    assert entry.unique_id == f\"{MAC}_autofocus\"\n\n\n",
                        "filePath": "tests/components/onvif/test_switch.py",
                        "lineNumbers": [
                            86,
                            87,
                            88,
                            89,
                            90
                        ]
                    },
                    {
                        "additionalContext": "    entry = entity_registry.async_get(\"switch.testcamera_ir_lamp\")\n    assert entry\n    assert entry.unique_id == f\"{MAC}_ir_lamp\"\n\n\n",
                        "filePath": "tests/components/onvif/test_switch.py",
                        "lineNumbers": [
                            148,
                            149,
                            150,
                            151,
                            152
                        ]
                    },
                    {
                        "additionalContext": "    assert result4[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result4[\"title\"] == TEST_EMAIL\n    assert result4[\"data\"] == {\n        \"api_type\": \"cloud\",\n        \"username\": TEST_EMAIL,\n        \"password\": TEST_PASSWORD,\n        \"hub\": TEST_SERVER,\n    }\n\n\n",
                        "filePath": "tests/components/overkiz/test_config_flow.py",
                        "lineNumbers": [
                            550,
                            551,
                            552,
                            553,
                            554,
                            555,
                            556,
                            557,
                            558,
                            559
                        ]
                    },
                    {
                        "additionalContext": "        assert result2[\"reason\"] == \"reauth_successful\"\n        assert mock_entry.data[\"username\"] == TEST_EMAIL\n        assert mock_entry.data[\"password\"] == TEST_PASSWORD2\n\n\n",
                        "filePath": "tests/components/overkiz/test_config_flow.py",
                        "lineNumbers": [
                            605,
                            606,
                            607,
                            608,
                            609
                        ]
                    },
                    {
                        "additionalContext": "        assert result3[\"reason\"] == \"reauth_successful\"\n        assert mock_entry.data[\"username\"] == TEST_EMAIL\n        assert mock_entry.data[\"password\"] == TEST_PASSWORD2\n\n\n",
                        "filePath": "tests/components/overkiz/test_config_flow.py",
                        "lineNumbers": [
                            712,
                            713,
                            714,
                            715,
                            716
                        ]
                    },
                    {
                        "additionalContext": "    assert result4[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result4[\"title\"] == TEST_EMAIL\n    assert result4[\"data\"] == {\n        \"username\": TEST_EMAIL,\n        \"password\": TEST_PASSWORD,\n        \"hub\": TEST_SERVER,\n        \"api_type\": \"cloud\",\n    }\n\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/overkiz/test_config_flow.py",
                        "lineNumbers": [
                            813,
                            814,
                            815,
                            816,
                            817,
                            818,
                            819,
                            820,
                            821,
                            822
                        ]
                    },
                    {
                        "additionalContext": "    assert result4[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result4[\"title\"] == TEST_EMAIL\n    assert result4[\"data\"] == {\n        \"username\": TEST_EMAIL,\n        \"password\": TEST_PASSWORD,\n        \"hub\": TEST_SERVER,\n        \"api_type\": \"cloud\",\n    }\n\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/overkiz/test_config_flow.py",
                        "lineNumbers": [
                            887,
                            888,
                            889,
                            890,
                            891,
                            892,
                            893,
                            894,
                            895,
                            896
                        ]
                    },
                    {
                        "additionalContext": "    assert result4[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result4[\"title\"] == \"gateway-1234-5678-9123.local:8443\"\n    assert result4[\"data\"] == {\n        \"username\": TEST_EMAIL,\n        \"password\": TEST_PASSWORD,\n        \"hub\": TEST_SERVER,\n        \"host\": \"gateway-1234-5678-9123.local:8443\",\n        \"api_type\": \"local\",\n        \"token\": \"1234123412341234\",\n        \"verify_ssl\": False,\n    }\n\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/overkiz/test_config_flow.py",
                        "lineNumbers": [
                            941,
                            942,
                            943,
                            944,
                            945,
                            946,
                            947,
                            948,
                            949,
                            950,
                            951,
                            952,
                            953
                        ]
                    },
                    {
                        "additionalContext": "    )\n\n    assert result == {\n        \"context\": {\"source\": \"user\", \"unique_id\": \"ABCDEFGHIJKLF\"},\n        \"flow_id\": ANY,\n        \"type\": \"create_entry\",\n        \"description\": None,\n        \"description_placeholders\": None,\n        \"handler\": \"philips_js\",\n        \"result\": ANY,\n        \"title\": \"55PUS7181/12 (ABCDEFGHIJKLF)\",\n        \"data\": MOCK_CONFIG_PAIRED,\n        \"version\": 1,\n        \"options\": {},\n        \"minor_version\": 1,\n    }\n\n    await hass.async_block_till_done()\n",
                        "filePath": "tests/components/philips_js/test_config_flow.py",
                        "lineNumbers": [
                            151,
                            152,
                            153,
                            154,
                            155,
                            156,
                            157,
                            158,
                            159,
                            160,
                            161,
                            162,
                            163,
                            164,
                            165,
                            166,
                            167,
                            168
                        ]
                    },
                    {
                        "additionalContext": "\n        # Verify the updated auth token is not set and fetch data using the coordinator\n        # Verify that the updated auth token is saved in the config entry\n        assert self.config_entry.data.get(CONF_ACCESS_TOKEN) == updated_auth_token\n",
                        "filePath": "tests/components/picnic/test_sensor.py",
                        "lineNumbers": [
                            588,
                            589,
                            590,
                            591,
                            592,
                            593,
                            594
                        ]
                    },
                    {
                        "additionalContext": "            == \"https://1-2-3-4.123456789001234567890.plex.direct:32400\"\n        )\n        assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_TOKEN] == MOCK_TOKEN\n\n    mock_setup_entry.assert_called_once()\n",
                        "filePath": "tests/components/plex/test_config_flow.py",
                        "lineNumbers": [
                            211,
                            212,
                            213,
                            214,
                            215
                        ]
                    },
                    {
                        "additionalContext": "            == \"https://1-2-3-4.123456789001234567890.plex.direct:32400\"\n        )\n        assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_TOKEN] == MOCK_TOKEN\n\n    mock_setup_entry.assert_called_once()\n",
                        "filePath": "tests/components/plex/test_config_flow.py",
                        "lineNumbers": [
                            268,
                            269,
                            270,
                            271,
                            272
                        ]
                    },
                    {
                        "additionalContext": "            == \"https://1-2-3-4.123456789001234567890.plex.direct:32400\"\n        )\n        assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_TOKEN] == MOCK_TOKEN\n\n    assert mock_setup_entry.call_count == 2\n",
                        "filePath": "tests/components/plex/test_config_flow.py",
                        "lineNumbers": [
                            325,
                            326,
                            327,
                            328,
                            329
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_SERVER_IDENTIFIER] == \"unique_id_123\"\n    assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_URL] == \"http://1.2.3.4:32400\"\n    assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_TOKEN] == MOCK_TOKEN\n\n\n",
                        "filePath": "tests/components/plex/test_config_flow.py",
                        "lineNumbers": [
                            661,
                            662,
                            663,
                            664,
                            665
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_SERVER_IDENTIFIER] == \"unique_id_123\"\n    assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_URL] == mock_url\n    assert result[\"data\"][PLEX_SERVER_CONFIG][CONF_TOKEN] == MOCK_TOKEN\n\n    # Complete Plex integration setup before teardown\n",
                        "filePath": "tests/components/plex/test_config_flow.py",
                        "lineNumbers": [
                            704,
                            705,
                            706,
                            707,
                            708
                        ]
                    },
                    {
                        "additionalContext": "    assert state\n    assert state.state == \"home\"\n    assert state.attributes[\"current_address\"] == MAC_RPA_VALID_1\n\n    await async_inject_broadcast(hass, MAC_RPA_VALID_2)\n",
                        "filePath": "tests/components/private_ble_device/test_device_tracker.py",
                        "lineNumbers": [
                            114,
                            115,
                            116,
                            117,
                            118
                        ]
                    },
                    {
                        "additionalContext": "    assert state\n    assert state.state == \"home\"\n    assert state.attributes[\"current_address\"] == MAC_RPA_VALID_2\n\n\n",
                        "filePath": "tests/components/private_ble_device/test_device_tracker.py",
                        "lineNumbers": [
                            120,
                            121,
                            122,
                            123,
                            124
                        ]
                    },
                    {
                        "additionalContext": "        CONF_MAC: TEST_MAC,\n    }\n    assert result2[\"result\"].unique_id == TEST_UNIQUE_ID\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/rabbitair/test_config_flow.py",
                        "lineNumbers": [
                            108,
                            109,
                            110,
                            111,
                            112
                        ]
                    },
                    {
                        "additionalContext": "        CONF_MAC: TEST_MAC,\n    }\n    assert result2[\"result\"].unique_id == TEST_UNIQUE_ID\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/rabbitair/test_config_flow.py",
                        "lineNumbers": [
                            201,
                            202,
                            203,
                            204,
                            205
                        ]
                    },
                    {
                        "additionalContext": "    assert result.get(\"title\") == HOST\n    assert \"result\" in result\n    assert result[\"result\"].data == CONFIG_ENTRY_DATA\n    assert result[\"result\"].options == {ATTR_DURATION: 6}\n\n",
                        "filePath": "tests/components/rainbird/test_config_flow.py",
                        "lineNumbers": [
                            295,
                            296,
                            297,
                            298,
                            299
                        ]
                    },
                    {
                        "additionalContext": "    assert len(entries) == 1\n    assert entries[0].state is ConfigEntryState.LOADED\n    assert entries[0].unique_id == MAC_ADDRESS_UNIQUE_ID\n    assert entries[0].data.get(CONF_MAC) == MAC_ADDRESS\n\n\n",
                        "filePath": "tests/components/rainbird/test_init.py",
                        "lineNumbers": [
                            124,
                            125,
                            126,
                            127,
                            128,
                            129
                        ]
                    },
                    {
                        "additionalContext": "    await hass.config_entries.async_setup(config_entry.entry_id)\n    assert config_entry.state is ConfigEntryState.LOADED\n    assert config_entry.unique_id == MAC_ADDRESS_UNIQUE_ID\n\n    assert \"Unable to fix missing unique id (already exists)\" in caplog.text\n",
                        "filePath": "tests/components/rainbird/test_init.py",
                        "lineNumbers": [
                            206,
                            207,
                            208,
                            209,
                            210
                        ]
                    },
                    {
                        "additionalContext": "    device_entry = device_registry.async_get_device({(DOMAIN, MAC_ADDRESS_UNIQUE_ID)})\n    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, MAC_ADDRESS_UNIQUE_ID)}\n    assert device_entry.name_by_user == expected_device_name\n    assert device_entry.disabled_by == expected_disabled_by\n",
                        "filePath": "tests/components/rainbird/test_init.py",
                        "lineNumbers": [
                            432,
                            433,
                            434,
                            435,
                            436
                        ]
                    },
                    {
                        "additionalContext": "    assert result2[\"title\"] == \"RAPT Pill 0666\"\n    assert result2[\"data\"] == {}\n    assert result2[\"result\"].unique_id == RAPT_MAC\n\n\n",
                        "filePath": "tests/components/rapt_ble/test_config_flow.py",
                        "lineNumbers": [
                            31,
                            32,
                            33,
                            34,
                            35
                        ]
                    },
                    {
                        "additionalContext": "    assert result2[\"title\"] == \"RAPT Pill 0666\"\n    assert result2[\"data\"] == {}\n    assert result2[\"result\"].unique_id == RAPT_MAC\n\n\n",
                        "filePath": "tests/components/rapt_ble/test_config_flow.py",
                        "lineNumbers": [
                            77,
                            78,
                            79,
                            80,
                            81
                        ]
                    },
                    {
                        "additionalContext": "    assert result2[\"title\"] == \"RAPT Pill 0666\"\n    assert result2[\"data\"] == {}\n    assert result2[\"result\"].unique_id == RAPT_MAC\n\n    # Verify the original one was aborted\n",
                        "filePath": "tests/components/rapt_ble/test_config_flow.py",
                        "lineNumbers": [
                            200,
                            201,
                            202,
                            203,
                            204
                        ]
                    },
                    {
                        "additionalContext": "        config = rtm.RememberTheMilkConfiguration(hass)\n        config.set_token(PROFILE, TOKEN)\n    assert config.get_token(PROFILE) == TOKEN\n\n\n",
                        "filePath": "tests/components/remember_the_milk/test_init.py",
                        "lineNumbers": [
                            18,
                            19,
                            20,
                            21,
                            22
                        ]
                    },
                    {
                        "additionalContext": "    ):\n        config = rtm.RememberTheMilkConfiguration(hass)\n    assert config.get_token(PROFILE) == TOKEN\n\n\n",
                        "filePath": "tests/components/remember_the_milk/test_init.py",
                        "lineNumbers": [
                            28,
                            29,
                            30,
                            31,
                            32
                        ]
                    },
                    {
                        "additionalContext": "    assert config_entry.data[CONF_HOST] == TEST_HOST2\n    assert config_entry.data[CONF_USERNAME] == TEST_USERNAME2\n    assert config_entry.data[CONF_PASSWORD] == TEST_PASSWORD2\n\n\n",
                        "filePath": "tests/components/reolink/test_config_flow.py",
                        "lineNumbers": [
                            289,
                            290,
                            291,
                            292,
                            293
                        ]
                    },
                    {
                        "additionalContext": "    assert config_entry.data[CONF_HOST] == TEST_HOST\n    assert config_entry.data[CONF_USERNAME] == TEST_USERNAME2\n    assert config_entry.data[CONF_PASSWORD] == TEST_PASSWORD2\n\n\n",
                        "filePath": "tests/components/reolink/test_config_flow.py",
                        "lineNumbers": [
                            349,
                            350,
                            351,
                            352,
                            353
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, UPNP_SERIAL)}\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"b0:a7:37:96:4d:fb\"),\n        (dr.CONNECTION_NETWORK_MAC, \"b0:a7:37:96:4d:fa\"),\n    }\n    assert device_entry.manufacturer == \"Roku\"\n    assert device_entry.model == \"Roku 3\"\n",
                        "filePath": "tests/components/roku/test_binary_sensor.py",
                        "lineNumbers": [
                            68,
                            69,
                            70,
                            71,
                            72,
                            73,
                            74,
                            75
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, \"YN00H5555555\")}\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"d8:13:99:f8:b0:c6\"),\n        (dr.CONNECTION_NETWORK_MAC, \"d4:3a:2e:07:fd:cb\"),\n    }\n    assert device_entry.manufacturer == \"Onn\"\n    assert device_entry.model == \"100005844\"\n",
                        "filePath": "tests/components/roku/test_binary_sensor.py",
                        "lineNumbers": [
                            149,
                            150,
                            151,
                            152,
                            153,
                            154,
                            155,
                            156
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, \"1GU48T017973\")}\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"b0:a7:37:96:4d:fb\"),\n        (dr.CONNECTION_NETWORK_MAC, \"b0:a7:37:96:4d:fa\"),\n    }\n    assert device_entry.manufacturer == \"Roku\"\n    assert device_entry.model == \"Roku 3\"\n",
                        "filePath": "tests/components/roku/test_media_player.py",
                        "lineNumbers": [
                            90,
                            91,
                            92,
                            93,
                            94,
                            95,
                            96,
                            97
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, \"YN00H5555555\")}\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"d8:13:99:f8:b0:c6\"),\n        (dr.CONNECTION_NETWORK_MAC, \"d4:3a:2e:07:fd:cb\"),\n    }\n    assert device_entry.manufacturer == \"Onn\"\n    assert device_entry.model == \"100005844\"\n",
                        "filePath": "tests/components/roku/test_media_player.py",
                        "lineNumbers": [
                            136,
                            137,
                            138,
                            139,
                            140,
                            141,
                            142,
                            143
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, UPNP_SERIAL)}\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"b0:a7:37:96:4d:fb\"),\n        (dr.CONNECTION_NETWORK_MAC, \"b0:a7:37:96:4d:fa\"),\n    }\n    assert device_entry.manufacturer == \"Roku\"\n    assert device_entry.model == \"Roku 3\"\n",
                        "filePath": "tests/components/roku/test_sensor.py",
                        "lineNumbers": [
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58
                        ]
                    },
                    {
                        "additionalContext": "    assert device_entry\n    assert device_entry.identifiers == {(DOMAIN, \"YN00H5555555\")}\n    assert device_entry.connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"d8:13:99:f8:b0:c6\"),\n        (dr.CONNECTION_NETWORK_MAC, \"d4:3a:2e:07:fd:cb\"),\n    }\n    assert device_entry.manufacturer == \"Onn\"\n    assert device_entry.model == \"100005844\"\n",
                        "filePath": "tests/components/roku/test_sensor.py",
                        "lineNumbers": [
                            97,
                            98,
                            99,
                            100,
                            101,
                            102,
                            103,
                            104
                        ]
                    },
                    {
                        "additionalContext": "    assert config_result[\"title\"] == EXPECTED_TITLE\n    assert config_result[\"data\"] == entry\n    assert config_result[\"context\"][\"unique_id\"] == GATEWAY_MAC_LOWER\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/ruuvi_gateway/test_config_flow.py",
                        "lineNumbers": [
                            65,
                            66,
                            67,
                            68,
                            69
                        ]
                    },
                    {
                        "additionalContext": "    assert config_result[\"title\"] == EXPECTED_TITLE\n    assert config_result[\"data\"] == BASE_DATA\n    assert config_result[\"context\"][\"unique_id\"] == GATEWAY_MAC_LOWER\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/ruuvi_gateway/test_config_flow.py",
                        "lineNumbers": [
                            94,
                            95,
                            96,
                            97,
                            98
                        ]
                    },
                    {
                        "additionalContext": "    assert config_result[\"title\"] == EXPECTED_TITLE\n    assert config_result[\"data\"] == BASE_DATA\n    assert config_result[\"context\"][\"unique_id\"] == GATEWAY_MAC_LOWER\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/ruuvi_gateway/test_config_flow.py",
                        "lineNumbers": [
                            123,
                            124,
                            125,
                            126,
                            127
                        ]
                    },
                    {
                        "additionalContext": "    assert config_result[\"title\"] == EXPECTED_TITLE\n    assert config_result[\"data\"] == BASE_DATA\n    assert config_result[\"context\"][\"unique_id\"] == GATEWAY_MAC_LOWER\n    assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/ruuvi_gateway/test_config_flow.py",
                        "lineNumbers": [
                            152,
                            153,
                            154,
                            155
                        ]
                    },
                    {
                        "additionalContext": "    device_entries = dr.async_entries_for_config_entry(device_registry, entry.entry_id)\n    assert device_entries == snapshot\n    assert device_entries[0].connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"none\"),\n        (dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\"),\n    }\n\n    # Run setup, and ensure the NONE mac is removed\n",
                        "filePath": "tests/components/samsungtv/test_init.py",
                        "lineNumbers": [
                            252,
                            253,
                            254,
                            255,
                            256,
                            257,
                            258,
                            259
                        ]
                    },
                    {
                        "additionalContext": "    device_entries = dr.async_entries_for_config_entry(device_registry, entry.entry_id)\n    assert device_entries == snapshot\n    assert device_entries[0].connections == {\n        (dr.CONNECTION_NETWORK_MAC, \"aa:bb:cc:dd:ee:ff\")\n    }\n\n    assert entry.version == 2\n",
                        "filePath": "tests/components/samsungtv/test_init.py",
                        "lineNumbers": [
                            263,
                            264,
                            265,
                            266,
                            267,
                            268,
                            269
                        ]
                    },
                    {
                        "additionalContext": "\n    assert unused_entity\n    assert unused_entity.unique_id == TEST_UNUSED_ENTRY[\"unique_id\"]\n\n    with (\n",
                        "filePath": "tests/components/screenlogic/test_data.py",
                        "lineNumbers": [
                            50,
                            51,
                            52,
                            53,
                            54
                        ]
                    },
                    {
                        "additionalContext": "    new_uid = f\"{MOCK_ADAPTER_MAC}_{ent_data.new_key}\"\n\n    assert entity.unique_id == old_uid\n    assert entity.entity_id == old_eid\n\n",
                        "filePath": "tests/components/screenlogic/test_init.py",
                        "lineNumbers": [
                            153,
                            154,
                            155,
                            156,
                            157
                        ]
                    },
                    {
                        "additionalContext": "    assert entity_migrated\n    assert entity_migrated.entity_id == new_eid\n    assert entity_migrated.unique_id == new_uid\n    assert entity_migrated.original_name == ent_data.new_name\n\n",
                        "filePath": "tests/components/screenlogic/test_init.py",
                        "lineNumbers": [
                            174,
                            175,
                            176,
                            177,
                            178
                        ]
                    },
                    {
                        "additionalContext": "    old_uid = original_entity.unique_id\n\n    assert old_uid == f\"{MOCK_ADAPTER_MAC}_missing_device\"\n    assert (\n        old_eid\n",
                        "filePath": "tests/components/screenlogic/test_init.py",
                        "lineNumbers": [
                            209,
                            210,
                            211,
                            212,
                            213
                        ]
                    },
                    {
                        "additionalContext": "    assert result2[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result2[\"title\"] == f\"{TEST_USERNAME:s}\"\n    assert result2[\"data\"] == {\n        \"username\": TEST_USERNAME,\n        \"password\": TEST_PASSWORD,\n        \"region\": TEST_REGION,\n    }\n\n    await hass.async_block_till_done()\n",
                        "filePath": "tests/components/sharkiq/test_config_flow.py",
                        "lineNumbers": [
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68
                        ]
                    },
                    {
                        "additionalContext": "    entry_dict = entry.as_dict()\n    entry_dict[\"data\"].update(\n        {key: REDACTED for key in TO_REDACT if key in entry_dict[\"data\"]}\n    )\n\n",
                        "filePath": "tests/components/shelly/test_diagnostics.py",
                        "lineNumbers": [
                            34,
                            35,
                            36,
                            37,
                            38
                        ]
                    },
                    {
                        "additionalContext": "    entry_dict = entry.as_dict()\n    entry_dict[\"data\"].update(\n        {key: REDACTED for key in TO_REDACT if key in entry_dict[\"data\"]}\n    )\n\n",
                        "filePath": "tests/components/shelly/test_diagnostics.py",
                        "lineNumbers": [
                            89,
                            90,
                            91,
                            92,
                            93
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][\"installed_app_id\"] == installed_app_id\n    assert result[\"data\"][\"location_id\"] == location.location_id\n    assert result[\"data\"][\"access_token\"] == token\n    assert result[\"data\"][\"refresh_token\"] == request.refresh_token\n    assert result[\"data\"][CONF_CLIENT_SECRET] == app_oauth_client.client_secret\n    assert result[\"data\"][CONF_CLIENT_ID] == app_oauth_client.client_id\n",
                        "filePath": "tests/components/smartthings/test_config_flow.py",
                        "lineNumbers": [
                            95,
                            96,
                            97,
                            98,
                            99,
                            100
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][\"installed_app_id\"] == installed_app_id\n    assert result[\"data\"][\"location_id\"] == location.location_id\n    assert result[\"data\"][\"access_token\"] == token\n    assert result[\"data\"][\"refresh_token\"] == request.refresh_token\n    assert result[\"data\"][CONF_CLIENT_SECRET] == app_oauth_client.client_secret\n    assert result[\"data\"][CONF_CLIENT_ID] == app_oauth_client.client_id\n",
                        "filePath": "tests/components/smartthings/test_config_flow.py",
                        "lineNumbers": [
                            166,
                            167,
                            168,
                            169,
                            170,
                            171
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][\"installed_app_id\"] == installed_app_id\n    assert result[\"data\"][\"location_id\"] == location.location_id\n    assert result[\"data\"][\"access_token\"] == token\n    assert result[\"data\"][\"refresh_token\"] == request.refresh_token\n    assert result[\"data\"][CONF_CLIENT_SECRET] == app_oauth_client.client_secret\n    assert result[\"data\"][CONF_CLIENT_ID] == app_oauth_client.client_id\n",
                        "filePath": "tests/components/smartthings/test_config_flow.py",
                        "lineNumbers": [
                            238,
                            239,
                            240,
                            241,
                            242,
                            243
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][\"installed_app_id\"] == installed_app_id\n    assert result[\"data\"][\"location_id\"] == location.location_id\n    assert result[\"data\"][\"access_token\"] == token\n    assert result[\"data\"][\"refresh_token\"] == request.refresh_token\n    assert result[\"data\"][CONF_CLIENT_SECRET] == oauth_client_secret\n    assert result[\"data\"][CONF_CLIENT_ID] == oauth_client_id\n    assert result[\"title\"] == location.name\n",
                        "filePath": "tests/components/smartthings/test_config_flow.py",
                        "lineNumbers": [
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"data\"][\"installed_app_id\"] == installed_app_id\n        assert result[\"data\"][\"location_id\"] == location.location_id\n        assert result[\"data\"][\"access_token\"] == token\n        assert result[\"data\"][\"refresh_token\"] == request.refresh_token\n        assert result[\"data\"][CONF_CLIENT_SECRET] == app_oauth_client.client_secret\n        assert result[\"data\"][CONF_CLIENT_ID] == app_oauth_client.client_id\n",
                        "filePath": "tests/components/smartthings/test_config_flow.py",
                        "lineNumbers": [
                            418,
                            419,
                            420,
                            421,
                            422,
                            423
                        ]
                    },
                    {
                        "additionalContext": "\n    device = device_registry.async_get_device(identifiers={(songpal.DOMAIN, MAC)})\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, MAC)}\n    assert device.manufacturer == \"Sony Corporation\"\n    assert device.name == FRIENDLY_NAME\n",
                        "filePath": "tests/components/songpal/test_media_player.py",
                        "lineNumbers": [
                            150,
                            151,
                            152,
                            153,
                            154
                        ]
                    },
                    {
                        "additionalContext": "\n    entity = entity_registry.async_get(ENTITY_ID)\n    assert entity.unique_id == MAC\n\n\n",
                        "filePath": "tests/components/songpal/test_media_player.py",
                        "lineNumbers": [
                            157,
                            158,
                            159,
                            160,
                            161
                        ]
                    },
                    {
                        "additionalContext": "        identifiers={(songpal.DOMAIN, WIRELESS_MAC)}\n    )\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, WIRELESS_MAC)}\n    assert device.manufacturer == \"Sony Corporation\"\n    assert device.name == FRIENDLY_NAME\n",
                        "filePath": "tests/components/songpal/test_media_player.py",
                        "lineNumbers": [
                            189,
                            190,
                            191,
                            192,
                            193
                        ]
                    },
                    {
                        "additionalContext": "\n    entity = entity_registry.async_get(ENTITY_ID)\n    assert entity.unique_id == WIRELESS_MAC\n\n\n",
                        "filePath": "tests/components/songpal/test_media_player.py",
                        "lineNumbers": [
                            196,
                            197,
                            198,
                            199,
                            200
                        ]
                    },
                    {
                        "additionalContext": "\n    device = device_registry.async_get_device(identifiers={(songpal.DOMAIN, MAC)})\n    assert device.connections == {\n        (dr.CONNECTION_NETWORK_MAC, MAC),\n        (dr.CONNECTION_NETWORK_MAC, WIRELESS_MAC),\n    }\n    assert device.manufacturer == \"Sony Corporation\"\n    assert device.name == FRIENDLY_NAME\n",
                        "filePath": "tests/components/songpal/test_media_player.py",
                        "lineNumbers": [
                            226,
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233
                        ]
                    },
                    {
                        "additionalContext": "    entity = entity_registry.async_get(ENTITY_ID)\n    # We prefer the wired mac if present.\n    assert entity.unique_id == MAC\n\n\n",
                        "filePath": "tests/components/songpal/test_media_player.py",
                        "lineNumbers": [
                            237,
                            238,
                            239,
                            240,
                            241
                        ]
                    },
                    {
                        "additionalContext": "    assert reg_device.model == \"Model Name\"\n    assert reg_device.sw_version == \"13.1\"\n    assert reg_device.connections == {\n        (CONNECTION_NETWORK_MAC, \"00:11:22:33:44:55\"),\n        (CONNECTION_UPNP, \"uuid:RINCON_test\"),\n    }\n    assert reg_device.manufacturer == \"Sonos\"\n    assert reg_device.name == \"Zone A\"\n",
                        "filePath": "tests/components/sonos/test_media_player.py",
                        "lineNumbers": [
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == DOMAIN\n    assert result[\"data\"][CONF_USERNAME] == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n    assert not result[\"result\"].unique_id\n\n",
                        "filePath": "tests/components/spider/test_config_flow.py",
                        "lineNumbers": [
                            55,
                            56,
                            57,
                            58,
                            59
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"title\"] == DOMAIN\n    assert result[\"data\"][CONF_USERNAME] == USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == PASSWORD\n    assert not result[\"result\"].unique_id\n\n",
                        "filePath": "tests/components/spider/test_config_flow.py",
                        "lineNumbers": [
                            85,
                            86,
                            87,
                            88,
                            89
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"data\"][CONF_ID] == ACCNT_ID\n        assert result[\"data\"][CONF_USERNAME] == ACCNT_USERNAME\n        assert result[\"data\"][CONF_PASSWORD] == ACCNT_PASSWORD\n        assert result[\"data\"][CONF_IS_TOU] == ACCNT_IS_TOU\n\n",
                        "filePath": "tests/components/srp_energy/test_config_flow.py",
                        "lineNumbers": [
                            51,
                            52,
                            53,
                            54,
                            55
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_ID] == ACCNT_ID_2\n    assert result[\"data\"][CONF_USERNAME] == ACCNT_USERNAME\n    assert result[\"data\"][CONF_PASSWORD] == ACCNT_PASSWORD\n    assert result[\"data\"][CONF_IS_TOU] == ACCNT_IS_TOU\n\n",
                        "filePath": "tests/components/srp_energy/test_config_flow.py",
                        "lineNumbers": [
                            163,
                            164,
                            165,
                            166,
                            167
                        ]
                    },
                    {
                        "additionalContext": "    assert result2[\"title\"] == DEVICE_NAME\n    assert result2[\"data\"] == DEFAULT_ENTRY_DATA\n    assert result2[\"context\"][\"unique_id\"] == FORMATTED_MAC_ADDRESS\n    assert len(mock_setup_entry.mock_calls) == 1\n\n",
                        "filePath": "tests/components/steamist/test_config_flow.py",
                        "lineNumbers": [
                            101,
                            102,
                            103,
                            104,
                            105
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"reason\"] == \"already_configured\"\n\n    assert config_entry.unique_id == FORMATTED_MAC_ADDRESS\n    assert mock_setup.called\n    assert mock_setup_entry.called\n",
                        "filePath": "tests/components/steamist/test_config_flow.py",
                        "lineNumbers": [
                            378,
                            379,
                            380,
                            381,
                            382
                        ]
                    },
                    {
                        "additionalContext": "        assert config_entry.state is ConfigEntryState.LOADED\n\n    assert config_entry.unique_id == FORMATTED_MAC_ADDRESS\n    assert config_entry.data[CONF_NAME] == DEVICE_NAME\n    assert config_entry.title == DEVICE_NAME\n",
                        "filePath": "tests/components/steamist/test_init.py",
                        "lineNumbers": [
                            105,
                            106,
                            107,
                            108,
                            109
                        ]
                    },
                    {
                        "additionalContext": "        assert result[\"data\"][CONF_NAME] == NAME\n        assert result[\"data\"][CONF_URL] == URL\n        assert result[\"data\"][CONF_TOKEN] == TOKEN\n        assert result[\"data\"][CONF_VERIFY_SSL] == VERIFY_SSL\n        assert len(mock_setup_entry.mock_calls) == 1\n",
                        "filePath": "tests/components/syncthing/test_config_flow.py",
                        "lineNumbers": [
                            60,
                            61,
                            62,
                            63,
                            64
                        ]
                    },
                    {
                        "additionalContext": "    assert state.name == \"Tasmota Test\"\n\n    assert (mac, \"switch\", \"relay\", 0) in hass.data[ALREADY_DISCOVERED]\n\n\n",
                        "filePath": "tests/components/tasmota/test_discovery.py",
                        "lineNumbers": [
                            154,
                            155,
                            156,
                            157,
                            158
                        ]
                    },
                    {
                        "additionalContext": "    assert state_duplicate is None\n    assert (\n        f\"Entity already added, sending update: switch ('{mac}', 'switch', 'relay', 0)\"\n        in caplog.text\n    )\n",
                        "filePath": "tests/components/tasmota/test_discovery.py",
                        "lineNumbers": [
                            541,
                            542,
                            543,
                            544,
                            545
                        ]
                    },
                    {
                        "additionalContext": "    async_fire_mqtt_message(hass, f\"{DEFAULT_PREFIX}/{mac}/config\", json.dumps(config))\n    await hass.async_block_till_done()\n    assert f\"Removing entity: switch ('{mac}', 'switch', 'relay', 0)\" in caplog.text\n\n    caplog.clear()\n",
                        "filePath": "tests/components/tasmota/test_discovery.py",
                        "lineNumbers": [
                            566,
                            567,
                            568,
                            569,
                            570
                        ]
                    },
                    {
                        "additionalContext": "    assert mock_config_entry.state is ConfigEntryState.LOADED\n    config = DEVICE_CONFIG_AUTH\n    assert config.credentials != stored_credentials\n    config.credentials = stored_credentials\n    mock_connect[\"connect\"].assert_called_once_with(config=config)\n",
                        "filePath": "tests/components/tplink/test_init.py",
                        "lineNumbers": [
                            205,
                            206,
                            207,
                            208,
                            209
                        ]
                    },
                    {
                        "additionalContext": "\n    for c in connected_clients_data:\n        if c[\"mac\"] == mac:\n            if c[\"wireless\"]:\n                return OmadaWirelessClient(c)\n",
                        "filePath": "tests/components/tplink_omada/conftest.py",
                        "lineNumbers": [
                            127,
                            128,
                            129,
                            130,
                            131
                        ]
                    },
                    {
                        "additionalContext": "        c\n        async for c in mock_omada_site_client.get_connected_clients()\n        if c.mac != client_mac\n    ]\n\n",
                        "filePath": "tests/components/tplink_omada/test_device_tracker.py",
                        "lineNumbers": [
                            107,
                            108,
                            109,
                            110,
                            111
                        ]
                    },
                    {
                        "additionalContext": "    ) -> None:\n        assert device\n        assert device.mac == network_switch_mac\n        assert switch_port_details\n        assert switch_port_details.port == port_num\n",
                        "filePath": "tests/components/tplink_omada/test_switch.py",
                        "lineNumbers": [
                            253,
                            254,
                            255,
                            256,
                            257
                        ]
                    },
                    {
                        "additionalContext": "    assert calls[0].data[ATTR_MEDIA_CONTENT_TYPE] == MediaType.MUSIC\n    assert await get_media_source_url(hass, calls[0].data[ATTR_MEDIA_CONTENT_ID]) == (\n        \"/api/tts_proxy/42f18378fd4393d18c8dd11d03fa9563c1e54491\"\n        f\"_de-de_{opt_hash}_{expected_url_suffix}.mp3\"\n    )\n    await hass.async_block_till_done()\n",
                        "filePath": "tests/components/tts/test_init.py",
                        "lineNumbers": [
                            499,
                            500,
                            501,
                            502,
                            503,
                            504
                        ]
                    },
                    {
                        "additionalContext": "    assert calls[0].data[ATTR_MEDIA_CONTENT_TYPE] == MediaType.MUSIC\n    assert await get_media_source_url(hass, calls[0].data[ATTR_MEDIA_CONTENT_ID]) == (\n        \"/api/tts_proxy/42f18378fd4393d18c8dd11d03fa9563c1e54491\"\n        f\"_de-de_{opt_hash}_{expected_url_suffix}.mp3\"\n    )\n    await hass.async_block_till_done()\n",
                        "filePath": "tests/components/tts/test_init.py",
                        "lineNumbers": [
                            583,
                            584,
                            585,
                            586,
                            587,
                            588
                        ]
                    },
                    {
                        "additionalContext": "    assert calls[0].data[ATTR_MEDIA_CONTENT_TYPE] == MediaType.MUSIC\n    assert await get_media_source_url(hass, calls[0].data[ATTR_MEDIA_CONTENT_ID]) == (\n        \"/api/tts_proxy/42f18378fd4393d18c8dd11d03fa9563c1e54491\"\n        f\"_de-de_{opt_hash}_{expected_url_suffix}.mp3\"\n    )\n    await hass.async_block_till_done()\n",
                        "filePath": "tests/components/tts/test_init.py",
                        "lineNumbers": [
                            654,
                            655,
                            656,
                            657,
                            658,
                            659
                        ]
                    },
                    {
                        "additionalContext": "        assert len(hass.config_entries.async_entries()) == 1\n        assert (\n            hass.config_entries.async_entries()[0].data[CONF_PASSWORD] == new_password\n        )\n        assert (\n",
                        "filePath": "tests/components/vicare/test_config_flow.py",
                        "lineNumbers": [
                            142,
                            143,
                            144,
                            145,
                            146
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_HOST] == HOST\n    assert result[\"data\"][CONF_DEVICE_CLASS] == MediaPlayerDeviceClass.TV\n    assert result[\"data\"][CONF_ACCESS_TOKEN] == ACCESS_TOKEN\n    assert CONF_APPS not in result[\"data\"]\n\n",
                        "filePath": "tests/components/vizio/test_config_flow.py",
                        "lineNumbers": [
                            105,
                            106,
                            107,
                            108,
                            109
                        ]
                    },
                    {
                        "additionalContext": "    assert result[\"data\"][CONF_HOST] == HOST\n    assert result[\"data\"][CONF_DEVICE_CLASS] == MediaPlayerDeviceClass.TV\n    assert result[\"data\"][CONF_ACCESS_TOKEN] == ACCESS_TOKEN\n    assert result[\"data\"][CONF_VOLUME_STEP] == VOLUME_STEP\n\n",
                        "filePath": "tests/components/vizio/test_config_flow.py",
                        "lineNumbers": [
                            443,
                            444,
                            445,
                            446,
                            447
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert len(mocked_wakeonlan.mock_calls) == 1\n        assert mocked_wakeonlan.mock_calls[-1][1][0] == mac\n        assert mocked_wakeonlan.mock_calls[-1][2][\"ip_address\"] == bc_ip\n        assert mocked_wakeonlan.mock_calls[-1][2][\"port\"] == bc_port\n",
                        "filePath": "tests/components/wake_on_lan/test_init.py",
                        "lineNumbers": [
                            29,
                            30,
                            31,
                            32,
                            33
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert len(mocked_wakeonlan.mock_calls) == 2\n        assert mocked_wakeonlan.mock_calls[-1][1][0] == mac\n        assert mocked_wakeonlan.mock_calls[-1][2][\"ip_address\"] == bc_ip\n        assert \"port\" not in mocked_wakeonlan.mock_calls[-1][2]\n",
                        "filePath": "tests/components/wake_on_lan/test_init.py",
                        "lineNumbers": [
                            40,
                            41,
                            42,
                            43,
                            44
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert len(mocked_wakeonlan.mock_calls) == 3\n        assert mocked_wakeonlan.mock_calls[-1][1][0] == mac\n        assert mocked_wakeonlan.mock_calls[-1][2][\"port\"] == bc_port\n        assert \"ip_address\" not in mocked_wakeonlan.mock_calls[-1][2]\n",
                        "filePath": "tests/components/wake_on_lan/test_init.py",
                        "lineNumbers": [
                            51,
                            52,
                            53,
                            54,
                            55
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert len(mocked_wakeonlan.mock_calls) == 4\n        assert mocked_wakeonlan.mock_calls[-1][1][0] == mac\n        assert not mocked_wakeonlan.mock_calls[-1][2]\n",
                        "filePath": "tests/components/wake_on_lan/test_init.py",
                        "lineNumbers": [
                            68,
                            69,
                            70,
                            71
                        ]
                    },
                    {
                        "additionalContext": "\n    entity_id = \"binary_sensor.mock_title_occupancy\"\n    assert entity_registry.async_get(entity_id).unique_id == f\"{FAKE_MAC}_occupancy\"\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/wiz/test_binary_sensor.py",
                        "lineNumbers": [
                            31,
                            32,
                            33,
                            34,
                            35
                        ]
                    },
                    {
                        "additionalContext": "    await async_push_update(hass, bulb, {\"mac\": FAKE_MAC, \"src\": \"pir\", \"state\": True})\n\n    assert entity_registry.async_get(entity_id).unique_id == f\"{FAKE_MAC}_occupancy\"\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/wiz/test_binary_sensor.py",
                        "lineNumbers": [
                            67,
                            68,
                            69,
                            70,
                            71
                        ]
                    },
                    {
                        "additionalContext": "    await async_setup_integration(hass)\n    entity_id = \"light.mock_title\"\n    assert entity_registry.async_get(entity_id).unique_id == FAKE_MAC\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/wiz/test_light.py",
                        "lineNumbers": [
                            38,
                            39,
                            40,
                            41,
                            42
                        ]
                    },
                    {
                        "additionalContext": "    bulb, _ = await async_setup_integration(hass)\n    entity_id = \"light.mock_title\"\n    assert entity_registry.async_get(entity_id).unique_id == FAKE_MAC\n    state = hass.states.get(entity_id)\n    assert state.state == STATE_ON\n",
                        "filePath": "tests/components/wiz/test_light.py",
                        "lineNumbers": [
                            49,
                            50,
                            51,
                            52,
                            53
                        ]
                    },
                    {
                        "additionalContext": "    await async_push_update(hass, bulb, {\"mac\": FAKE_MAC})\n    entity_id = \"number.mock_title_effect_speed\"\n    assert entity_registry.async_get(entity_id).unique_id == f\"{FAKE_MAC}_effect_speed\"\n    assert hass.states.get(entity_id).state == STATE_UNAVAILABLE\n\n",
                        "filePath": "tests/components/wiz/test_number.py",
                        "lineNumbers": [
                            25,
                            26,
                            27,
                            28,
                            29
                        ]
                    },
                    {
                        "additionalContext": "    entity_id = \"number.mock_title_dual_head_ratio\"\n    assert (\n        entity_registry.async_get(entity_id).unique_id == f\"{FAKE_MAC}_dual_head_ratio\"\n    )\n    assert hass.states.get(entity_id).state == STATE_UNAVAILABLE\n",
                        "filePath": "tests/components/wiz/test_number.py",
                        "lineNumbers": [
                            50,
                            51,
                            52,
                            53,
                            54
                        ]
                    },
                    {
                        "additionalContext": "    entity_id = \"sensor.mock_title_signal_strength\"\n    reg_entry = entity_registry.async_get(entity_id)\n    assert reg_entry.unique_id == f\"{FAKE_MAC}_rssi\"\n    updated_entity = entity_registry.async_update_entity(\n        entity_id=entity_id, disabled_by=None\n",
                        "filePath": "tests/components/wiz/test_sensor.py",
                        "lineNumbers": [
                            27,
                            28,
                            29,
                            30,
                            31
                        ]
                    },
                    {
                        "additionalContext": "    entity_id = \"sensor.mock_title_power\"\n    reg_entry = entity_registry.async_get(entity_id)\n    assert reg_entry.unique_id == f\"{FAKE_MAC}_power\"\n    updated_entity = entity_registry.async_update_entity(\n        entity_id=entity_id, disabled_by=None\n",
                        "filePath": "tests/components/wiz/test_sensor.py",
                        "lineNumbers": [
                            55,
                            56,
                            57,
                            58,
                            59
                        ]
                    },
                    {
                        "additionalContext": "    switch, _ = await async_setup_integration(hass, bulb_type=FAKE_SOCKET)\n    entity_id = \"switch.mock_title\"\n    assert entity_registry.async_get(entity_id).unique_id == FAKE_MAC\n    assert hass.states.get(entity_id).state == STATE_ON\n\n",
                        "filePath": "tests/components/wiz/test_switch.py",
                        "lineNumbers": [
                            27,
                            28,
                            29,
                            30,
                            31
                        ]
                    },
                    {
                        "additionalContext": "    switch, _ = await async_setup_integration(hass, bulb_type=FAKE_SOCKET)\n    entity_id = \"switch.mock_title\"\n    assert entity_registry.async_get(entity_id).unique_id == FAKE_MAC\n    assert hass.states.get(entity_id).state == STATE_ON\n\n",
                        "filePath": "tests/components/wiz/test_switch.py",
                        "lineNumbers": [
                            53,
                            54,
                            55,
                            56,
                            57
                        ]
                    },
                    {
                        "additionalContext": "        # deliver an invalid token\n        return MockResponse({\"code\": \"401\", \"msg\": \"Invalid token\"}, 200)\n    if data and data.get(\"username\", None) == TOKEN_TIMEOUT_USERNAME:\n        # deliver an expired token\n        return MockResponse(\n",
                        "filePath": "tests/components/xiaomi/test_device_tracker.py",
                        "lineNumbers": [
                            55,
                            56,
                            57,
                            58,
                            59
                        ]
                    },
                    {
                        "additionalContext": "    assert scanner is not None\n    assert len(scanner.scan_devices()) == 2\n    assert scanner.get_device_name(\"23:83:BF:F6:38:A0\") == \"Device1\"\n    assert scanner.get_device_name(\"1D:98:EC:5E:D5:A6\") == \"Device2\"\n\n\n",
                        "filePath": "tests/components/xiaomi/test_device_tracker.py",
                        "lineNumbers": [
                            232,
                            233,
                            234,
                            235,
                            236,
                            237
                        ]
                    },
                    {
                        "additionalContext": "    assert scanner is not None\n    assert len(scanner.scan_devices()) == 2\n    assert scanner.get_device_name(\"23:83:BF:F6:38:A0\") == \"Device1\"\n    assert scanner.get_device_name(\"1D:98:EC:5E:D5:A6\") == \"Device2\"\n",
                        "filePath": "tests/components/xiaomi/test_device_tracker.py",
                        "lineNumbers": [
                            256,
                            257,
                            258,
                            259
                        ]
                    },
                    {
                        "additionalContext": "           assert token_data[\"access_token\"] == \"mock-access-token\"\n    assert token_data[\"refresh_token\"] == \"mock-refresh-token\"\n    assert token_data[\"type\"] == \"Bearer\"\n    assert token_data[\"expires_in\"] == 60\n    assert result[\"type\"] is FlowResultType.ABORT\n    assert result[\"reason\"] == \"reauth_successful\"\n",
                        "filePath": "tests/components/yolink/test_config_flow.py",
                        "lineNumbers": [
                            216,
                            217,
                            218,
                            219,
                            220,
                            221,
                            222,
                            223
                        ]
                    },
                    {
                        "additionalContext": "    assert \"token\" in config_entry.data\n    # Verify access token is refreshed\n    assert config_entry.data[\"token\"][\"access_token\"] == access_token\n    assert config_entry.data[\"token\"][\"refresh_token\"] == \"mock-refresh-token\"\n\n",
                        "filePath": "tests/components/youtube/test_config_flow.py",
                        "lineNumbers": [
                            309,
                            310,
                            311,
                            312,
                            313
                        ]
                    },
                    {
                        "additionalContext": "        await hass.async_block_till_done()\n\n    assert \"https://this.url.is.way.too.long\" in caplog.text\n    assert \"German Umlaut\" in caplog.text\n\n",
                        "filePath": "tests/components/zeroconf/test_init.py",
                        "lineNumbers": [
                            235,
                            236,
                            237,
                            238,
                            239
                        ]
                    },
                    {
                        "additionalContext": "\n    result[\"data\"][\"token\"].pop(\"expires_at\")\n    assert result[\"data\"][\"token\"] == {\n        \"refresh_token\": REFRESH_TOKEN,\n        \"access_token\": ACCESS_TOKEN_1,\n        \"type\": \"bearer\",\n        \"expires_in\": 60,\n    }\n\n    entry = hass.config_entries.async_entries(TEST_DOMAIN)[0]\n",
                        "filePath": "tests/helpers/test_config_entry_oauth2_flow.py",
                        "lineNumbers": [
                            636,
                            637,
                            638,
                            639,
                            640,
                            641,
                            642,
                            643,
                            644,
                            645
                        ]
                    },
                    {
                        "additionalContext": "    new_tokens.pop(\"expires_at\")\n\n    assert new_tokens == {\n    assert len(aioclient_mock.mock_calls) == 1\n    assert aioclient_mock.mock_calls[0][2] == {\n        \"client_id\": CLIENT_ID,\n        \"client_secret\": CLIENT_SECRET,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": REFRESH_TOKEN,\n    }\n\n\n",
                        "filePath": "tests/helpers/test_config_entry_oauth2_flow.py",
                        "lineNumbers": [
                            671,
                            672,
                            673,
                            674,
                            675,
                            676,
                            677,
                            678,
                            679,
                            680,
                            681,
                            682,
                            683,
                            684,
                            685,
                            686,
                            687,
                            688
                        ]
                    },
                    {
                        "additionalContext": "\n    assert (\n        aioclient_mock.mock_calls[1][3][\"authorization\"] == f\"Bearer {    )\n\n    assert config_entry.data[\"token\"][\"refresh_token\"] == REFRESH_TOKEN\n    assert config_entry.data[\"token\"][\"access_token\"] == ACCESS_TOKEN_2\n    assert config_entry.data[\"token\"][\"expires_in\"] == 100\n    assert config_entry.data[\"token\"][\"random_other_data\"] == \"should_stay\"\n",
                        "filePath": "tests/helpers/test_config_entry_oauth2_flow.py",
                        "lineNumbers": [
                            724,
                            725,
                            726,
                            727,
                            728,
                            729,
                            730,
                            731,
                            732
                        ]
                    },
                    {
                        "additionalContext": "\n    assert (\n        aioclient_mock.mock_calls[1][3][\"authorization\"] == f\"Bearer {    )\n\n    assert config_entry.data[\"token\"][\"refresh_token\"] == REFRESH_TOKEN\n    assert config_entry.data[\"token\"][\"access_token\"] == ACCESS_TOKEN_2\n    assert config_entry.data[\"token\"][\"expires_in\"] == 19\n    assert config_entry.data[\"token\"][\"random_other_data\"] == \"should_stay\"\n",
                        "filePath": "tests/helpers/test_config_entry_oauth2_flow.py",
                        "lineNumbers": [
                            771,
                            772,
                            773,
                            774,
                            775,
                            776,
                            777,
                            778,
                            779
                        ]
                    },
                    {
                        "additionalContext": "\n    assert (\n        aioclient_mock.mock_calls[0][3][\"authorization\"] == f\"Bearer {    )\n\n    assert config_entry.data[\"token\"][\"refresh_token\"] == REFRESH_TOKEN\n    assert config_entry.data[\"token\"][\"access_token\"] == ACCESS_TOKEN_1\n    assert config_entry.data[\"token\"][\"expires_in\"] == 500\n    assert config_entry.data[\"token\"][\"random_other_data\"] == \"should_stay\"\n",
                        "filePath": "tests/helpers/test_config_entry_oauth2_flow.py",
                        "lineNumbers": [
                            813,
                            814,
                            815,
                            816,
                            817,
                            818,
                            819,
                            820,
                            821
                        ]
                    },
                    {
                        "additionalContext": "        )\n        assert test_entry.id == entry.id, mac\n        assert test_entry.connections == {\n            (dr.CONNECTION_NETWORK_MAC, \"12:34:56:ab:cd:ef\")\n        }\n\n    # This should not raise\n",
                        "filePath": "tests/helpers/test_device_registry.py",
                        "lineNumbers": [
                            1228,
                            1229,
                            1230,
                            1231,
                            1232,
                            1233,
                            1234
                        ]
                    },
                    {
                        "additionalContext": "    assert device.identifiers == {(\"hue\", \"1234\")}\n    assert device.configuration_url == \"http://192.168.0.100/config\"\n    assert device.connections == {(dr.CONNECTION_NETWORK_MAC, \"abcd\")}\n    assert device.entry_type is dr.DeviceEntryType.SERVICE\n    assert device.manufacturer == \"test-manuf\"\n",
                        "filePath": "tests/helpers/test_entity_platform.py",
                        "lineNumbers": [
                            1183,
                            1184,
                            1185,
                            1186,
                            1187
                        ]
                    }
                ]
            },
            "name": "UNKNOWN",
            "type": "crypto-asset"
        },
        {
            "bom-ref": "cryptography:algorithm:7006d4b3-e36d-405b-ae7b-337774843cc1",
            "cryptoProperties": {
                "algorithmProperties": {
                    "padding": "unknown",
                    "primitive": "unknown",
                    "variant": "UNKNOWN-256"
                },
                "assetType": "algorithm",
                "detectionContext": [
                    {
                        "additionalContext": "        access_token_expiration=timedelta(days=300),\n    )\n    assert refresh_token.token_type == auth_models.TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN\n    access_token = manager.async_create_access_token(refresh_token)\n    jwt_payload = jwt.decode(access_token, refresh_token.jwt_key, algorithms=[\"HS256\"])\n",
                        "filePath": "tests/auth/test_init.py",
                        "lineNumbers": [
                            718,
                            719,
                            720,
                            721,
                            722
                        ]
                    }
                ]
            },
            "name": "UNKNOWN-256",
            "type": "crypto-asset"
        }
    ],
    "dependencies": [
        {
            "ref": "cryptography:algorithm:30955f32-c3a0-4691-92fa-90e0034e9bb2"
        },
        {
            "ref": "cryptography:algorithm:458a9c2f-14e5-4b74-99fc-988fe23682d6"
        },
        {
            "ref": "cryptography:algorithm:7006d4b3-e36d-405b-ae7b-337774843cc1"
        },
        {
            "ref": "cryptography:algorithm:9541a6b5-97aa-4e6b-8959-d00c6a761b36"
        },
        {
            "dependsOn": [
                "cryptography:algorithm:30955f32-c3a0-4691-92fa-90e0034e9bb2",
                "cryptography:algorithm:458a9c2f-14e5-4b74-99fc-988fe23682d6",
                "cryptography:algorithm:7006d4b3-e36d-405b-ae7b-337774843cc1",
                "cryptography:algorithm:9541a6b5-97aa-4e6b-8959-d00c6a761b36"
            ],
            "ref": "eaf8d4e4-bc80-47a2-bb0f-3f9518b75aab"
        }
    ],
    "metadata": {
        "component": {
            "bom-ref": "eaf8d4e4-bc80-47a2-bb0f-3f9518b75aab",
            "name": "root",
            "type": "application"
        },
        "timestamp": "2024-06-19T23:51:40.313117+00:00",
        "tools": [
            {
                "externalReferences": [
                    {
                        "type": "build-system",
                        "url": "https://github.com/CycloneDX/cyclonedx-python-lib/actions"
                    },
                    {
                        "type": "distribution",
                        "url": "https://pypi.org/project/cyclonedx-python-lib/"
                    },
                    {
                        "type": "documentation",
                        "url": "https://cyclonedx.github.io/cyclonedx-python-lib/"
                    },
                    {
                        "type": "issue-tracker",
                        "url": "https://github.com/CycloneDX/cyclonedx-python-lib/issues"
                    },
                    {
                        "type": "license",
                        "url": "https://github.com/CycloneDX/cyclonedx-python-lib/blob/main/LICENSE"
                    },
                    {
                        "type": "release-notes",
                        "url": "https://github.com/CycloneDX/cyclonedx-python-lib/blob/main/CHANGELOG.md"
                    },
                    {
                        "type": "vcs",
                        "url": "https://github.com/CycloneDX/cyclonedx-python-lib"
                    },
                    {
                        "type": "website",
                        "url": "https://cyclonedx.org"
                    }
                ],
                "name": "cyclonedx-python-lib",
                "vendor": "CycloneDX",
                "version": "4.2.2"
            },
            {
                "name": "CodeQL",
                "vendor": "GitHub",
                "version": "2.17.5"
            }
        ]
    },
    "serialNumber": "urn:uuid:fc0520b8-290f-4dd4-b5b6-2f7adf7140b2",
    "version": 1,
    "$schema": "https://raw.githubusercontent.com/IBM/CBOM/main/bom-1.4-cbom-1.0.schema.json",
    "bomFormat": "CBOM",
    "specVersion": "1.4-cbom-1.0"
}
